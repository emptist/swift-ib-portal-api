//
// OrderRequest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct OrderRequest: Codable {

    /** acctId is optional. It should be one of the accounts returned by /iserver/accounts. If not passed, the first one in the list is selected.  */
    public var acctId: String?
    /** conid is the identifier of the security you want to trade, you can find the conid with /iserver/secdef/search.  */
    public var conid: Int?
    /** conid:type for example 265598:STK */
    public var secType: String?
    /** Customer Order ID. An arbitraty string that can be used to identify the order, e.g \&quot;my-fb-order\&quot;. The value must be unique for a 24h span. Please do not set this value for child orders when placing a bracket order.  */
    public var cOID: String?
    /** When placing bracket orders, the child parentId must be equal to the cOId (customer order id) of the parent.  */
    public var parentId: String?
    /** orderType can be one of MKT (Market), LMT (Limit), STP (Stop) or STP_LIMIT (stop limit)  */
    public var orderType: String?
    /** listingExchange is optional. By default we use \&quot;SMART\&quot; routing. Possible values are available via this end point: /v1/portal/iserver/contract/{{conid}}/info, see valid_exchange: e.g: SMART,AMEX,NYSE, CBOE,ISE,CHX,ARCA,ISLAND,DRCTEDGE,BEX,BATS,EDGEA,CSFBALGO,JE FFALGO,BYX,IEX,FOXRIVER,TPLUS1,NYSENAT,PSX  */
    public var listingExchange: String?
    /** set to true if the order can be executed outside regular trading hours.  */
    public var outsideRTH: Bool?
    /** optional if order is MKT, for LMT, this is the limit price. For STP this is the stop price.  */
    public var price: Double?
    /** SELL or BUY */
    public var side: String?
    /**  */
    public var ticker: String?
    /** GTC (Good Till Cancel) or DAY. DAY orders are automatically cancelled at the end of the Day or Trading hours.  */
    public var tif: String?
    /** for example QuickTrade */
    public var referrer: String?
    /** usually integer, for some special cases can be float numbers */
    public var quantity: Double?
    /** double number, this is the cash quantity field which can only be used for FX conversion order.  */
    public var fxQty: Double?
    /** If true, the system will use the Adaptive Algo to submit the order https://www.interactivebrokers.com/en/index.php?f&#x3D;19091  */
    public var useAdaptive: Bool?
    /** set to true if the order is a FX conversion order  */
    public var isCurrencyConversion: Bool?
    /** Set the allocation method when placing an order using an FA account for a group Possible allocation methods are \&quot;NetLiquidity\&quot;, \&quot;AvailableEquity\&quot;, \&quot;EqualQuantity\&quot; and \&quot;PctChange\&quot;.  */
    public var allocationMethod: String?

    public init(acctId: String?, conid: Int?, secType: String?, cOID: String?, parentId: String?, orderType: String?, listingExchange: String?, outsideRTH: Bool?, price: Double?, side: String?, ticker: String?, tif: String?, referrer: String?, quantity: Double?, fxQty: Double?, useAdaptive: Bool?, isCurrencyConversion: Bool?, allocationMethod: String?) {
        self.acctId = acctId
        self.conid = conid
        self.secType = secType
        self.cOID = cOID
        self.parentId = parentId
        self.orderType = orderType
        self.listingExchange = listingExchange
        self.outsideRTH = outsideRTH
        self.price = price
        self.side = side
        self.ticker = ticker
        self.tif = tif
        self.referrer = referrer
        self.quantity = quantity
        self.fxQty = fxQty
        self.useAdaptive = useAdaptive
        self.isCurrencyConversion = isCurrencyConversion
        self.allocationMethod = allocationMethod
    }


}

