//
// SessionAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SessionAPI {
    /**
     Authentication Status
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverAuthStatusPost(completion: @escaping ((_ data: AuthStatus?,_ error: Error?) -> Void)) {
        iserverAuthStatusPostWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Authentication Status
     - POST /iserver/auth/status
     - Current Authentication status to the Brokerage system. Market Data and Trading is not possible if not authenticated, e.g. authenticated shows false
     - examples: [{contentType=application/json, example={
  "connected" : true,
  "competing" : true,
  "authenticated" : true,
  "fail" : "fail",
  "message" : "message",
  "prompts" : [ "prompts", "prompts" ]
}}]

     - returns: RequestBuilder<AuthStatus> 
     */
    open class func iserverAuthStatusPostWithRequestBuilder() -> RequestBuilder<AuthStatus> {
        let path = "/iserver/auth/status"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthStatus>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Tries to re-authenticate to Brokerage
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverReauthenticatePost(completion: @escaping ((_ data: AuthStatus?,_ error: Error?) -> Void)) {
        iserverReauthenticatePostWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Tries to re-authenticate to Brokerage
     - POST /iserver/reauthenticate
     - When using the CP Gateway, this endpoint provides a way to reauthenticate to the Brokerage system as long as there is a valid SSO session, see /sso/validate. 
     - examples: [{contentType=application/json, example={
  "connected" : true,
  "competing" : true,
  "authenticated" : true,
  "fail" : "fail",
  "message" : "message",
  "prompts" : [ "prompts", "prompts" ]
}}]

     - returns: RequestBuilder<AuthStatus> 
     */
    open class func iserverReauthenticatePostWithRequestBuilder() -> RequestBuilder<AuthStatus> {
        let path = "/iserver/reauthenticate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthStatus>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Ends the current session
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logoutPost(completion: @escaping ((_ data: InlineResponse2005?,_ error: Error?) -> Void)) {
        logoutPostWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Ends the current session
     - POST /logout
     - Logs the user out of the gateway session. Any further activity requires re-authentication.
     - examples: [{contentType=application/json, example={
  "confirmed" : true
}}]

     - returns: RequestBuilder<InlineResponse2005> 
     */
    open class func logoutPostWithRequestBuilder() -> RequestBuilder<InlineResponse2005> {
        let path = "/logout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2005>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Validate SSO
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ssoValidateGet(completion: @escaping ((_ data: InlineResponse2007?,_ error: Error?) -> Void)) {
        ssoValidateGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Validate SSO
     - GET /sso/validate
     - Validates the current session for the SSO user
     - examples: [{contentType=application/json, example={
  "LOGIN_TYPE" : 0.80082819046101150206595775671303272247314453125,
  "expire" : 1.46581298050294517310021547018550336360931396484375,
  "USER_ID" : 6.02745618307040320615897144307382404804229736328125,
  "AUTH_TIME" : 5.962133916683182377482808078639209270477294921875,
  "USER_NAME" : "USER_NAME",
  "RESULT" : true
}}]

     - returns: RequestBuilder<InlineResponse2007> 
     */
    open class func ssoValidateGetWithRequestBuilder() -> RequestBuilder<InlineResponse2007> {
        let path = "/sso/validate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2007>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Ping the server to keep the session open
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ticklePost(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        ticklePostWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Ping the server to keep the session open
     - POST /tickle
     - If the gateway has not received any requests for several minutes an open session will automatically timeout. The tickle endpoint pings the server to prevent the session from ending.

     - returns: RequestBuilder<Void> 
     */
    open class func ticklePostWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/tickle"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
