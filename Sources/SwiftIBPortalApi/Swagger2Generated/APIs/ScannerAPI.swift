//
// ScannerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ScannerAPI {
    /**
     get lists of available scanners
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverScannerParamsGet(completion: @escaping ((_ data: InlineResponse20027?,_ error: Error?) -> Void)) {
        iserverScannerParamsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     get lists of available scanners
     - GET /iserver/scanner/params
     - Returns an object contains four lists contain all parameters for scanners
     - examples: [{contentType=application/json, example={
  "scan_type_list" : [ {
    "code" : "code",
    "instruments" : [ "instruments", "instruments" ],
    "display_name" : "display_name"
  }, {
    "code" : "code",
    "instruments" : [ "instruments", "instruments" ],
    "display_name" : "display_name"
  } ],
  "location_tree" : [ {
    "locations" : [ {
      "display_name" : "display_name",
      "type" : "type"
    }, {
      "display_name" : "display_name",
      "type" : "type"
    } ],
    "display_name" : "display_name",
    "type" : "type"
  }, {
    "locations" : [ {
      "display_name" : "display_name",
      "type" : "type"
    }, {
      "display_name" : "display_name",
      "type" : "type"
    } ],
    "display_name" : "display_name",
    "type" : "type"
  } ],
  "instrument_list" : [ {
    "filters" : [ "filters", "filters" ],
    "display_name" : "display_name",
    "type" : "type"
  }, {
    "filters" : [ "filters", "filters" ],
    "display_name" : "display_name",
    "type" : "type"
  } ],
  "filter_list" : [ {
    "code" : "code",
    "display_name" : "display_name",
    "type" : "type",
    "group" : "group"
  }, {
    "code" : "code",
    "display_name" : "display_name",
    "type" : "type",
    "group" : "group"
  } ]
}}]

     - returns: RequestBuilder<InlineResponse20027> 
     */
    open class func iserverScannerParamsGetWithRequestBuilder() -> RequestBuilder<InlineResponse20027> {
        let path = "/iserver/scanner/params"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20027>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     run scanner to get a list of contracts
     
     - parameter body: (body) scanner-params request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverScannerRunPost(body: ScannerParams, completion: @escaping ((_ data: [InlineResponse20028]?,_ error: Error?) -> Void)) {
        iserverScannerRunPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     run scanner to get a list of contracts
     - POST /iserver/scanner/run
     - examples: [{contentType=application/json, example=[ {
  "symbol" : "symbol",
  "conidex" : "conidex",
  "contract_description_1" : "contract_description_1",
  "sec_type" : "sec_type",
  "con_id" : 0.80082819046101150206595775671303272247314453125,
  "available_chart_periods" : "available_chart_periods",
  "company_name" : "company_name",
  "column_name" : "column_name",
  "listing_exchange" : "listing_exchange",
  "server_id" : "server_id"
}, {
  "symbol" : "symbol",
  "conidex" : "conidex",
  "contract_description_1" : "contract_description_1",
  "sec_type" : "sec_type",
  "con_id" : 0.80082819046101150206595775671303272247314453125,
  "available_chart_periods" : "available_chart_periods",
  "company_name" : "company_name",
  "column_name" : "column_name",
  "listing_exchange" : "listing_exchange",
  "server_id" : "server_id"
} ]}]
     
     - parameter body: (body) scanner-params request 

     - returns: RequestBuilder<[InlineResponse20028]> 
     */
    open class func iserverScannerRunPostWithRequestBuilder(body: ScannerParams) -> RequestBuilder<[InlineResponse20028]> {
        let path = "/iserver/scanner/run"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20028]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
