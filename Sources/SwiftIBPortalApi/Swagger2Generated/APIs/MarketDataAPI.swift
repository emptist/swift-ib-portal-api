//
// MarketDataAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class MarketDataAPI {
    /**
     Market Data Cancel (Single)
     
     - parameter conid: (path) contract id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverMarketdataConidUnsubscribeGet(conid: String, completion: @escaping ((_ data: InlineResponse20023?,_ error: Error?) -> Void)) {
        iserverMarketdataConidUnsubscribeGetWithRequestBuilder(conid: conid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Market Data Cancel (Single)
     - GET /iserver/marketdata/{conid}/unsubscribe
     - Cancel market data for given conid. To cancel all market data request(s), see /iserver/marketdata/unsubscribeall. 
     - examples: [{contentType=application/json, example={
  "confirmed" : "confirmed"
}}]
     
     - parameter conid: (path) contract id 

     - returns: RequestBuilder<InlineResponse20023> 
     */
    open class func iserverMarketdataConidUnsubscribeGetWithRequestBuilder(conid: String) -> RequestBuilder<InlineResponse20023> {
        var path = "/iserver/marketdata/{conid}/unsubscribe"
        let conidPreEscape = "\(conid)"
        let conidPostEscape = conidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conid}", with: conidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20023>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Market Data History
     
     - parameter conid: (query) contract id 
     - parameter period: (query) available time period-- {1-30}min, {1-8}h, {1-1000}d, {1-792}w, {1-182}m, {1-15}y 
     - parameter exchange: (query) Exchange of the conid (e.g. ISLAND, NYSE, etc.). Default value is empty which corresponds to primary exchange of the conid. (optional)
     - parameter bar: (query) possible value-- 1min, 2min, 3min, 5min, 10min, 15min, 30min, 1h, 2h, 3h, 4h, 8h, 1d, 1w, 1m (optional)
     - parameter outsideRth: (query) For contracts that support it, will determine if historical data includes outside of regular trading hours. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverMarketdataHistoryGet(conid: String, period: String, exchange: String? = nil, bar: String? = nil, outsideRth: Bool? = nil, completion: @escaping ((_ data: HistoryData?,_ error: Error?) -> Void)) {
        iserverMarketdataHistoryGetWithRequestBuilder(conid: conid, period: period, exchange: exchange, bar: bar, outsideRth: outsideRth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Market Data History
     - GET /iserver/marketdata/history
     - Get historical market Data for given conid, length of data is controlled by 'period' and 'bar'. Formatted as: min=minute, h=hour, d=day, w=week, m=month, y=year e.g. period =1y with bar =1w returns 52 data points (Max of 1000 data points supported). **Note**: There's a limit of 5 concurrent requests. Excessive requests will return a 'Too many requests' status 429 response. 
     - examples: [{contentType=application/json, example={
  "symbol" : "symbol",
  "priceDisplayRule" : 5,
  "travelTime" : 1,
  "mktDataDelay" : 6,
  "data" : [ {
    "c" : 9.301444243932575517419536481611430644989013671875,
    "t" : 7.3862819483858839220147274318151175975799560546875,
    "v" : 4.1456080298839363962315474054776132106781005859375,
    "h" : 3.61607674925191080461672754609026014804840087890625,
    "l" : 2.027123023002321833274663731572218239307403564453125,
    "o" : 7.061401241503109105224211816675961017608642578125
  }, {
    "c" : 9.301444243932575517419536481611430644989013671875,
    "t" : 7.3862819483858839220147274318151175975799560546875,
    "v" : 4.1456080298839363962315474054776132106781005859375,
    "h" : 3.61607674925191080461672754609026014804840087890625,
    "l" : 2.027123023002321833274663731572218239307403564453125,
    "o" : 7.061401241503109105224211816675961017608642578125
  } ],
  "negativeCapable" : true,
  "barLength" : 0,
  "mdAvailability" : "mdAvailability",
  "tradingDayDuration" : 1,
  "priceFactor" : 100,
  "points" : 1,
  "outsideRth" : true,
  "high" : "high",
  "low" : "low",
  "volumeFactor" : 5,
  "timePeriod" : "timePeriod",
  "startTime" : "startTime",
  "text" : "text",
  "messageVersion" : 2,
  "priceDisplayValue" : "priceDisplayValue"
}}]
     
     - parameter conid: (query) contract id 
     - parameter period: (query) available time period-- {1-30}min, {1-8}h, {1-1000}d, {1-792}w, {1-182}m, {1-15}y 
     - parameter exchange: (query) Exchange of the conid (e.g. ISLAND, NYSE, etc.). Default value is empty which corresponds to primary exchange of the conid. (optional)
     - parameter bar: (query) possible value-- 1min, 2min, 3min, 5min, 10min, 15min, 30min, 1h, 2h, 3h, 4h, 8h, 1d, 1w, 1m (optional)
     - parameter outsideRth: (query) For contracts that support it, will determine if historical data includes outside of regular trading hours. (optional)

     - returns: RequestBuilder<HistoryData> 
     */
    open class func iserverMarketdataHistoryGetWithRequestBuilder(conid: String, period: String, exchange: String? = nil, bar: String? = nil, outsideRth: Bool? = nil) -> RequestBuilder<HistoryData> {
        let path = "/iserver/marketdata/history"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "conid": conid, 
            "exchange": exchange, 
            "period": period, 
            "bar": bar, 
            "outsideRth": outsideRth
        ])

        let requestBuilder: RequestBuilder<HistoryData>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Market Data
     
     - parameter conids: (query) list of conids separated by comma 
     - parameter since: (query) time period since which updates are required. uses epoch time with milliseconds. (optional)
     - parameter fields: (query) list of fields separated by comma (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverMarketdataSnapshotGet(conids: String, since: Int? = nil, fields: String? = nil, completion: @escaping ((_ data: [InlineResponse20022]?,_ error: Error?) -> Void)) {
        iserverMarketdataSnapshotGetWithRequestBuilder(conids: conids, since: since, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Market Data
     - GET /iserver/marketdata/snapshot
     - Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct, close, listing exchange. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative contracts the endpoint /iserver/secdef/search must be called first. First /snapshot endpoint call for given conid will initiate the market data request.  To receive all available fields the /snapshot endpoint will need to be called several times. To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details. 
     - examples: [{contentType=application/json, example=[ {
  "88" : "88",
  "7286" : "7286",
  "7285" : "7285",
  "7288" : "7288",
  "7287" : "7287",
  "7289" : "7289",
  "6070" : "6070",
  "7280" : "7280",
  "6072" : "6072",
  "7282" : "7282",
  "7281" : "7281",
  "7284" : "7284",
  "6073" : "6073",
  "6509" : "6509",
  "55" : "55",
  "7296" : "7296",
  "58" : "58",
  "7059" : "7059",
  "6004" : "6004",
  "7291" : "7291",
  "7290" : "7290",
  "7051" : "7051",
  "7293" : "7293",
  "server_id" : "server_id",
  "7094" : "7094",
  "7292" : "7292",
  "7295" : "7295",
  "7294" : "7294",
  "6119" : "6119",
  "conid" : 0,
  "7220" : "7220",
  "7221" : "7221",
  "70" : "70",
  "71" : "71",
  "7219" : "7219",
  "72" : "72",
  "6008" : "6008",
  "73" : "73",
  "74" : "74",
  "31" : "31",
  "75" : "75",
  "76" : "76",
  "77" : "77",
  "78" : "78",
  "7310" : "7310",
  "7311" : "7311",
  "7633" : "7633",
  "_updated" : 6,
  "6457" : "6457",
  "82" : "82",
  "83" : "83",
  "84" : "84",
  "7309" : "7309",
  "85" : "85",
  "7308" : "7308",
  "86" : "86",
  "87" : "87"
}, {
  "88" : "88",
  "7286" : "7286",
  "7285" : "7285",
  "7288" : "7288",
  "7287" : "7287",
  "7289" : "7289",
  "6070" : "6070",
  "7280" : "7280",
  "6072" : "6072",
  "7282" : "7282",
  "7281" : "7281",
  "7284" : "7284",
  "6073" : "6073",
  "6509" : "6509",
  "55" : "55",
  "7296" : "7296",
  "58" : "58",
  "7059" : "7059",
  "6004" : "6004",
  "7291" : "7291",
  "7290" : "7290",
  "7051" : "7051",
  "7293" : "7293",
  "server_id" : "server_id",
  "7094" : "7094",
  "7292" : "7292",
  "7295" : "7295",
  "7294" : "7294",
  "6119" : "6119",
  "conid" : 0,
  "7220" : "7220",
  "7221" : "7221",
  "70" : "70",
  "71" : "71",
  "7219" : "7219",
  "72" : "72",
  "6008" : "6008",
  "73" : "73",
  "74" : "74",
  "31" : "31",
  "75" : "75",
  "76" : "76",
  "77" : "77",
  "78" : "78",
  "7310" : "7310",
  "7311" : "7311",
  "7633" : "7633",
  "_updated" : 6,
  "6457" : "6457",
  "82" : "82",
  "83" : "83",
  "84" : "84",
  "7309" : "7309",
  "85" : "85",
  "7308" : "7308",
  "86" : "86",
  "87" : "87"
} ]}]
     
     - parameter conids: (query) list of conids separated by comma 
     - parameter since: (query) time period since which updates are required. uses epoch time with milliseconds. (optional)
     - parameter fields: (query) list of fields separated by comma (optional)

     - returns: RequestBuilder<[InlineResponse20022]> 
     */
    open class func iserverMarketdataSnapshotGetWithRequestBuilder(conids: String, since: Int? = nil, fields: String? = nil) -> RequestBuilder<[InlineResponse20022]> {
        let path = "/iserver/marketdata/snapshot"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "conids": conids, 
            "since": since?.encodeToJSON(), 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<[InlineResponse20022]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Market Data Cancel (All)
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverMarketdataUnsubscribeallGet(completion: @escaping ((_ data: InlineResponse20024?,_ error: Error?) -> Void)) {
        iserverMarketdataUnsubscribeallGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Market Data Cancel (All)
     - GET /iserver/marketdata/unsubscribeall
     - Cancel all market data request(s). To cancel market data for given conid, see /iserver/marketdata/{conid}/unsubscribe.  
     - examples: [{contentType=application/json, example={
  "confirmed" : true
}}]

     - returns: RequestBuilder<InlineResponse20024> 
     */
    open class func iserverMarketdataUnsubscribeallGetWithRequestBuilder() -> RequestBuilder<InlineResponse20024> {
        let path = "/iserver/marketdata/unsubscribeall"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20024>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
