//
// PortfolioAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class PortfolioAPI {
    /**
     Account Allocation
     
     - parameter accountId: (path) account id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func portfolioAccountIdAllocationGet(accountId: String, completion: @escaping ((_ data: Allocation?,_ error: Error?) -> Void)) {
        portfolioAccountIdAllocationGetWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Account Allocation
     - GET /portfolio/{accountId}/allocation
     - Information about the account's portfolio allocation by Asset Class, Industry and Category.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
     - examples: [{contentType=application/json, example=""}]
     
     - parameter accountId: (path) account id 

     - returns: RequestBuilder<Allocation> 
     */
    open class func portfolioAccountIdAllocationGetWithRequestBuilder(accountId: String) -> RequestBuilder<Allocation> {
        var path = "/portfolio/{accountId}/allocation"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Allocation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Account Ledger
     
     - parameter accountId: (path) account id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func portfolioAccountIdLedgerGet(accountId: String, completion: @escaping ((_ data: InlineResponse2009?,_ error: Error?) -> Void)) {
        portfolioAccountIdLedgerGetWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Account Ledger
     - GET /portfolio/{accountId}/ledger
     - Information regarding settled cash, cash balances, etc. in the account's base currency and any other cash balances hold in other currencies.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https://www.interactivebrokers.com/en/index.php?f=3185.
     - examples: [{contentType=application/json, example={
  "BASE" : {
    "commoditymarketvalue" : 0.80082819046101150206595775671303272247314453125,
    "severity" : 1,
    "futuremarketvalue" : 6.02745618307040320615897144307382404804229736328125,
    "settledcash" : 1.46581298050294517310021547018550336360931396484375,
    "exchangerate" : 5.962133916683182377482808078639209270477294921875,
    "sessionid" : 5,
    "cashbalance" : 2.3021358869347654518833223846741020679473876953125,
    "corporatebondsmarketvalue" : 7.061401241503109105224211816675961017608642578125,
    "warrantsmarketvalue" : 9.301444243932575517419536481611430644989013671875,
    "netliquidationvalue" : 3.61607674925191080461672754609026014804840087890625,
    "interest" : 2.027123023002321833274663731572218239307403564453125,
    "unrealizedpnl" : 4.1456080298839363962315474054776132106781005859375,
    "stockmarketvalue" : 7.3862819483858839220147274318151175975799560546875,
    "moneyfunds" : 1.231513536777255612975068288506008684635162353515625,
    "currency" : "currency",
    "realizedpnl" : 1.024645700144157789424070870154537260532379150390625,
    "funds" : 1.489415909854170383397331534069962799549102783203125,
    "acctcode" : "acctcode",
    "issueroptionsmarketvalue" : 6.8468526983526398765889098285697400569915771484375,
    "key" : "key",
    "timestamp" : 7
  }
}}]
     
     - parameter accountId: (path) account id 

     - returns: RequestBuilder<InlineResponse2009> 
     */
    open class func portfolioAccountIdLedgerGetWithRequestBuilder(accountId: String) -> RequestBuilder<InlineResponse2009> {
        var path = "/portfolio/{accountId}/ledger"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2009>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Account Information
     
     - parameter accountId: (path) account id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func portfolioAccountIdMetaGet(accountId: String, completion: @escaping ((_ data: Accounts?,_ error: Error?) -> Void)) {
        portfolioAccountIdMetaGetWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Account Information
     - GET /portfolio/{accountId}/meta
     - Account information related to account Id /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
     - examples: [{contentType=application/json, example=""}]
     
     - parameter accountId: (path) account id 

     - returns: RequestBuilder<Accounts> 
     */
    open class func portfolioAccountIdMetaGetWithRequestBuilder(accountId: String) -> RequestBuilder<Accounts> {
        var path = "/portfolio/{accountId}/meta"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Accounts>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Position by Conid
     
     - parameter accountId: (path) account id 
     - parameter conid: (path) contract id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func portfolioAccountIdPositionConidGet(accountId: String, conid: Int, completion: @escaping ((_ data: Position?,_ error: Error?) -> Void)) {
        portfolioAccountIdPositionConidGetWithRequestBuilder(accountId: accountId, conid: conid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Position by Conid
     - GET /portfolio/{accountId}/position/{conid}
     - Returns a list of all positions matching the conid. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
     - examples: [{contentType=application/json, example=""}]
     
     - parameter accountId: (path) account id 
     - parameter conid: (path) contract id 

     - returns: RequestBuilder<Position> 
     */
    open class func portfolioAccountIdPositionConidGetWithRequestBuilder(accountId: String, conid: Int) -> RequestBuilder<Position> {
        var path = "/portfolio/{accountId}/position/{conid}"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let conidPreEscape = "\(conid)"
        let conidPostEscape = conidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conid}", with: conidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Position>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Invalidates the backend cache of the Portfolio
     
     - parameter accountId: (path) account id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func portfolioAccountIdPositionsInvalidatePost(accountId: String, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        portfolioAccountIdPositionsInvalidatePostWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Invalidates the backend cache of the Portfolio
     - POST /portfolio/{accountId}/positions/invalidate
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter accountId: (path) account id 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func portfolioAccountIdPositionsInvalidatePostWithRequestBuilder(accountId: String) -> RequestBuilder<JSONValue> {
        var path = "/portfolio/{accountId}/positions/invalidate"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Portfolio Positions
     
     - parameter accountId: (path) account id 
     - parameter pageId: (path) page id 
     - parameter model: (query) optional (optional)
     - parameter sort: (query) declare the table to be sorted by which column (optional)
     - parameter direction: (query) in which order, a means ascending - d means descending (optional)
     - parameter period: (query) period for pnl column, can be 1D, 7D, 1M... (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func portfolioAccountIdPositionsPageIdGet(accountId: String, pageId: String, model: String? = nil, sort: String? = nil, direction: String? = nil, period: String? = nil, completion: @escaping ((_ data: Position?,_ error: Error?) -> Void)) {
        portfolioAccountIdPositionsPageIdGetWithRequestBuilder(accountId: accountId, pageId: pageId, model: model, sort: sort, direction: direction, period: period).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Portfolio Positions
     - GET /portfolio/{accountId}/positions/{pageId}
     - Returns a list of positions for the given account. The endpoint supports paging, page's default size is 30 positions. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
     - examples: [{contentType=application/json, example=""}]
     
     - parameter accountId: (path) account id 
     - parameter pageId: (path) page id 
     - parameter model: (query) optional (optional)
     - parameter sort: (query) declare the table to be sorted by which column (optional)
     - parameter direction: (query) in which order, a means ascending - d means descending (optional)
     - parameter period: (query) period for pnl column, can be 1D, 7D, 1M... (optional)

     - returns: RequestBuilder<Position> 
     */
    open class func portfolioAccountIdPositionsPageIdGetWithRequestBuilder(accountId: String, pageId: String, model: String? = nil, sort: String? = nil, direction: String? = nil, period: String? = nil) -> RequestBuilder<Position> {
        var path = "/portfolio/{accountId}/positions/{pageId}"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let pageIdPreEscape = "\(pageId)"
        let pageIdPostEscape = pageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pageId}", with: pageIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model, 
            "sort": sort, 
            "direction": direction, 
            "period": period
        ])

        let requestBuilder: RequestBuilder<Position>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Account Summary
     
     - parameter accountId: (path) account id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func portfolioAccountIdSummaryGet(accountId: String, completion: @escaping ((_ data: InlineResponse2008?,_ error: Error?) -> Void)) {
        portfolioAccountIdSummaryGetWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Account Summary
     - GET /portfolio/{accountId}/summary
     - Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
     - examples: [{contentType=application/json, example={
  "lookaheadavailablefunds-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "segmenttitle-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "buyingpower" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "grosspositionvalue-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "grosspositionvalue-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullmaintmarginreq" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "guarantee-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "billable-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "previousdayequitywithloanvalue" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "tradingtype-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "billable-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadexcessliquidity-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadexcessliquidity-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "daytradesremainingt+1" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "guarantee-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accruedcash-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadmaintmarginreq-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "postexpirationmargin" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accruedcash-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "guarantee-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "totalcashvalue-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "totalcashvalue-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "segmenttitle-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "indianstockhaircut-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadmaintmarginreq-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "segmenttitle-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "nlvandmargininreview" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadmaintmarginreq-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accruedcash-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "highestseverity-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "daytradesremainingt+4" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "daytradesremainingt+2" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "daytradesremainingt+3" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadinitmarginreq" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "highestseverity-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accounttype" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "guarantee" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "highestseverity-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "postexpirationexcess-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "postexpirationmargin-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "cushion" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "totalcashvalue-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadmaintmarginreq" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "leverage-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "initmarginreq-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "postexpirationmargin-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "leverage-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "excessliquidity" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "postexpirationmargin-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accrueddividend-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "leverage-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadavailablefunds-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accrueddividend-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "equitywithloanvalue" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accrueddividend-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "postexpirationexcess-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "postexpirationexcess-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadavailablefunds-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "availablefunds-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullavailablefunds-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "excessliquidity-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "maintmarginreq" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accountready" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "equitywithloanvalue-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "excessliquidity-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "availablefunds-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullavailablefunds-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullexcessliquidity-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullexcessliquidity-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadavailablefunds" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullavailablefunds-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "initmarginreq-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "totalcashvalue" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullexcessliquidity" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "equitywithloanvalue-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "totaldebitcardpendingcharges" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "equitywithloanvalue-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullmaintmarginreq-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullexcessliquidity-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "netliquidationuncertainty" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "initmarginreq-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullinitmarginreq-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "pasharesvalue-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadexcessliquidity" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "pasharesvalue-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullavailablefunds" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "maintmarginreq-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "netliquidation" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullmaintmarginreq-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullmaintmarginreq-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "maintmarginreq-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullinitmarginreq" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullinitmarginreq-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "postexpirationexcess" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadinitmarginreq-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accrueddividend" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "pasharesvalue-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "grosspositionvalue" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "maintmarginreq-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "daytradesremaining" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullinitmarginreq-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "indianstockhaircut-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "initmarginreq" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "leverage" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "netliquidation-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "netliquidation-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "pasharesvalue" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "indianstockhaircut-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "availablefunds" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "totaldebitcardpendingcharges-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accruedcash" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadinitmarginreq-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadinitmarginreq-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "tradingtype-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "previousdayequitywithloanvalue-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "totaldebitcardpendingcharges-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "indianstockhaircut" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "totaldebitcardpendingcharges-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "billable-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "billable" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadexcessliquidity-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "availablefunds-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "excessliquidity-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "previousdayequitywithloanvalue-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "highestseverity" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "netliquidation-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "grosspositionvalue-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "previousdayequitywithloanvalue-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadnextchange" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  }
}}]
     
     - parameter accountId: (path) account id 

     - returns: RequestBuilder<InlineResponse2008> 
     */
    open class func portfolioAccountIdSummaryGetWithRequestBuilder(accountId: String) -> RequestBuilder<InlineResponse2008> {
        var path = "/portfolio/{accountId}/summary"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2008>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Portfolio Accounts
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func portfolioAccountsGet(completion: @escaping ((_ data: Accounts?,_ error: Error?) -> Void)) {
        portfolioAccountsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Portfolio Accounts
     - GET /portfolio/accounts
     - In non-tiered account structures, returns a list of accounts for which the user can view position and account information. This endpoint must be called prior  to calling other /portfolio endpoints for those accounts. For querying a list of accounts  which the user can trade, see /iserver/accounts. For a list of subaccounts in tiered  account structures (e.g. financial advisor or ibroker accounts) see /portfolio/subaccounts.
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<Accounts> 
     */
    open class func portfolioAccountsGetWithRequestBuilder() -> RequestBuilder<Accounts> {
        let path = "/portfolio/accounts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Accounts>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Account Alloction (All Accounts)
     
     - parameter body: (body) accounts info 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func portfolioAllocationPost(body: Body5, completion: @escaping ((_ data: Allocation?,_ error: Error?) -> Void)) {
        portfolioAllocationPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Account Alloction (All Accounts)
     - POST /portfolio/allocation
     - Similar to /portfolio/{accountId}/allocation but returns a consolidated view of of all the accounts returned by /portfolio/accounts. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
     - examples: [{contentType=application/json, example=""}]
     
     - parameter body: (body) accounts info 

     - returns: RequestBuilder<Allocation> 
     */
    open class func portfolioAllocationPostWithRequestBuilder(body: Body5) -> RequestBuilder<Allocation> {
        let path = "/portfolio/allocation"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Allocation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Positions by Conid
     
     - parameter conid: (path) contract id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func portfolioPositionsConidGet(conid: Int, completion: @escaping ((_ data: InlineResponse20010?,_ error: Error?) -> Void)) {
        portfolioPositionsConidGetWithRequestBuilder(conid: conid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Positions by Conid
     - GET /portfolio/positions/{conid}
     - Returns an object of all positions matching the conid for all the selected accounts. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
     - examples: [{contentType=application/json, example={
  "ACCTID" : ""
}}]
     
     - parameter conid: (path) contract id 

     - returns: RequestBuilder<InlineResponse20010> 
     */
    open class func portfolioPositionsConidGetWithRequestBuilder(conid: Int) -> RequestBuilder<InlineResponse20010> {
        var path = "/portfolio/positions/{conid}"
        let conidPreEscape = "\(conid)"
        let conidPostEscape = conidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conid}", with: conidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20010>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List of Sub-Accounts
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func portfolioSubaccountsGet(completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        portfolioSubaccountsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List of Sub-Accounts
     - GET /portfolio/subaccounts
     - Used in tiered account structures (such as financial advisor and ibroker accounts)  to return a list of sub-accounts for which the user can view position and  account-related information. This endpoint must be called prior to calling other  /portfolio endpoints for those subaccounts.  To query a list of accounts the user can trade, see /iserver/accounts.
     - examples: [{contentType=application/json, example={
  "accountAlias" : "accountAlias",
  "faclient" : true,
  "parent" : "parent",
  "accountTitle" : "accountTitle",
  "displayName" : "displayName",
  "accountVan" : "accountVan",
  "type" : "type",
  "master" : {
    "title" : "title",
    "officialTitle" : "officialTitle"
  },
  "accountStatus" : 0.80082819046101150206595775671303272247314453125,
  "accountId" : "accountId",
  "tradingType" : "tradingType",
  "covestor" : true,
  "currency" : "currency",
  "id" : "id",
  "desc" : "desc"
}}]

     - returns: RequestBuilder<Account> 
     */
    open class func portfolioSubaccountsGetWithRequestBuilder() -> RequestBuilder<Account> {
        let path = "/portfolio/subaccounts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Account>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
