//
// OrderAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class OrderAPI {
    /**
     Cancel Order
     
     - parameter accountId: (path) account id, or fa group if deleting a group order 
     - parameter orderId: (path) Customer order id, use /iservers/account/orders endpoint to query orderId. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverAccountAccountIdOrderOrderIdDelete(accountId: String, orderId: String, completion: @escaping ((_ data: InlineResponse20021?,_ error: Error?) -> Void)) {
        iserverAccountAccountIdOrderOrderIdDeleteWithRequestBuilder(accountId: accountId, orderId: orderId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Cancel Order
     - DELETE /iserver/account/{accountId}/order/{orderId}
     - Cancels an open order. Must call /iserver/accounts endpoint prior to cancelling an order. Use /iservers/account/orders endpoint to review open-order(s) and get latest order status.
     - examples: [{contentType=application/json, example={
  "msg" : "msg",
  "conid" : 0,
  "order_id" : "order_id",
  "account" : "account"
}}]
     
     - parameter accountId: (path) account id, or fa group if deleting a group order 
     - parameter orderId: (path) Customer order id, use /iservers/account/orders endpoint to query orderId. 

     - returns: RequestBuilder<InlineResponse20021> 
     */
    open class func iserverAccountAccountIdOrderOrderIdDeleteWithRequestBuilder(accountId: String, orderId: String) -> RequestBuilder<InlineResponse20021> {
        var path = "/iserver/account/{accountId}/order/{orderId}"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let orderIdPreEscape = "\(orderId)"
        let orderIdPostEscape = orderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{orderId}", with: orderIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20021>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Modify Order
     
     - parameter accountId: (path) account id, or fa group if modifying a group order 
     - parameter orderId: (path) Customer order id, use /iservers/account/orders endpoint to query orderId. 
     - parameter body: (body) modify-order request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverAccountAccountIdOrderOrderIdPost(accountId: String, orderId: String, body: ModifyOrder, completion: @escaping ((_ data: [InlineResponse20020]?,_ error: Error?) -> Void)) {
        iserverAccountAccountIdOrderOrderIdPostWithRequestBuilder(accountId: accountId, orderId: orderId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Modify Order
     - POST /iserver/account/{accountId}/order/{orderId}
     - Modifies an open order. Must call /iserver/accounts endpoint prior to modifying an order. Use /iservers/account/orders endpoint to review open-order(s).
     - examples: [{contentType=application/json, example=[ {
  "order_status" : "order_status",
  "order_id" : "order_id",
  "local_order_id" : "local_order_id"
}, {
  "order_status" : "order_status",
  "order_id" : "order_id",
  "local_order_id" : "local_order_id"
} ]}]
     
     - parameter accountId: (path) account id, or fa group if modifying a group order 
     - parameter orderId: (path) Customer order id, use /iservers/account/orders endpoint to query orderId. 
     - parameter body: (body) modify-order request 

     - returns: RequestBuilder<[InlineResponse20020]> 
     */
    open class func iserverAccountAccountIdOrderOrderIdPostWithRequestBuilder(accountId: String, orderId: String, body: ModifyOrder) -> RequestBuilder<[InlineResponse20020]> {
        var path = "/iserver/account/{accountId}/order/{orderId}"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let orderIdPreEscape = "\(orderId)"
        let orderIdPostEscape = orderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{orderId}", with: orderIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20020]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Place Order
     
     - parameter accountId: (path) account id 
     - parameter body: (body) order request info 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverAccountAccountIdOrderPost(accountId: String, body: OrderRequest, completion: @escaping ((_ data: [InlineResponse20017]?,_ error: Error?) -> Void)) {
        iserverAccountAccountIdOrderPostWithRequestBuilder(accountId: accountId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Place Order
     - POST /iserver/account/{accountId}/order
     - Please note here, sometimes this endpoint alone can't make sure you submit the order successfully, you could receive some questions in the response, you have to to answer them in order to submit the order successfully. You can use \"/iserver/reply/{replyid}\" endpoint to answer questions 
     - examples: [{contentType=application/json, example=[ {
  "id" : "id",
  "message" : [ "message", "message" ]
}, {
  "id" : "id",
  "message" : [ "message", "message" ]
} ]}]
     
     - parameter accountId: (path) account id 
     - parameter body: (body) order request info 

     - returns: RequestBuilder<[InlineResponse20017]> 
     */
    open class func iserverAccountAccountIdOrderPostWithRequestBuilder(accountId: String, body: OrderRequest) -> RequestBuilder<[InlineResponse20017]> {
        var path = "/iserver/account/{accountId}/order"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20017]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Preview Order
     
     - parameter accountId: (path) account id 
     - parameter body: (body) order info 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverAccountAccountIdOrderWhatifPost(accountId: String, body: OrderRequest, completion: @escaping ((_ data: InlineResponse20019?,_ error: Error?) -> Void)) {
        iserverAccountAccountIdOrderWhatifPostWithRequestBuilder(accountId: accountId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Preview Order
     - POST /iserver/account/{accountId}/order/whatif
     - This endpoint allows you to preview order without actually submitting the order and you can get commission information in the response. 
     - examples: [{contentType=application/json, example={
  "warn" : "warn",
  "amount" : {
    "amount" : "amount",
    "total" : "total",
    "commission" : "commission"
  },
  "initial" : {
    "current" : "current",
    "change" : "change",
    "after" : "after"
  },
  "error" : "error",
  "equity" : {
    "current" : "current",
    "change" : "change",
    "after" : "after"
  },
  "maintenance" : {
    "current" : "current",
    "change" : "change",
    "after" : "after"
  }
}}]
     
     - parameter accountId: (path) account id 
     - parameter body: (body) order info 

     - returns: RequestBuilder<InlineResponse20019> 
     */
    open class func iserverAccountAccountIdOrderWhatifPostWithRequestBuilder(accountId: String, body: OrderRequest) -> RequestBuilder<InlineResponse20019> {
        var path = "/iserver/account/{accountId}/order/whatif"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20019>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Place Orders (Support bracket orders)
     
     - parameter accountId: (path) account id 
     - parameter body: (body) order request info 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverAccountAccountIdOrdersPost(accountId: String, body: Body8, completion: @escaping ((_ data: [InlineResponse20017]?,_ error: Error?) -> Void)) {
        iserverAccountAccountIdOrdersPostWithRequestBuilder(accountId: accountId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Place Orders (Support bracket orders)
     - POST /iserver/account/{accountId}/orders
     - You can pass a list of orders here 
     - examples: [{contentType=application/json, example=[ {
  "id" : "id",
  "message" : [ "message", "message" ]
}, {
  "id" : "id",
  "message" : [ "message", "message" ]
} ]}]
     
     - parameter accountId: (path) account id 
     - parameter body: (body) order request info 

     - returns: RequestBuilder<[InlineResponse20017]> 
     */
    open class func iserverAccountAccountIdOrdersPostWithRequestBuilder(accountId: String, body: Body8) -> RequestBuilder<[InlineResponse20017]> {
        var path = "/iserver/account/{accountId}/orders"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20017]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Place Orders for Financial Advisor Groups
     
     - parameter faGroup: (path) financial advisor group 
     - parameter body: (body) order request info 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverAccountOrdersFaGroupPost(faGroup: String, body: OrderRequest, completion: @escaping ((_ data: [InlineResponse20017]?,_ error: Error?) -> Void)) {
        iserverAccountOrdersFaGroupPostWithRequestBuilder(faGroup: faGroup, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Place Orders for Financial Advisor Groups
     - POST /iserver/account/orders/{faGroup}
     - Financial Advisors can use this endpoint to place an order for a specified group. To place an order for a specified account use the endpoint /iserver/account/{accountId}/order. More information about groups can be found in the [TWS Users' Guide:](https://guides.interactivebrokers.com/twsguide/twsguide.htm#usersguidebook/financialadvisors/create_an_account_group_for_share_allocation.htm). 
     - examples: [{contentType=application/json, example=[ {
  "id" : "id",
  "message" : [ "message", "message" ]
}, {
  "id" : "id",
  "message" : [ "message", "message" ]
} ]}]
     
     - parameter faGroup: (path) financial advisor group 
     - parameter body: (body) order request info 

     - returns: RequestBuilder<[InlineResponse20017]> 
     */
    open class func iserverAccountOrdersFaGroupPostWithRequestBuilder(faGroup: String, body: OrderRequest) -> RequestBuilder<[InlineResponse20017]> {
        var path = "/iserver/account/orders/{faGroup}"
        let faGroupPreEscape = "\(faGroup)"
        let faGroupPostEscape = faGroupPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{faGroup}", with: faGroupPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20017]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Live Orders
     
     - parameter body: (body) an array of filters (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverAccountOrdersGet(body: Body7? = nil, completion: @escaping ((_ data: InlineResponse20016?,_ error: Error?) -> Void)) {
        iserverAccountOrdersGetWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Live Orders
     - GET /iserver/account/orders
     - The endpoint is meant to be used in polling mode, e.g. requesting every x seconds. The response will contain two objects, one is notification, the other is orders.  Orders is the list of live orders (cancelled, filled, submitted).  Notifications contains information about execute orders as they happen, see status field. To receive streaming live orders the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details. 
     - examples: [{contentType=application/json, example={
  "orders" : [ {
    "remainingQuantity" : 1.46581298050294517310021547018550336360931396484375,
    "orderType" : "orderType",
    "fgColor" : "fgColor",
    "orderId" : "orderId",
    "companyName" : "companyName",
    "origOrderType" : "origOrderType",
    "secType" : "secType",
    "lastExecutionTime_r" : 7.061401241503109105224211816675961017608642578125,
    "order_ref" : "order_ref",
    "filledQuantity" : 5.962133916683182377482808078639209270477294921875,
    "description1" : "description1",
    "bgColor" : "bgColor",
    "price" : 9.301444243932575517419536481611430644989013671875,
    "supportsTaxOpt" : 5.63737665663332876420099637471139430999755859375,
    "lastExecutionTime" : 2.3021358869347654518833223846741020679473876953125,
    "timeInForce" : "timeInForce",
    "orderDesc" : "orderDesc",
    "ticker" : "ticker",
    "side" : "side",
    "cashCcy" : "cashCcy",
    "exchange" : "exchange",
    "conid" : 0.80082819046101150206595775671303272247314453125,
    "listingExchange" : "listingExchange",
    "acct" : "acct",
    "sizeAndFills" : 6.02745618307040320615897144307382404804229736328125,
    "status" : "status"
  }, {
    "remainingQuantity" : 1.46581298050294517310021547018550336360931396484375,
    "orderType" : "orderType",
    "fgColor" : "fgColor",
    "orderId" : "orderId",
    "companyName" : "companyName",
    "origOrderType" : "origOrderType",
    "secType" : "secType",
    "lastExecutionTime_r" : 7.061401241503109105224211816675961017608642578125,
    "order_ref" : "order_ref",
    "filledQuantity" : 5.962133916683182377482808078639209270477294921875,
    "description1" : "description1",
    "bgColor" : "bgColor",
    "price" : 9.301444243932575517419536481611430644989013671875,
    "supportsTaxOpt" : 5.63737665663332876420099637471139430999755859375,
    "lastExecutionTime" : 2.3021358869347654518833223846741020679473876953125,
    "timeInForce" : "timeInForce",
    "orderDesc" : "orderDesc",
    "ticker" : "ticker",
    "side" : "side",
    "cashCcy" : "cashCcy",
    "exchange" : "exchange",
    "conid" : 0.80082819046101150206595775671303272247314453125,
    "listingExchange" : "listingExchange",
    "acct" : "acct",
    "sizeAndFills" : 6.02745618307040320615897144307382404804229736328125,
    "status" : "status"
  } ],
  "snapshot" : true
}}]
     
     - parameter body: (body) an array of filters (optional)

     - returns: RequestBuilder<InlineResponse20016> 
     */
    open class func iserverAccountOrdersGetWithRequestBuilder(body: Body7? = nil) -> RequestBuilder<InlineResponse20016> {
        let path = "/iserver/account/orders"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20016>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Place Order Reply
     
     - parameter replyid: (path) Please use the \&quot;id\&quot; from the response of \&quot;Place Order\&quot; endpoint 
     - parameter body: (body) Answer to question 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverReplyReplyidPost(replyid: String, body: Body9, completion: @escaping ((_ data: [InlineResponse20018]?,_ error: Error?) -> Void)) {
        iserverReplyReplyidPostWithRequestBuilder(replyid: replyid, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Place Order Reply
     - POST /iserver/reply/{replyid}
     - Reply to questions when placing orders and submit orders
     - examples: [{contentType=application/json, example=[ {
  "order_status" : "order_status",
  "order_id" : "order_id",
  "local_order_id" : "local_order_id"
}, {
  "order_status" : "order_status",
  "order_id" : "order_id",
  "local_order_id" : "local_order_id"
} ]}]
     
     - parameter replyid: (path) Please use the \&quot;id\&quot; from the response of \&quot;Place Order\&quot; endpoint 
     - parameter body: (body) Answer to question 

     - returns: RequestBuilder<[InlineResponse20018]> 
     */
    open class func iserverReplyReplyidPostWithRequestBuilder(replyid: String, body: Body9) -> RequestBuilder<[InlineResponse20018]> {
        var path = "/iserver/reply/{replyid}"
        let replyidPreEscape = "\(replyid)"
        let replyidPostEscape = replyidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{replyid}", with: replyidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20018]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
