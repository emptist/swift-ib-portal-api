//
// ContractAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ContractAPI {
    /**
     Contract Details
     
     - parameter conid: (path) contract id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverContractConidInfoGet(conid: String, completion: @escaping ((_ data: Contract?,_ error: Error?) -> Void)) {
        iserverContractConidInfoGetWithRequestBuilder(conid: conid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Contract Details
     - GET /iserver/contract/{conid}/info
     - Using the Contract Identifier get contract info. You can use this to prefill your order before you submit an order
     - examples: [{contentType=application/json, example={
  "r_t_h" : true,
  "local_symbol" : "local_symbol",
  "con_id" : "con_id",
  "company_name" : "company_name",
  "companyName" : "companyName",
  "exchange" : "exchange",
  "currency" : "currency",
  "industry" : "industry",
  "rules" : {
    "preview" : true,
    "limitPrice" : 1.46581298050294517310021547018550336360931396484375,
    "tifTypes" : [ "tifTypes", "tifTypes" ],
    "orderTypes" : [ "orderTypes", "orderTypes" ],
    "defaultSize" : 0.80082819046101150206595775671303272247314453125,
    "sizeIncrement" : 6.02745618307040320615897144307382404804229736328125,
    "orderTypesOutside" : [ "orderTypesOutside", "orderTypesOutside" ],
    "increment" : "increment",
    "displaySize" : "displaySize",
    "stopprice" : 5.962133916683182377482808078639209270477294921875
  },
  "instrument_type" : "instrument_type",
  "category" : "category"
}}]
     
     - parameter conid: (path) contract id 

     - returns: RequestBuilder<Contract> 
     */
    open class func iserverContractConidInfoGetWithRequestBuilder(conid: String) -> RequestBuilder<Contract> {
        var path = "/iserver/contract/{conid}/info"
        let conidPreEscape = "\(conid)"
        let conidPostEscape = conidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conid}", with: conidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Contract>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get available conids of future/option/warrant/cash/CFD
     
     - parameter conid: (query) underlying contract id 
     - parameter sectype: (query) FUT/OPT/WAR/CASH/CFD 
     - parameter month: (query) contract month, only required for FUT/OPT/WAR in the format MMMYY, example JAN00 (optional)
     - parameter exchange: (query) optional, default is SMART (optional)
     - parameter strike: (query) optional, only required for OPT/WAR (optional)
     - parameter _right: (query) C for call, P for put (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverSecdefInfoGet(conid: String, sectype: String, month: String? = nil, exchange: String? = nil, strike: String? = nil, _right: String? = nil, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        iserverSecdefInfoGetWithRequestBuilder(conid: conid, sectype: sectype, month: month, exchange: exchange, strike: strike, _right: _right).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get available conids of future/option/warrant/cash/CFD
     - GET /iserver/secdef/info
     - For option and warrant, you can get strike price from \"/iserver/secdef/strikes\" endpoint. Must call /secdef/search for the underlying contract first.
     - examples: [{contentType=application/json, example=""}]
     
     - parameter conid: (query) underlying contract id 
     - parameter sectype: (query) FUT/OPT/WAR/CASH/CFD 
     - parameter month: (query) contract month, only required for FUT/OPT/WAR in the format MMMYY, example JAN00 (optional)
     - parameter exchange: (query) optional, default is SMART (optional)
     - parameter strike: (query) optional, only required for OPT/WAR (optional)
     - parameter _right: (query) C for call, P for put (optional)

     - returns: RequestBuilder<JSONValue> 
     */
    open class func iserverSecdefInfoGetWithRequestBuilder(conid: String, sectype: String, month: String? = nil, exchange: String? = nil, strike: String? = nil, _right: String? = nil) -> RequestBuilder<JSONValue> {
        let path = "/iserver/secdef/info"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "conid": conid, 
            "sectype": sectype, 
            "month": month, 
            "exchange": exchange, 
            "strike": strike, 
            "right": _right
        ])

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search by symbol or name
     
     - parameter symbol: (body) Symbol or Company Name to be searched 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverSecdefSearchPost(symbol: Symbol, completion: @escaping ((_ data: [InlineResponse20025]?,_ error: Error?) -> Void)) {
        iserverSecdefSearchPostWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search by symbol or name
     - POST /iserver/secdef/search
     - Specify an underlying to search what derivative contract(s) it has. This endpoint must be called before using /secdef/info
     - examples: [{contentType=application/json, example=[ {
  "symbol" : "symbol",
  "opt" : "opt",
  "companyHeader" : "companyHeader",
  "restricted" : "restricted",
  "fop" : "fop",
  "companyName" : "companyName",
  "description" : "description",
  "war" : "war",
  "conid" : 0,
  "sections" : [ {
    "symbol" : "symbol",
    "months" : "months",
    "legSecType" : "legSecType",
    "secType" : "secType",
    "exchange" : "exchange"
  }, {
    "symbol" : "symbol",
    "months" : "months",
    "legSecType" : "legSecType",
    "secType" : "secType",
    "exchange" : "exchange"
  } ]
}, {
  "symbol" : "symbol",
  "opt" : "opt",
  "companyHeader" : "companyHeader",
  "restricted" : "restricted",
  "fop" : "fop",
  "companyName" : "companyName",
  "description" : "description",
  "war" : "war",
  "conid" : 0,
  "sections" : [ {
    "symbol" : "symbol",
    "months" : "months",
    "legSecType" : "legSecType",
    "secType" : "secType",
    "exchange" : "exchange"
  }, {
    "symbol" : "symbol",
    "months" : "months",
    "legSecType" : "legSecType",
    "secType" : "secType",
    "exchange" : "exchange"
  } ]
} ]}]
     
     - parameter symbol: (body) Symbol or Company Name to be searched 

     - returns: RequestBuilder<[InlineResponse20025]> 
     */
    open class func iserverSecdefSearchPostWithRequestBuilder(symbol: Symbol) -> RequestBuilder<[InlineResponse20025]> {
        let path = "/iserver/secdef/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: symbol)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20025]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get strikes for Options/Warrant
     
     - parameter conid: (query) contract id 
     - parameter sectype: (query) OPT/WAR 
     - parameter month: (query) contract month 
     - parameter exchange: (query) optional, default is SMART (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverSecdefStrikesGet(conid: String, sectype: String, month: String, exchange: String? = nil, completion: @escaping ((_ data: InlineResponse20026?,_ error: Error?) -> Void)) {
        iserverSecdefStrikesGetWithRequestBuilder(conid: conid, sectype: sectype, month: month, exchange: exchange).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get strikes for Options/Warrant
     - GET /iserver/secdef/strikes
     - You can get available contract months and exchanges from \"/iserver/secdef/search\"
     - examples: [{contentType=application/json, example={
  "call" : [ "", "" ],
  "put" : [ "", "" ]
}}]
     
     - parameter conid: (query) contract id 
     - parameter sectype: (query) OPT/WAR 
     - parameter month: (query) contract month 
     - parameter exchange: (query) optional, default is SMART (optional)

     - returns: RequestBuilder<InlineResponse20026> 
     */
    open class func iserverSecdefStrikesGetWithRequestBuilder(conid: String, sectype: String, month: String, exchange: String? = nil) -> RequestBuilder<InlineResponse20026> {
        let path = "/iserver/secdef/strikes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "conid": conid, 
            "sectype": sectype, 
            "month": month, 
            "exchange": exchange
        ])

        let requestBuilder: RequestBuilder<InlineResponse20026>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Security Futures by Symbol
     
     - parameter symbols: (query) list of case-sensitive symbols separated by comma 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func trsrvFuturesGet(symbols: String, completion: @escaping ((_ data: InlineResponse20031?,_ error: Error?) -> Void)) {
        trsrvFuturesGetWithRequestBuilder(symbols: symbols).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Security Futures by Symbol
     - GET /trsrv/futures
     - Returns a list of non-expired future contracts for given symbol(s)
     - examples: [{contentType=application/json, example={
  "symbol" : ""
}}]
     
     - parameter symbols: (query) list of case-sensitive symbols separated by comma 

     - returns: RequestBuilder<InlineResponse20031> 
     */
    open class func trsrvFuturesGetWithRequestBuilder(symbols: String) -> RequestBuilder<InlineResponse20031> {
        let path = "/trsrv/futures"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "symbols": symbols
        ])

        let requestBuilder: RequestBuilder<InlineResponse20031>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Secdef by Conid
     
     - parameter body: (body) request body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func trsrvSecdefPost(body: Body10, completion: @escaping ((_ data: Secdef?,_ error: Error?) -> Void)) {
        trsrvSecdefPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Secdef by Conid
     - POST /trsrv/secdef
     - Returns a list of security definitions for the given conids
     - examples: [{contentType=application/json, example=""}]
     
     - parameter body: (body) request body 

     - returns: RequestBuilder<Secdef> 
     */
    open class func trsrvSecdefPostWithRequestBuilder(body: Body10) -> RequestBuilder<Secdef> {
        let path = "/trsrv/secdef"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Secdef>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get trading schedule for symbol
     
     - parameter assetClass: (query) specify the asset class of the contract. Available values-- Stock: STK, Option: OPT, Future: FUT, Contract For Difference: CFD, Warrant: WAR, Forex: SWP, Mutual Fund: FND, Bond: BND, Inter-Commodity Spreads: ICS  
     - parameter symbol: (query) Underlying Symbol for specified contract, for example &#39;AAPL&#39; for US Stock - Apple Inc. 
     - parameter exchange: (query) Native exchange for contract, for example &#39;NASDAQ&#39; for US Stock - Apple Inc. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func trsrvSecdefScheduleGet(assetClass: String, symbol: String, exchange: String? = nil, completion: @escaping ((_ data: InlineResponse20030?,_ error: Error?) -> Void)) {
        trsrvSecdefScheduleGetWithRequestBuilder(assetClass: assetClass, symbol: symbol, exchange: exchange).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get trading schedule for symbol
     - GET /trsrv/secdef/schedule
     - Returns the trading schedule up to a month for the requested contract
     - examples: [{contentType=application/json, example={
  "tradeVenueId" : "tradeVenueId",
  "schedules" : [ {
    "sessions" : {
      "closingTime" : 5,
      "openingTime" : 1,
      "prop" : "prop"
    },
    "tradingTimes" : {
      "closingTime" : 2,
      "openingTime" : 5,
      "cancelDayOrders" : "cancelDayOrders"
    },
    "tradingScheduleDate" : 6,
    "clearingCycleEndTime" : 0
  }, {
    "sessions" : {
      "closingTime" : 5,
      "openingTime" : 1,
      "prop" : "prop"
    },
    "tradingTimes" : {
      "closingTime" : 2,
      "openingTime" : 5,
      "cancelDayOrders" : "cancelDayOrders"
    },
    "tradingScheduleDate" : 6,
    "clearingCycleEndTime" : 0
  } ],
  "id" : "id"
}}]
     
     - parameter assetClass: (query) specify the asset class of the contract. Available values-- Stock: STK, Option: OPT, Future: FUT, Contract For Difference: CFD, Warrant: WAR, Forex: SWP, Mutual Fund: FND, Bond: BND, Inter-Commodity Spreads: ICS  
     - parameter symbol: (query) Underlying Symbol for specified contract, for example &#39;AAPL&#39; for US Stock - Apple Inc. 
     - parameter exchange: (query) Native exchange for contract, for example &#39;NASDAQ&#39; for US Stock - Apple Inc. (optional)

     - returns: RequestBuilder<InlineResponse20030> 
     */
    open class func trsrvSecdefScheduleGetWithRequestBuilder(assetClass: String, symbol: String, exchange: String? = nil) -> RequestBuilder<InlineResponse20030> {
        let path = "/trsrv/secdef/schedule"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "assetClass": assetClass, 
            "symbol": symbol, 
            "exchange": exchange
        ])

        let requestBuilder: RequestBuilder<InlineResponse20030>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Security Stocks by Symbol
     
     - parameter symbols: (query) list of upper-sensitive symbols separated by comma 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func trsrvStocksGet(symbols: String, completion: @escaping ((_ data: InlineResponse20032?,_ error: Error?) -> Void)) {
        trsrvStocksGetWithRequestBuilder(symbols: symbols).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Security Stocks by Symbol
     - GET /trsrv/stocks
     - Returns an object contains all stock contracts for given symbol(s)
     - examples: [{contentType=application/json, example={
  "symbol" : ""
}}]
     
     - parameter symbols: (query) list of upper-sensitive symbols separated by comma 

     - returns: RequestBuilder<InlineResponse20032> 
     */
    open class func trsrvStocksGetWithRequestBuilder(symbols: String) -> RequestBuilder<InlineResponse20032> {
        let path = "/trsrv/stocks"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "symbols": symbols
        ])

        let requestBuilder: RequestBuilder<InlineResponse20032>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
