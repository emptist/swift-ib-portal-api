//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API.MarketData {

    /**
    Market Data History

    Get historical market Data for given conid, length of data is controlled by 'period' and 'bar'.
Formatted as: min=minute, h=hour, d=day, w=week, m=month, y=year
e.g. period =1y with bar =1w returns 52 data points (Max of 1000 data points supported).
**Note**: There's a limit of 5 concurrent requests. Excessive requests will return a 'Too many requests' status 429 response.
    */
    public enum GetIserverMarketdataHistory {

        public static let service = APIService<Response>(id: "getIserverMarketdataHistory", tag: "Market Data", method: "GET", path: "/iserver/marketdata/history", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** contract id */
                public var conid: String

                /** Exchange of the conid (e.g. ISLAND, NYSE, etc.). Default value is empty which corresponds to primary exchange of the conid. */
                public var exchange: String?

                /** available time period-- {1-30}min, {1-8}h, {1-1000}d, {1-792}w, {1-182}m, {1-15}y */
                public var period: String

                /** possible value-- 1min, 2min, 3min, 5min, 10min, 15min, 30min, 1h, 2h, 3h, 4h, 8h, 1d, 1w, 1m */
                public var bar: String?

                /** For contracts that support it, will determine if historical data includes outside of regular trading hours. */
                public var outsideRth: Bool?

                public init(conid: String, exchange: String? = nil, period: String, bar: String? = nil, outsideRth: Bool? = nil) {
                    self.conid = conid
                    self.exchange = exchange
                    self.period = period
                    self.bar = bar
                    self.outsideRth = outsideRth
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetIserverMarketdataHistory.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(conid: String, exchange: String? = nil, period: String, bar: String? = nil, outsideRth: Bool? = nil) {
                let options = Options(conid: conid, exchange: exchange, period: period, bar: bar, outsideRth: outsideRth)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                params["conid"] = options.conid
                if let exchange = options.exchange {
                  params["exchange"] = exchange
                }
                params["period"] = options.period
                if let bar = options.bar {
                  params["bar"] = bar
                }
                if let outsideRth = options.outsideRth {
                  params["outsideRth"] = outsideRth
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Get historical market Data for given conid, length of data is controlled by 'period' and 'bar'.
            Formatted as: min=minute, h=hour, d=day, w=week, m=month, y=year
            e.g. period =1y with bar =1w returns 52 data points (Max of 1000 data points supported).
            **Note**: There's a limit of 5 concurrent requests. Excessive requests will return a 'Too many requests' status 429 response.
             */
            public class Status429: APIModel {

                public var error: String?

                public init(error: String? = nil) {
                    self.error = error
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    error = try container.decodeIfPresent("error")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(error, forKey: "error")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status429 else { return false }
                  guard self.error == object.error else { return false }
                  return true
                }

                public static func == (lhs: Status429, rhs: Status429) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = HistoryData

            /** Returns an object */
            case status200(HistoryData)

            /** Too many requests */
            case status429(Status429)

            /** System Error */
            case status500(SystemError)

            public var success: HistoryData? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status429(let response): return response
                case .status500(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status429: return 429
                case .status500: return 500
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status429: return false
                case .status500: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(HistoryData.self, from: data))
                case 429: self = try .status429(decoder.decode(Status429.self, from: data))
                case 500: self = try .status500(decoder.decode(SystemError.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
