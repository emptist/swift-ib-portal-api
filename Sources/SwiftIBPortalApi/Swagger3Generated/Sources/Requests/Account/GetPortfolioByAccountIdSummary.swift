//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API.Account {

    /**
    Account Summary

    Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
    */
    public enum GetPortfolioByAccountIdSummary {

        public static let service = APIService<Response>(id: "getPortfolioByAccountIdSummary", tag: "Account", method: "GET", path: "/portfolio/{accountId}/summary", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** account id */
                public var accountId: String

                public init(accountId: String) {
                    self.accountId = accountId
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetPortfolioByAccountIdSummary.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(accountId: String) {
                let options = Options(accountId: accountId)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "accountId" + "}", with: "\(self.options.accountId)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. */
            public class Status200: APIModel {

                public var accountready: Summary?

                public var accounttype: Summary?

                public var accruedcash: Summary?

                public var accruedcashc: Summary?

                public var accruedcashf: Summary?

                public var accruedcashs: Summary?

                public var accrueddividend: Summary?

                public var accrueddividendc: Summary?

                public var accrueddividendf: Summary?

                public var accrueddividends: Summary?

                public var availablefunds: Summary?

                public var availablefundsc: Summary?

                public var availablefundsf: Summary?

                public var availablefundss: Summary?

                public var billable: Summary?

                public var billablec: Summary?

                public var billablef: Summary?

                public var billables: Summary?

                public var buyingpower: Summary?

                public var cushion: Summary?

                public var daytradesremaining: Summary?

                public var daytradesremainingt1: Summary?

                public var daytradesremainingt2: Summary?

                public var daytradesremainingt3: Summary?

                public var daytradesremainingt4: Summary?

                public var equitywithloanvalue: Summary?

                public var equitywithloanvaluec: Summary?

                public var equitywithloanvaluef: Summary?

                public var equitywithloanvalues: Summary?

                public var excessliquidity: Summary?

                public var excessliquidityc: Summary?

                public var excessliquidityf: Summary?

                public var excessliquiditys: Summary?

                public var fullavailablefunds: Summary?

                public var fullavailablefundsc: Summary?

                public var fullavailablefundsf: Summary?

                public var fullavailablefundss: Summary?

                public var fullexcessliquidity: Summary?

                public var fullexcessliquidityc: Summary?

                public var fullexcessliquidityf: Summary?

                public var fullexcessliquiditys: Summary?

                public var fullinitmarginreq: Summary?

                public var fullinitmarginreqc: Summary?

                public var fullinitmarginreqf: Summary?

                public var fullinitmarginreqs: Summary?

                public var fullmaintmarginreq: Summary?

                public var fullmaintmarginreqc: Summary?

                public var fullmaintmarginreqf: Summary?

                public var fullmaintmarginreqs: Summary?

                public var grosspositionvalue: Summary?

                public var grosspositionvaluec: Summary?

                public var grosspositionvaluef: Summary?

                public var grosspositionvalues: Summary?

                public var guarantee: Summary?

                public var guaranteec: Summary?

                public var guaranteef: Summary?

                public var guarantees: Summary?

                public var highestseverity: Summary?

                public var highestseverityc: Summary?

                public var highestseverityf: Summary?

                public var highestseveritys: Summary?

                public var indianstockhaircut: Summary?

                public var indianstockhaircutc: Summary?

                public var indianstockhaircutf: Summary?

                public var indianstockhaircuts: Summary?

                public var initmarginreq: Summary?

                public var initmarginreqc: Summary?

                public var initmarginreqf: Summary?

                public var initmarginreqs: Summary?

                public var leverage: Summary?

                public var leveragec: Summary?

                public var leveragef: Summary?

                public var leverages: Summary?

                public var lookaheadavailablefunds: Summary?

                public var lookaheadavailablefundsc: Summary?

                public var lookaheadavailablefundsf: Summary?

                public var lookaheadavailablefundss: Summary?

                public var lookaheadexcessliquidity: Summary?

                public var lookaheadexcessliquidityc: Summary?

                public var lookaheadexcessliquidityf: Summary?

                public var lookaheadexcessliquiditys: Summary?

                public var lookaheadinitmarginreq: Summary?

                public var lookaheadinitmarginreqc: Summary?

                public var lookaheadinitmarginreqf: Summary?

                public var lookaheadinitmarginreqs: Summary?

                public var lookaheadmaintmarginreq: Summary?

                public var lookaheadmaintmarginreqc: Summary?

                public var lookaheadmaintmarginreqf: Summary?

                public var lookaheadmaintmarginreqs: Summary?

                public var lookaheadnextchange: Summary?

                public var maintmarginreq: Summary?

                public var maintmarginreqc: Summary?

                public var maintmarginreqf: Summary?

                public var maintmarginreqs: Summary?

                public var netliquidation: Summary?

                public var netliquidationc: Summary?

                public var netliquidationf: Summary?

                public var netliquidations: Summary?

                public var netliquidationuncertainty: Summary?

                public var nlvandmargininreview: Summary?

                public var pasharesvalue: Summary?

                public var pasharesvaluec: Summary?

                public var pasharesvaluef: Summary?

                public var pasharesvalues: Summary?

                public var postexpirationexcess: Summary?

                public var postexpirationexcessc: Summary?

                public var postexpirationexcessf: Summary?

                public var postexpirationexcesss: Summary?

                public var postexpirationmargin: Summary?

                public var postexpirationmarginc: Summary?

                public var postexpirationmarginf: Summary?

                public var postexpirationmargins: Summary?

                public var previousdayequitywithloanvalue: Summary?

                public var previousdayequitywithloanvaluec: Summary?

                public var previousdayequitywithloanvaluef: Summary?

                public var previousdayequitywithloanvalues: Summary?

                public var segmenttitlec: Summary?

                public var segmenttitlef: Summary?

                public var segmenttitles: Summary?

                public var totalcashvalue: Summary?

                public var totalcashvaluec: Summary?

                public var totalcashvaluef: Summary?

                public var totalcashvalues: Summary?

                public var totaldebitcardpendingcharges: Summary?

                public var totaldebitcardpendingchargesc: Summary?

                public var totaldebitcardpendingchargesf: Summary?

                public var totaldebitcardpendingchargess: Summary?

                public var tradingtypef: Summary?

                public var tradingtypes: Summary?

                public init(accountready: Summary? = nil, accounttype: Summary? = nil, accruedcash: Summary? = nil, accruedcashc: Summary? = nil, accruedcashf: Summary? = nil, accruedcashs: Summary? = nil, accrueddividend: Summary? = nil, accrueddividendc: Summary? = nil, accrueddividendf: Summary? = nil, accrueddividends: Summary? = nil, availablefunds: Summary? = nil, availablefundsc: Summary? = nil, availablefundsf: Summary? = nil, availablefundss: Summary? = nil, billable: Summary? = nil, billablec: Summary? = nil, billablef: Summary? = nil, billables: Summary? = nil, buyingpower: Summary? = nil, cushion: Summary? = nil, daytradesremaining: Summary? = nil, daytradesremainingt1: Summary? = nil, daytradesremainingt2: Summary? = nil, daytradesremainingt3: Summary? = nil, daytradesremainingt4: Summary? = nil, equitywithloanvalue: Summary? = nil, equitywithloanvaluec: Summary? = nil, equitywithloanvaluef: Summary? = nil, equitywithloanvalues: Summary? = nil, excessliquidity: Summary? = nil, excessliquidityc: Summary? = nil, excessliquidityf: Summary? = nil, excessliquiditys: Summary? = nil, fullavailablefunds: Summary? = nil, fullavailablefundsc: Summary? = nil, fullavailablefundsf: Summary? = nil, fullavailablefundss: Summary? = nil, fullexcessliquidity: Summary? = nil, fullexcessliquidityc: Summary? = nil, fullexcessliquidityf: Summary? = nil, fullexcessliquiditys: Summary? = nil, fullinitmarginreq: Summary? = nil, fullinitmarginreqc: Summary? = nil, fullinitmarginreqf: Summary? = nil, fullinitmarginreqs: Summary? = nil, fullmaintmarginreq: Summary? = nil, fullmaintmarginreqc: Summary? = nil, fullmaintmarginreqf: Summary? = nil, fullmaintmarginreqs: Summary? = nil, grosspositionvalue: Summary? = nil, grosspositionvaluec: Summary? = nil, grosspositionvaluef: Summary? = nil, grosspositionvalues: Summary? = nil, guarantee: Summary? = nil, guaranteec: Summary? = nil, guaranteef: Summary? = nil, guarantees: Summary? = nil, highestseverity: Summary? = nil, highestseverityc: Summary? = nil, highestseverityf: Summary? = nil, highestseveritys: Summary? = nil, indianstockhaircut: Summary? = nil, indianstockhaircutc: Summary? = nil, indianstockhaircutf: Summary? = nil, indianstockhaircuts: Summary? = nil, initmarginreq: Summary? = nil, initmarginreqc: Summary? = nil, initmarginreqf: Summary? = nil, initmarginreqs: Summary? = nil, leverage: Summary? = nil, leveragec: Summary? = nil, leveragef: Summary? = nil, leverages: Summary? = nil, lookaheadavailablefunds: Summary? = nil, lookaheadavailablefundsc: Summary? = nil, lookaheadavailablefundsf: Summary? = nil, lookaheadavailablefundss: Summary? = nil, lookaheadexcessliquidity: Summary? = nil, lookaheadexcessliquidityc: Summary? = nil, lookaheadexcessliquidityf: Summary? = nil, lookaheadexcessliquiditys: Summary? = nil, lookaheadinitmarginreq: Summary? = nil, lookaheadinitmarginreqc: Summary? = nil, lookaheadinitmarginreqf: Summary? = nil, lookaheadinitmarginreqs: Summary? = nil, lookaheadmaintmarginreq: Summary? = nil, lookaheadmaintmarginreqc: Summary? = nil, lookaheadmaintmarginreqf: Summary? = nil, lookaheadmaintmarginreqs: Summary? = nil, lookaheadnextchange: Summary? = nil, maintmarginreq: Summary? = nil, maintmarginreqc: Summary? = nil, maintmarginreqf: Summary? = nil, maintmarginreqs: Summary? = nil, netliquidation: Summary? = nil, netliquidationc: Summary? = nil, netliquidationf: Summary? = nil, netliquidations: Summary? = nil, netliquidationuncertainty: Summary? = nil, nlvandmargininreview: Summary? = nil, pasharesvalue: Summary? = nil, pasharesvaluec: Summary? = nil, pasharesvaluef: Summary? = nil, pasharesvalues: Summary? = nil, postexpirationexcess: Summary? = nil, postexpirationexcessc: Summary? = nil, postexpirationexcessf: Summary? = nil, postexpirationexcesss: Summary? = nil, postexpirationmargin: Summary? = nil, postexpirationmarginc: Summary? = nil, postexpirationmarginf: Summary? = nil, postexpirationmargins: Summary? = nil, previousdayequitywithloanvalue: Summary? = nil, previousdayequitywithloanvaluec: Summary? = nil, previousdayequitywithloanvaluef: Summary? = nil, previousdayequitywithloanvalues: Summary? = nil, segmenttitlec: Summary? = nil, segmenttitlef: Summary? = nil, segmenttitles: Summary? = nil, totalcashvalue: Summary? = nil, totalcashvaluec: Summary? = nil, totalcashvaluef: Summary? = nil, totalcashvalues: Summary? = nil, totaldebitcardpendingcharges: Summary? = nil, totaldebitcardpendingchargesc: Summary? = nil, totaldebitcardpendingchargesf: Summary? = nil, totaldebitcardpendingchargess: Summary? = nil, tradingtypef: Summary? = nil, tradingtypes: Summary? = nil) {
                    self.accountready = accountready
                    self.accounttype = accounttype
                    self.accruedcash = accruedcash
                    self.accruedcashc = accruedcashc
                    self.accruedcashf = accruedcashf
                    self.accruedcashs = accruedcashs
                    self.accrueddividend = accrueddividend
                    self.accrueddividendc = accrueddividendc
                    self.accrueddividendf = accrueddividendf
                    self.accrueddividends = accrueddividends
                    self.availablefunds = availablefunds
                    self.availablefundsc = availablefundsc
                    self.availablefundsf = availablefundsf
                    self.availablefundss = availablefundss
                    self.billable = billable
                    self.billablec = billablec
                    self.billablef = billablef
                    self.billables = billables
                    self.buyingpower = buyingpower
                    self.cushion = cushion
                    self.daytradesremaining = daytradesremaining
                    self.daytradesremainingt1 = daytradesremainingt1
                    self.daytradesremainingt2 = daytradesremainingt2
                    self.daytradesremainingt3 = daytradesremainingt3
                    self.daytradesremainingt4 = daytradesremainingt4
                    self.equitywithloanvalue = equitywithloanvalue
                    self.equitywithloanvaluec = equitywithloanvaluec
                    self.equitywithloanvaluef = equitywithloanvaluef
                    self.equitywithloanvalues = equitywithloanvalues
                    self.excessliquidity = excessliquidity
                    self.excessliquidityc = excessliquidityc
                    self.excessliquidityf = excessliquidityf
                    self.excessliquiditys = excessliquiditys
                    self.fullavailablefunds = fullavailablefunds
                    self.fullavailablefundsc = fullavailablefundsc
                    self.fullavailablefundsf = fullavailablefundsf
                    self.fullavailablefundss = fullavailablefundss
                    self.fullexcessliquidity = fullexcessliquidity
                    self.fullexcessliquidityc = fullexcessliquidityc
                    self.fullexcessliquidityf = fullexcessliquidityf
                    self.fullexcessliquiditys = fullexcessliquiditys
                    self.fullinitmarginreq = fullinitmarginreq
                    self.fullinitmarginreqc = fullinitmarginreqc
                    self.fullinitmarginreqf = fullinitmarginreqf
                    self.fullinitmarginreqs = fullinitmarginreqs
                    self.fullmaintmarginreq = fullmaintmarginreq
                    self.fullmaintmarginreqc = fullmaintmarginreqc
                    self.fullmaintmarginreqf = fullmaintmarginreqf
                    self.fullmaintmarginreqs = fullmaintmarginreqs
                    self.grosspositionvalue = grosspositionvalue
                    self.grosspositionvaluec = grosspositionvaluec
                    self.grosspositionvaluef = grosspositionvaluef
                    self.grosspositionvalues = grosspositionvalues
                    self.guarantee = guarantee
                    self.guaranteec = guaranteec
                    self.guaranteef = guaranteef
                    self.guarantees = guarantees
                    self.highestseverity = highestseverity
                    self.highestseverityc = highestseverityc
                    self.highestseverityf = highestseverityf
                    self.highestseveritys = highestseveritys
                    self.indianstockhaircut = indianstockhaircut
                    self.indianstockhaircutc = indianstockhaircutc
                    self.indianstockhaircutf = indianstockhaircutf
                    self.indianstockhaircuts = indianstockhaircuts
                    self.initmarginreq = initmarginreq
                    self.initmarginreqc = initmarginreqc
                    self.initmarginreqf = initmarginreqf
                    self.initmarginreqs = initmarginreqs
                    self.leverage = leverage
                    self.leveragec = leveragec
                    self.leveragef = leveragef
                    self.leverages = leverages
                    self.lookaheadavailablefunds = lookaheadavailablefunds
                    self.lookaheadavailablefundsc = lookaheadavailablefundsc
                    self.lookaheadavailablefundsf = lookaheadavailablefundsf
                    self.lookaheadavailablefundss = lookaheadavailablefundss
                    self.lookaheadexcessliquidity = lookaheadexcessliquidity
                    self.lookaheadexcessliquidityc = lookaheadexcessliquidityc
                    self.lookaheadexcessliquidityf = lookaheadexcessliquidityf
                    self.lookaheadexcessliquiditys = lookaheadexcessliquiditys
                    self.lookaheadinitmarginreq = lookaheadinitmarginreq
                    self.lookaheadinitmarginreqc = lookaheadinitmarginreqc
                    self.lookaheadinitmarginreqf = lookaheadinitmarginreqf
                    self.lookaheadinitmarginreqs = lookaheadinitmarginreqs
                    self.lookaheadmaintmarginreq = lookaheadmaintmarginreq
                    self.lookaheadmaintmarginreqc = lookaheadmaintmarginreqc
                    self.lookaheadmaintmarginreqf = lookaheadmaintmarginreqf
                    self.lookaheadmaintmarginreqs = lookaheadmaintmarginreqs
                    self.lookaheadnextchange = lookaheadnextchange
                    self.maintmarginreq = maintmarginreq
                    self.maintmarginreqc = maintmarginreqc
                    self.maintmarginreqf = maintmarginreqf
                    self.maintmarginreqs = maintmarginreqs
                    self.netliquidation = netliquidation
                    self.netliquidationc = netliquidationc
                    self.netliquidationf = netliquidationf
                    self.netliquidations = netliquidations
                    self.netliquidationuncertainty = netliquidationuncertainty
                    self.nlvandmargininreview = nlvandmargininreview
                    self.pasharesvalue = pasharesvalue
                    self.pasharesvaluec = pasharesvaluec
                    self.pasharesvaluef = pasharesvaluef
                    self.pasharesvalues = pasharesvalues
                    self.postexpirationexcess = postexpirationexcess
                    self.postexpirationexcessc = postexpirationexcessc
                    self.postexpirationexcessf = postexpirationexcessf
                    self.postexpirationexcesss = postexpirationexcesss
                    self.postexpirationmargin = postexpirationmargin
                    self.postexpirationmarginc = postexpirationmarginc
                    self.postexpirationmarginf = postexpirationmarginf
                    self.postexpirationmargins = postexpirationmargins
                    self.previousdayequitywithloanvalue = previousdayequitywithloanvalue
                    self.previousdayequitywithloanvaluec = previousdayequitywithloanvaluec
                    self.previousdayequitywithloanvaluef = previousdayequitywithloanvaluef
                    self.previousdayequitywithloanvalues = previousdayequitywithloanvalues
                    self.segmenttitlec = segmenttitlec
                    self.segmenttitlef = segmenttitlef
                    self.segmenttitles = segmenttitles
                    self.totalcashvalue = totalcashvalue
                    self.totalcashvaluec = totalcashvaluec
                    self.totalcashvaluef = totalcashvaluef
                    self.totalcashvalues = totalcashvalues
                    self.totaldebitcardpendingcharges = totaldebitcardpendingcharges
                    self.totaldebitcardpendingchargesc = totaldebitcardpendingchargesc
                    self.totaldebitcardpendingchargesf = totaldebitcardpendingchargesf
                    self.totaldebitcardpendingchargess = totaldebitcardpendingchargess
                    self.tradingtypef = tradingtypef
                    self.tradingtypes = tradingtypes
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    accountready = try container.decodeIfPresent("accountready")
                    accounttype = try container.decodeIfPresent("accounttype")
                    accruedcash = try container.decodeIfPresent("accruedcash")
                    accruedcashc = try container.decodeIfPresent("accruedcash-c")
                    accruedcashf = try container.decodeIfPresent("accruedcash-f")
                    accruedcashs = try container.decodeIfPresent("accruedcash-s")
                    accrueddividend = try container.decodeIfPresent("accrueddividend")
                    accrueddividendc = try container.decodeIfPresent("accrueddividend-c")
                    accrueddividendf = try container.decodeIfPresent("accrueddividend-f")
                    accrueddividends = try container.decodeIfPresent("accrueddividend-s")
                    availablefunds = try container.decodeIfPresent("availablefunds")
                    availablefundsc = try container.decodeIfPresent("availablefunds-c")
                    availablefundsf = try container.decodeIfPresent("availablefunds-f")
                    availablefundss = try container.decodeIfPresent("availablefunds-s")
                    billable = try container.decodeIfPresent("billable")
                    billablec = try container.decodeIfPresent("billable-c")
                    billablef = try container.decodeIfPresent("billable-f")
                    billables = try container.decodeIfPresent("billable-s")
                    buyingpower = try container.decodeIfPresent("buyingpower")
                    cushion = try container.decodeIfPresent("cushion")
                    daytradesremaining = try container.decodeIfPresent("daytradesremaining")
                    daytradesremainingt1 = try container.decodeIfPresent("daytradesremainingt+1")
                    daytradesremainingt2 = try container.decodeIfPresent("daytradesremainingt+2")
                    daytradesremainingt3 = try container.decodeIfPresent("daytradesremainingt+3")
                    daytradesremainingt4 = try container.decodeIfPresent("daytradesremainingt+4")
                    equitywithloanvalue = try container.decodeIfPresent("equitywithloanvalue")
                    equitywithloanvaluec = try container.decodeIfPresent("equitywithloanvalue-c")
                    equitywithloanvaluef = try container.decodeIfPresent("equitywithloanvalue-f")
                    equitywithloanvalues = try container.decodeIfPresent("equitywithloanvalue-s")
                    excessliquidity = try container.decodeIfPresent("excessliquidity")
                    excessliquidityc = try container.decodeIfPresent("excessliquidity-c")
                    excessliquidityf = try container.decodeIfPresent("excessliquidity-f")
                    excessliquiditys = try container.decodeIfPresent("excessliquidity-s")
                    fullavailablefunds = try container.decodeIfPresent("fullavailablefunds")
                    fullavailablefundsc = try container.decodeIfPresent("fullavailablefunds-c")
                    fullavailablefundsf = try container.decodeIfPresent("fullavailablefunds-f")
                    fullavailablefundss = try container.decodeIfPresent("fullavailablefunds-s")
                    fullexcessliquidity = try container.decodeIfPresent("fullexcessliquidity")
                    fullexcessliquidityc = try container.decodeIfPresent("fullexcessliquidity-c")
                    fullexcessliquidityf = try container.decodeIfPresent("fullexcessliquidity-f")
                    fullexcessliquiditys = try container.decodeIfPresent("fullexcessliquidity-s")
                    fullinitmarginreq = try container.decodeIfPresent("fullinitmarginreq")
                    fullinitmarginreqc = try container.decodeIfPresent("fullinitmarginreq-c")
                    fullinitmarginreqf = try container.decodeIfPresent("fullinitmarginreq-f")
                    fullinitmarginreqs = try container.decodeIfPresent("fullinitmarginreq-s")
                    fullmaintmarginreq = try container.decodeIfPresent("fullmaintmarginreq")
                    fullmaintmarginreqc = try container.decodeIfPresent("fullmaintmarginreq-c")
                    fullmaintmarginreqf = try container.decodeIfPresent("fullmaintmarginreq-f")
                    fullmaintmarginreqs = try container.decodeIfPresent("fullmaintmarginreq-s")
                    grosspositionvalue = try container.decodeIfPresent("grosspositionvalue")
                    grosspositionvaluec = try container.decodeIfPresent("grosspositionvalue-c")
                    grosspositionvaluef = try container.decodeIfPresent("grosspositionvalue-f")
                    grosspositionvalues = try container.decodeIfPresent("grosspositionvalue-s")
                    guarantee = try container.decodeIfPresent("guarantee")
                    guaranteec = try container.decodeIfPresent("guarantee-c")
                    guaranteef = try container.decodeIfPresent("guarantee-f")
                    guarantees = try container.decodeIfPresent("guarantee-s")
                    highestseverity = try container.decodeIfPresent("highestseverity")
                    highestseverityc = try container.decodeIfPresent("highestseverity-c")
                    highestseverityf = try container.decodeIfPresent("highestseverity-f")
                    highestseveritys = try container.decodeIfPresent("highestseverity-s")
                    indianstockhaircut = try container.decodeIfPresent("indianstockhaircut")
                    indianstockhaircutc = try container.decodeIfPresent("indianstockhaircut-c")
                    indianstockhaircutf = try container.decodeIfPresent("indianstockhaircut-f")
                    indianstockhaircuts = try container.decodeIfPresent("indianstockhaircut-s")
                    initmarginreq = try container.decodeIfPresent("initmarginreq")
                    initmarginreqc = try container.decodeIfPresent("initmarginreq-c")
                    initmarginreqf = try container.decodeIfPresent("initmarginreq-f")
                    initmarginreqs = try container.decodeIfPresent("initmarginreq-s")
                    leverage = try container.decodeIfPresent("leverage")
                    leveragec = try container.decodeIfPresent("leverage-c")
                    leveragef = try container.decodeIfPresent("leverage-f")
                    leverages = try container.decodeIfPresent("leverage-s")
                    lookaheadavailablefunds = try container.decodeIfPresent("lookaheadavailablefunds")
                    lookaheadavailablefundsc = try container.decodeIfPresent("lookaheadavailablefunds-c")
                    lookaheadavailablefundsf = try container.decodeIfPresent("lookaheadavailablefunds-f")
                    lookaheadavailablefundss = try container.decodeIfPresent("lookaheadavailablefunds-s")
                    lookaheadexcessliquidity = try container.decodeIfPresent("lookaheadexcessliquidity")
                    lookaheadexcessliquidityc = try container.decodeIfPresent("lookaheadexcessliquidity-c")
                    lookaheadexcessliquidityf = try container.decodeIfPresent("lookaheadexcessliquidity-f")
                    lookaheadexcessliquiditys = try container.decodeIfPresent("lookaheadexcessliquidity-s")
                    lookaheadinitmarginreq = try container.decodeIfPresent("lookaheadinitmarginreq")
                    lookaheadinitmarginreqc = try container.decodeIfPresent("lookaheadinitmarginreq-c")
                    lookaheadinitmarginreqf = try container.decodeIfPresent("lookaheadinitmarginreq-f")
                    lookaheadinitmarginreqs = try container.decodeIfPresent("lookaheadinitmarginreq-s")
                    lookaheadmaintmarginreq = try container.decodeIfPresent("lookaheadmaintmarginreq")
                    lookaheadmaintmarginreqc = try container.decodeIfPresent("lookaheadmaintmarginreq-c")
                    lookaheadmaintmarginreqf = try container.decodeIfPresent("lookaheadmaintmarginreq-f")
                    lookaheadmaintmarginreqs = try container.decodeIfPresent("lookaheadmaintmarginreq-s")
                    lookaheadnextchange = try container.decodeIfPresent("lookaheadnextchange")
                    maintmarginreq = try container.decodeIfPresent("maintmarginreq")
                    maintmarginreqc = try container.decodeIfPresent("maintmarginreq-c")
                    maintmarginreqf = try container.decodeIfPresent("maintmarginreq-f")
                    maintmarginreqs = try container.decodeIfPresent("maintmarginreq-s")
                    netliquidation = try container.decodeIfPresent("netliquidation")
                    netliquidationc = try container.decodeIfPresent("netliquidation-c")
                    netliquidationf = try container.decodeIfPresent("netliquidation-f")
                    netliquidations = try container.decodeIfPresent("netliquidation-s")
                    netliquidationuncertainty = try container.decodeIfPresent("netliquidationuncertainty")
                    nlvandmargininreview = try container.decodeIfPresent("nlvandmargininreview")
                    pasharesvalue = try container.decodeIfPresent("pasharesvalue")
                    pasharesvaluec = try container.decodeIfPresent("pasharesvalue-c")
                    pasharesvaluef = try container.decodeIfPresent("pasharesvalue-f")
                    pasharesvalues = try container.decodeIfPresent("pasharesvalue-s")
                    postexpirationexcess = try container.decodeIfPresent("postexpirationexcess")
                    postexpirationexcessc = try container.decodeIfPresent("postexpirationexcess-c")
                    postexpirationexcessf = try container.decodeIfPresent("postexpirationexcess-f")
                    postexpirationexcesss = try container.decodeIfPresent("postexpirationexcess-s")
                    postexpirationmargin = try container.decodeIfPresent("postexpirationmargin")
                    postexpirationmarginc = try container.decodeIfPresent("postexpirationmargin-c")
                    postexpirationmarginf = try container.decodeIfPresent("postexpirationmargin-f")
                    postexpirationmargins = try container.decodeIfPresent("postexpirationmargin-s")
                    previousdayequitywithloanvalue = try container.decodeIfPresent("previousdayequitywithloanvalue")
                    previousdayequitywithloanvaluec = try container.decodeIfPresent("previousdayequitywithloanvalue-c")
                    previousdayequitywithloanvaluef = try container.decodeIfPresent("previousdayequitywithloanvalue-f")
                    previousdayequitywithloanvalues = try container.decodeIfPresent("previousdayequitywithloanvalue-s")
                    segmenttitlec = try container.decodeIfPresent("segmenttitle-c")
                    segmenttitlef = try container.decodeIfPresent("segmenttitle-f")
                    segmenttitles = try container.decodeIfPresent("segmenttitle-s")
                    totalcashvalue = try container.decodeIfPresent("totalcashvalue")
                    totalcashvaluec = try container.decodeIfPresent("totalcashvalue-c")
                    totalcashvaluef = try container.decodeIfPresent("totalcashvalue-f")
                    totalcashvalues = try container.decodeIfPresent("totalcashvalue-s")
                    totaldebitcardpendingcharges = try container.decodeIfPresent("totaldebitcardpendingcharges")
                    totaldebitcardpendingchargesc = try container.decodeIfPresent("totaldebitcardpendingcharges-c")
                    totaldebitcardpendingchargesf = try container.decodeIfPresent("totaldebitcardpendingcharges-f")
                    totaldebitcardpendingchargess = try container.decodeIfPresent("totaldebitcardpendingcharges-s")
                    tradingtypef = try container.decodeIfPresent("tradingtype-f")
                    tradingtypes = try container.decodeIfPresent("tradingtype-s")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(accountready, forKey: "accountready")
                    try container.encodeIfPresent(accounttype, forKey: "accounttype")
                    try container.encodeIfPresent(accruedcash, forKey: "accruedcash")
                    try container.encodeIfPresent(accruedcashc, forKey: "accruedcash-c")
                    try container.encodeIfPresent(accruedcashf, forKey: "accruedcash-f")
                    try container.encodeIfPresent(accruedcashs, forKey: "accruedcash-s")
                    try container.encodeIfPresent(accrueddividend, forKey: "accrueddividend")
                    try container.encodeIfPresent(accrueddividendc, forKey: "accrueddividend-c")
                    try container.encodeIfPresent(accrueddividendf, forKey: "accrueddividend-f")
                    try container.encodeIfPresent(accrueddividends, forKey: "accrueddividend-s")
                    try container.encodeIfPresent(availablefunds, forKey: "availablefunds")
                    try container.encodeIfPresent(availablefundsc, forKey: "availablefunds-c")
                    try container.encodeIfPresent(availablefundsf, forKey: "availablefunds-f")
                    try container.encodeIfPresent(availablefundss, forKey: "availablefunds-s")
                    try container.encodeIfPresent(billable, forKey: "billable")
                    try container.encodeIfPresent(billablec, forKey: "billable-c")
                    try container.encodeIfPresent(billablef, forKey: "billable-f")
                    try container.encodeIfPresent(billables, forKey: "billable-s")
                    try container.encodeIfPresent(buyingpower, forKey: "buyingpower")
                    try container.encodeIfPresent(cushion, forKey: "cushion")
                    try container.encodeIfPresent(daytradesremaining, forKey: "daytradesremaining")
                    try container.encodeIfPresent(daytradesremainingt1, forKey: "daytradesremainingt+1")
                    try container.encodeIfPresent(daytradesremainingt2, forKey: "daytradesremainingt+2")
                    try container.encodeIfPresent(daytradesremainingt3, forKey: "daytradesremainingt+3")
                    try container.encodeIfPresent(daytradesremainingt4, forKey: "daytradesremainingt+4")
                    try container.encodeIfPresent(equitywithloanvalue, forKey: "equitywithloanvalue")
                    try container.encodeIfPresent(equitywithloanvaluec, forKey: "equitywithloanvalue-c")
                    try container.encodeIfPresent(equitywithloanvaluef, forKey: "equitywithloanvalue-f")
                    try container.encodeIfPresent(equitywithloanvalues, forKey: "equitywithloanvalue-s")
                    try container.encodeIfPresent(excessliquidity, forKey: "excessliquidity")
                    try container.encodeIfPresent(excessliquidityc, forKey: "excessliquidity-c")
                    try container.encodeIfPresent(excessliquidityf, forKey: "excessliquidity-f")
                    try container.encodeIfPresent(excessliquiditys, forKey: "excessliquidity-s")
                    try container.encodeIfPresent(fullavailablefunds, forKey: "fullavailablefunds")
                    try container.encodeIfPresent(fullavailablefundsc, forKey: "fullavailablefunds-c")
                    try container.encodeIfPresent(fullavailablefundsf, forKey: "fullavailablefunds-f")
                    try container.encodeIfPresent(fullavailablefundss, forKey: "fullavailablefunds-s")
                    try container.encodeIfPresent(fullexcessliquidity, forKey: "fullexcessliquidity")
                    try container.encodeIfPresent(fullexcessliquidityc, forKey: "fullexcessliquidity-c")
                    try container.encodeIfPresent(fullexcessliquidityf, forKey: "fullexcessliquidity-f")
                    try container.encodeIfPresent(fullexcessliquiditys, forKey: "fullexcessliquidity-s")
                    try container.encodeIfPresent(fullinitmarginreq, forKey: "fullinitmarginreq")
                    try container.encodeIfPresent(fullinitmarginreqc, forKey: "fullinitmarginreq-c")
                    try container.encodeIfPresent(fullinitmarginreqf, forKey: "fullinitmarginreq-f")
                    try container.encodeIfPresent(fullinitmarginreqs, forKey: "fullinitmarginreq-s")
                    try container.encodeIfPresent(fullmaintmarginreq, forKey: "fullmaintmarginreq")
                    try container.encodeIfPresent(fullmaintmarginreqc, forKey: "fullmaintmarginreq-c")
                    try container.encodeIfPresent(fullmaintmarginreqf, forKey: "fullmaintmarginreq-f")
                    try container.encodeIfPresent(fullmaintmarginreqs, forKey: "fullmaintmarginreq-s")
                    try container.encodeIfPresent(grosspositionvalue, forKey: "grosspositionvalue")
                    try container.encodeIfPresent(grosspositionvaluec, forKey: "grosspositionvalue-c")
                    try container.encodeIfPresent(grosspositionvaluef, forKey: "grosspositionvalue-f")
                    try container.encodeIfPresent(grosspositionvalues, forKey: "grosspositionvalue-s")
                    try container.encodeIfPresent(guarantee, forKey: "guarantee")
                    try container.encodeIfPresent(guaranteec, forKey: "guarantee-c")
                    try container.encodeIfPresent(guaranteef, forKey: "guarantee-f")
                    try container.encodeIfPresent(guarantees, forKey: "guarantee-s")
                    try container.encodeIfPresent(highestseverity, forKey: "highestseverity")
                    try container.encodeIfPresent(highestseverityc, forKey: "highestseverity-c")
                    try container.encodeIfPresent(highestseverityf, forKey: "highestseverity-f")
                    try container.encodeIfPresent(highestseveritys, forKey: "highestseverity-s")
                    try container.encodeIfPresent(indianstockhaircut, forKey: "indianstockhaircut")
                    try container.encodeIfPresent(indianstockhaircutc, forKey: "indianstockhaircut-c")
                    try container.encodeIfPresent(indianstockhaircutf, forKey: "indianstockhaircut-f")
                    try container.encodeIfPresent(indianstockhaircuts, forKey: "indianstockhaircut-s")
                    try container.encodeIfPresent(initmarginreq, forKey: "initmarginreq")
                    try container.encodeIfPresent(initmarginreqc, forKey: "initmarginreq-c")
                    try container.encodeIfPresent(initmarginreqf, forKey: "initmarginreq-f")
                    try container.encodeIfPresent(initmarginreqs, forKey: "initmarginreq-s")
                    try container.encodeIfPresent(leverage, forKey: "leverage")
                    try container.encodeIfPresent(leveragec, forKey: "leverage-c")
                    try container.encodeIfPresent(leveragef, forKey: "leverage-f")
                    try container.encodeIfPresent(leverages, forKey: "leverage-s")
                    try container.encodeIfPresent(lookaheadavailablefunds, forKey: "lookaheadavailablefunds")
                    try container.encodeIfPresent(lookaheadavailablefundsc, forKey: "lookaheadavailablefunds-c")
                    try container.encodeIfPresent(lookaheadavailablefundsf, forKey: "lookaheadavailablefunds-f")
                    try container.encodeIfPresent(lookaheadavailablefundss, forKey: "lookaheadavailablefunds-s")
                    try container.encodeIfPresent(lookaheadexcessliquidity, forKey: "lookaheadexcessliquidity")
                    try container.encodeIfPresent(lookaheadexcessliquidityc, forKey: "lookaheadexcessliquidity-c")
                    try container.encodeIfPresent(lookaheadexcessliquidityf, forKey: "lookaheadexcessliquidity-f")
                    try container.encodeIfPresent(lookaheadexcessliquiditys, forKey: "lookaheadexcessliquidity-s")
                    try container.encodeIfPresent(lookaheadinitmarginreq, forKey: "lookaheadinitmarginreq")
                    try container.encodeIfPresent(lookaheadinitmarginreqc, forKey: "lookaheadinitmarginreq-c")
                    try container.encodeIfPresent(lookaheadinitmarginreqf, forKey: "lookaheadinitmarginreq-f")
                    try container.encodeIfPresent(lookaheadinitmarginreqs, forKey: "lookaheadinitmarginreq-s")
                    try container.encodeIfPresent(lookaheadmaintmarginreq, forKey: "lookaheadmaintmarginreq")
                    try container.encodeIfPresent(lookaheadmaintmarginreqc, forKey: "lookaheadmaintmarginreq-c")
                    try container.encodeIfPresent(lookaheadmaintmarginreqf, forKey: "lookaheadmaintmarginreq-f")
                    try container.encodeIfPresent(lookaheadmaintmarginreqs, forKey: "lookaheadmaintmarginreq-s")
                    try container.encodeIfPresent(lookaheadnextchange, forKey: "lookaheadnextchange")
                    try container.encodeIfPresent(maintmarginreq, forKey: "maintmarginreq")
                    try container.encodeIfPresent(maintmarginreqc, forKey: "maintmarginreq-c")
                    try container.encodeIfPresent(maintmarginreqf, forKey: "maintmarginreq-f")
                    try container.encodeIfPresent(maintmarginreqs, forKey: "maintmarginreq-s")
                    try container.encodeIfPresent(netliquidation, forKey: "netliquidation")
                    try container.encodeIfPresent(netliquidationc, forKey: "netliquidation-c")
                    try container.encodeIfPresent(netliquidationf, forKey: "netliquidation-f")
                    try container.encodeIfPresent(netliquidations, forKey: "netliquidation-s")
                    try container.encodeIfPresent(netliquidationuncertainty, forKey: "netliquidationuncertainty")
                    try container.encodeIfPresent(nlvandmargininreview, forKey: "nlvandmargininreview")
                    try container.encodeIfPresent(pasharesvalue, forKey: "pasharesvalue")
                    try container.encodeIfPresent(pasharesvaluec, forKey: "pasharesvalue-c")
                    try container.encodeIfPresent(pasharesvaluef, forKey: "pasharesvalue-f")
                    try container.encodeIfPresent(pasharesvalues, forKey: "pasharesvalue-s")
                    try container.encodeIfPresent(postexpirationexcess, forKey: "postexpirationexcess")
                    try container.encodeIfPresent(postexpirationexcessc, forKey: "postexpirationexcess-c")
                    try container.encodeIfPresent(postexpirationexcessf, forKey: "postexpirationexcess-f")
                    try container.encodeIfPresent(postexpirationexcesss, forKey: "postexpirationexcess-s")
                    try container.encodeIfPresent(postexpirationmargin, forKey: "postexpirationmargin")
                    try container.encodeIfPresent(postexpirationmarginc, forKey: "postexpirationmargin-c")
                    try container.encodeIfPresent(postexpirationmarginf, forKey: "postexpirationmargin-f")
                    try container.encodeIfPresent(postexpirationmargins, forKey: "postexpirationmargin-s")
                    try container.encodeIfPresent(previousdayequitywithloanvalue, forKey: "previousdayequitywithloanvalue")
                    try container.encodeIfPresent(previousdayequitywithloanvaluec, forKey: "previousdayequitywithloanvalue-c")
                    try container.encodeIfPresent(previousdayequitywithloanvaluef, forKey: "previousdayequitywithloanvalue-f")
                    try container.encodeIfPresent(previousdayequitywithloanvalues, forKey: "previousdayequitywithloanvalue-s")
                    try container.encodeIfPresent(segmenttitlec, forKey: "segmenttitle-c")
                    try container.encodeIfPresent(segmenttitlef, forKey: "segmenttitle-f")
                    try container.encodeIfPresent(segmenttitles, forKey: "segmenttitle-s")
                    try container.encodeIfPresent(totalcashvalue, forKey: "totalcashvalue")
                    try container.encodeIfPresent(totalcashvaluec, forKey: "totalcashvalue-c")
                    try container.encodeIfPresent(totalcashvaluef, forKey: "totalcashvalue-f")
                    try container.encodeIfPresent(totalcashvalues, forKey: "totalcashvalue-s")
                    try container.encodeIfPresent(totaldebitcardpendingcharges, forKey: "totaldebitcardpendingcharges")
                    try container.encodeIfPresent(totaldebitcardpendingchargesc, forKey: "totaldebitcardpendingcharges-c")
                    try container.encodeIfPresent(totaldebitcardpendingchargesf, forKey: "totaldebitcardpendingcharges-f")
                    try container.encodeIfPresent(totaldebitcardpendingchargess, forKey: "totaldebitcardpendingcharges-s")
                    try container.encodeIfPresent(tradingtypef, forKey: "tradingtype-f")
                    try container.encodeIfPresent(tradingtypes, forKey: "tradingtype-s")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.accountready == object.accountready else { return false }
                  guard self.accounttype == object.accounttype else { return false }
                  guard self.accruedcash == object.accruedcash else { return false }
                  guard self.accruedcashc == object.accruedcashc else { return false }
                  guard self.accruedcashf == object.accruedcashf else { return false }
                  guard self.accruedcashs == object.accruedcashs else { return false }
                  guard self.accrueddividend == object.accrueddividend else { return false }
                  guard self.accrueddividendc == object.accrueddividendc else { return false }
                  guard self.accrueddividendf == object.accrueddividendf else { return false }
                  guard self.accrueddividends == object.accrueddividends else { return false }
                  guard self.availablefunds == object.availablefunds else { return false }
                  guard self.availablefundsc == object.availablefundsc else { return false }
                  guard self.availablefundsf == object.availablefundsf else { return false }
                  guard self.availablefundss == object.availablefundss else { return false }
                  guard self.billable == object.billable else { return false }
                  guard self.billablec == object.billablec else { return false }
                  guard self.billablef == object.billablef else { return false }
                  guard self.billables == object.billables else { return false }
                  guard self.buyingpower == object.buyingpower else { return false }
                  guard self.cushion == object.cushion else { return false }
                  guard self.daytradesremaining == object.daytradesremaining else { return false }
                  guard self.daytradesremainingt1 == object.daytradesremainingt1 else { return false }
                  guard self.daytradesremainingt2 == object.daytradesremainingt2 else { return false }
                  guard self.daytradesremainingt3 == object.daytradesremainingt3 else { return false }
                  guard self.daytradesremainingt4 == object.daytradesremainingt4 else { return false }
                  guard self.equitywithloanvalue == object.equitywithloanvalue else { return false }
                  guard self.equitywithloanvaluec == object.equitywithloanvaluec else { return false }
                  guard self.equitywithloanvaluef == object.equitywithloanvaluef else { return false }
                  guard self.equitywithloanvalues == object.equitywithloanvalues else { return false }
                  guard self.excessliquidity == object.excessliquidity else { return false }
                  guard self.excessliquidityc == object.excessliquidityc else { return false }
                  guard self.excessliquidityf == object.excessliquidityf else { return false }
                  guard self.excessliquiditys == object.excessliquiditys else { return false }
                  guard self.fullavailablefunds == object.fullavailablefunds else { return false }
                  guard self.fullavailablefundsc == object.fullavailablefundsc else { return false }
                  guard self.fullavailablefundsf == object.fullavailablefundsf else { return false }
                  guard self.fullavailablefundss == object.fullavailablefundss else { return false }
                  guard self.fullexcessliquidity == object.fullexcessliquidity else { return false }
                  guard self.fullexcessliquidityc == object.fullexcessliquidityc else { return false }
                  guard self.fullexcessliquidityf == object.fullexcessliquidityf else { return false }
                  guard self.fullexcessliquiditys == object.fullexcessliquiditys else { return false }
                  guard self.fullinitmarginreq == object.fullinitmarginreq else { return false }
                  guard self.fullinitmarginreqc == object.fullinitmarginreqc else { return false }
                  guard self.fullinitmarginreqf == object.fullinitmarginreqf else { return false }
                  guard self.fullinitmarginreqs == object.fullinitmarginreqs else { return false }
                  guard self.fullmaintmarginreq == object.fullmaintmarginreq else { return false }
                  guard self.fullmaintmarginreqc == object.fullmaintmarginreqc else { return false }
                  guard self.fullmaintmarginreqf == object.fullmaintmarginreqf else { return false }
                  guard self.fullmaintmarginreqs == object.fullmaintmarginreqs else { return false }
                  guard self.grosspositionvalue == object.grosspositionvalue else { return false }
                  guard self.grosspositionvaluec == object.grosspositionvaluec else { return false }
                  guard self.grosspositionvaluef == object.grosspositionvaluef else { return false }
                  guard self.grosspositionvalues == object.grosspositionvalues else { return false }
                  guard self.guarantee == object.guarantee else { return false }
                  guard self.guaranteec == object.guaranteec else { return false }
                  guard self.guaranteef == object.guaranteef else { return false }
                  guard self.guarantees == object.guarantees else { return false }
                  guard self.highestseverity == object.highestseverity else { return false }
                  guard self.highestseverityc == object.highestseverityc else { return false }
                  guard self.highestseverityf == object.highestseverityf else { return false }
                  guard self.highestseveritys == object.highestseveritys else { return false }
                  guard self.indianstockhaircut == object.indianstockhaircut else { return false }
                  guard self.indianstockhaircutc == object.indianstockhaircutc else { return false }
                  guard self.indianstockhaircutf == object.indianstockhaircutf else { return false }
                  guard self.indianstockhaircuts == object.indianstockhaircuts else { return false }
                  guard self.initmarginreq == object.initmarginreq else { return false }
                  guard self.initmarginreqc == object.initmarginreqc else { return false }
                  guard self.initmarginreqf == object.initmarginreqf else { return false }
                  guard self.initmarginreqs == object.initmarginreqs else { return false }
                  guard self.leverage == object.leverage else { return false }
                  guard self.leveragec == object.leveragec else { return false }
                  guard self.leveragef == object.leveragef else { return false }
                  guard self.leverages == object.leverages else { return false }
                  guard self.lookaheadavailablefunds == object.lookaheadavailablefunds else { return false }
                  guard self.lookaheadavailablefundsc == object.lookaheadavailablefundsc else { return false }
                  guard self.lookaheadavailablefundsf == object.lookaheadavailablefundsf else { return false }
                  guard self.lookaheadavailablefundss == object.lookaheadavailablefundss else { return false }
                  guard self.lookaheadexcessliquidity == object.lookaheadexcessliquidity else { return false }
                  guard self.lookaheadexcessliquidityc == object.lookaheadexcessliquidityc else { return false }
                  guard self.lookaheadexcessliquidityf == object.lookaheadexcessliquidityf else { return false }
                  guard self.lookaheadexcessliquiditys == object.lookaheadexcessliquiditys else { return false }
                  guard self.lookaheadinitmarginreq == object.lookaheadinitmarginreq else { return false }
                  guard self.lookaheadinitmarginreqc == object.lookaheadinitmarginreqc else { return false }
                  guard self.lookaheadinitmarginreqf == object.lookaheadinitmarginreqf else { return false }
                  guard self.lookaheadinitmarginreqs == object.lookaheadinitmarginreqs else { return false }
                  guard self.lookaheadmaintmarginreq == object.lookaheadmaintmarginreq else { return false }
                  guard self.lookaheadmaintmarginreqc == object.lookaheadmaintmarginreqc else { return false }
                  guard self.lookaheadmaintmarginreqf == object.lookaheadmaintmarginreqf else { return false }
                  guard self.lookaheadmaintmarginreqs == object.lookaheadmaintmarginreqs else { return false }
                  guard self.lookaheadnextchange == object.lookaheadnextchange else { return false }
                  guard self.maintmarginreq == object.maintmarginreq else { return false }
                  guard self.maintmarginreqc == object.maintmarginreqc else { return false }
                  guard self.maintmarginreqf == object.maintmarginreqf else { return false }
                  guard self.maintmarginreqs == object.maintmarginreqs else { return false }
                  guard self.netliquidation == object.netliquidation else { return false }
                  guard self.netliquidationc == object.netliquidationc else { return false }
                  guard self.netliquidationf == object.netliquidationf else { return false }
                  guard self.netliquidations == object.netliquidations else { return false }
                  guard self.netliquidationuncertainty == object.netliquidationuncertainty else { return false }
                  guard self.nlvandmargininreview == object.nlvandmargininreview else { return false }
                  guard self.pasharesvalue == object.pasharesvalue else { return false }
                  guard self.pasharesvaluec == object.pasharesvaluec else { return false }
                  guard self.pasharesvaluef == object.pasharesvaluef else { return false }
                  guard self.pasharesvalues == object.pasharesvalues else { return false }
                  guard self.postexpirationexcess == object.postexpirationexcess else { return false }
                  guard self.postexpirationexcessc == object.postexpirationexcessc else { return false }
                  guard self.postexpirationexcessf == object.postexpirationexcessf else { return false }
                  guard self.postexpirationexcesss == object.postexpirationexcesss else { return false }
                  guard self.postexpirationmargin == object.postexpirationmargin else { return false }
                  guard self.postexpirationmarginc == object.postexpirationmarginc else { return false }
                  guard self.postexpirationmarginf == object.postexpirationmarginf else { return false }
                  guard self.postexpirationmargins == object.postexpirationmargins else { return false }
                  guard self.previousdayequitywithloanvalue == object.previousdayequitywithloanvalue else { return false }
                  guard self.previousdayequitywithloanvaluec == object.previousdayequitywithloanvaluec else { return false }
                  guard self.previousdayequitywithloanvaluef == object.previousdayequitywithloanvaluef else { return false }
                  guard self.previousdayequitywithloanvalues == object.previousdayequitywithloanvalues else { return false }
                  guard self.segmenttitlec == object.segmenttitlec else { return false }
                  guard self.segmenttitlef == object.segmenttitlef else { return false }
                  guard self.segmenttitles == object.segmenttitles else { return false }
                  guard self.totalcashvalue == object.totalcashvalue else { return false }
                  guard self.totalcashvaluec == object.totalcashvaluec else { return false }
                  guard self.totalcashvaluef == object.totalcashvaluef else { return false }
                  guard self.totalcashvalues == object.totalcashvalues else { return false }
                  guard self.totaldebitcardpendingcharges == object.totaldebitcardpendingcharges else { return false }
                  guard self.totaldebitcardpendingchargesc == object.totaldebitcardpendingchargesc else { return false }
                  guard self.totaldebitcardpendingchargesf == object.totaldebitcardpendingchargesf else { return false }
                  guard self.totaldebitcardpendingchargess == object.totaldebitcardpendingchargess else { return false }
                  guard self.tradingtypef == object.tradingtypef else { return false }
                  guard self.tradingtypes == object.tradingtypes else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** returns an object containing account summary. The object contains multiple properties. A property is sufficed with -c if its provides commodity value, -s if it provides security value and -c if its UKL segment value */
            case status200(Status200)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
