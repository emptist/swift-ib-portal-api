//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ScannerParams: APIModel {

    public var filter: [Filter]?

    /** for example-STK */
    public var instrument: String?

    public var location: String?

    public var size: String?

    /** for example-TOP_PERC_GAIN */
    public var type: String?

    public class Filter: APIModel {

        public var code: String?

        public var value: Double?

        public init(code: String? = nil, value: Double? = nil) {
            self.code = code
            self.value = value
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            code = try container.decodeIfPresent("code")
            value = try container.decodeIfPresent("value")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(code, forKey: "code")
            try container.encodeIfPresent(value, forKey: "value")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Filter else { return false }
          guard self.code == object.code else { return false }
          guard self.value == object.value else { return false }
          return true
        }

        public static func == (lhs: Filter, rhs: Filter) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(filter: [Filter]? = nil, instrument: String? = nil, location: String? = nil, size: String? = nil, type: String? = nil) {
        self.filter = filter
        self.instrument = instrument
        self.location = location
        self.size = size
        self.type = type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        filter = try container.decodeArrayIfPresent("filter")
        instrument = try container.decodeIfPresent("instrument")
        location = try container.decodeIfPresent("location")
        size = try container.decodeIfPresent("size")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(filter, forKey: "filter")
        try container.encodeIfPresent(instrument, forKey: "instrument")
        try container.encodeIfPresent(location, forKey: "location")
        try container.encodeIfPresent(size, forKey: "size")
        try container.encodeIfPresent(type, forKey: "type")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ScannerParams else { return false }
      guard self.filter == object.filter else { return false }
      guard self.instrument == object.instrument else { return false }
      guard self.location == object.location else { return false }
      guard self.size == object.size else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: ScannerParams, rhs: ScannerParams) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
