//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** account information */
public class Account: APIModel {

    public var accountAlias: String?

    public var accountId: String?

    public var accountStatus: Double?

    public var accountTitle: String?

    public var accountVan: String?

    public var covestor: Bool?

    public var currency: String?

    public var desc: String?

    public var displayName: String?

    public var faclient: Bool?

    public var id: String?

    public var master: Master?

    public var parent: String?

    public var tradingType: String?

    public var type: String?

    /** account information */
    public class Master: APIModel {

        public var officialTitle: String?

        public var title: String?

        public init(officialTitle: String? = nil, title: String? = nil) {
            self.officialTitle = officialTitle
            self.title = title
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            officialTitle = try container.decodeIfPresent("officialTitle")
            title = try container.decodeIfPresent("title")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(officialTitle, forKey: "officialTitle")
            try container.encodeIfPresent(title, forKey: "title")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Master else { return false }
          guard self.officialTitle == object.officialTitle else { return false }
          guard self.title == object.title else { return false }
          return true
        }

        public static func == (lhs: Master, rhs: Master) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(accountAlias: String? = nil, accountId: String? = nil, accountStatus: Double? = nil, accountTitle: String? = nil, accountVan: String? = nil, covestor: Bool? = nil, currency: String? = nil, desc: String? = nil, displayName: String? = nil, faclient: Bool? = nil, id: String? = nil, master: Master? = nil, parent: String? = nil, tradingType: String? = nil, type: String? = nil) {
        self.accountAlias = accountAlias
        self.accountId = accountId
        self.accountStatus = accountStatus
        self.accountTitle = accountTitle
        self.accountVan = accountVan
        self.covestor = covestor
        self.currency = currency
        self.desc = desc
        self.displayName = displayName
        self.faclient = faclient
        self.id = id
        self.master = master
        self.parent = parent
        self.tradingType = tradingType
        self.type = type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        accountAlias = try container.decodeIfPresent("accountAlias")
        accountId = try container.decodeIfPresent("accountId")
        accountStatus = try container.decodeIfPresent("accountStatus")
        accountTitle = try container.decodeIfPresent("accountTitle")
        accountVan = try container.decodeIfPresent("accountVan")
        covestor = try container.decodeIfPresent("covestor")
        currency = try container.decodeIfPresent("currency")
        desc = try container.decodeIfPresent("desc")
        displayName = try container.decodeIfPresent("displayName")
        faclient = try container.decodeIfPresent("faclient")
        id = try container.decodeIfPresent("id")
        master = try container.decodeIfPresent("master")
        parent = try container.decodeIfPresent("parent")
        tradingType = try container.decodeIfPresent("tradingType")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(accountAlias, forKey: "accountAlias")
        try container.encodeIfPresent(accountId, forKey: "accountId")
        try container.encodeIfPresent(accountStatus, forKey: "accountStatus")
        try container.encodeIfPresent(accountTitle, forKey: "accountTitle")
        try container.encodeIfPresent(accountVan, forKey: "accountVan")
        try container.encodeIfPresent(covestor, forKey: "covestor")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(desc, forKey: "desc")
        try container.encodeIfPresent(displayName, forKey: "displayName")
        try container.encodeIfPresent(faclient, forKey: "faclient")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(master, forKey: "master")
        try container.encodeIfPresent(parent, forKey: "parent")
        try container.encodeIfPresent(tradingType, forKey: "tradingType")
        try container.encodeIfPresent(type, forKey: "type")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Account else { return false }
      guard self.accountAlias == object.accountAlias else { return false }
      guard self.accountId == object.accountId else { return false }
      guard self.accountStatus == object.accountStatus else { return false }
      guard self.accountTitle == object.accountTitle else { return false }
      guard self.accountVan == object.accountVan else { return false }
      guard self.covestor == object.covestor else { return false }
      guard self.currency == object.currency else { return false }
      guard self.desc == object.desc else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.faclient == object.faclient else { return false }
      guard self.id == object.id else { return false }
      guard self.master == object.master else { return false }
      guard self.parent == object.parent else { return false }
      guard self.tradingType == object.tradingType else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: Account, rhs: Account) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
