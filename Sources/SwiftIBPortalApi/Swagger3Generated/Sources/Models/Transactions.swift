//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** account transactions */
public class Transactions: APIModel {

    /** same as request */
    public var currency: String?

    /** Period start date. Epoch time, GMT */
    public var from: Double?

    /** will always be getTransactions */
    public var id: String?

    /** Indicates whether current day and realtime data is included in the result */
    public var includesRealTime: Bool?

    /** Period end date. Epoch time, GMT */
    public var to: Double?

    /** Sorted by date descending */
    public var transactions: [Transactions]?

    /** account transactions */
    public class Transactions: APIModel {

        public var acctid: String?

        /** Raw value, no formatting. Net transaction amount (may include commission, tax).
    In asset currency */
        public var amt: Double?

        public var conid: Double?

        /** currency code */
        public var cur: String?

        /** Date of transaction.  Epoch time, GMT */
        public var date: String?

        /** Transaction description */
        public var desc: String?

        /** Conversion rate from asset currency to response currency */
        public var fxRate: Double?

        /** In asset currency. Not be applicable for all transaction types. */
        public var pr: Double?

        /** Not applicable for all transaction types */
        public var qty: Double?

        /** Transaction Type Name: Examples: "Sell", "Buy", "Corporate Action",
    "Dividend Payment", "Transfer", "Payment in Lieu"
    Dividends and Transfers do not have price and quantity in response
     */
        public var type: String?

        public init(acctid: String? = nil, amt: Double? = nil, conid: Double? = nil, cur: String? = nil, date: String? = nil, desc: String? = nil, fxRate: Double? = nil, pr: Double? = nil, qty: Double? = nil, type: String? = nil) {
            self.acctid = acctid
            self.amt = amt
            self.conid = conid
            self.cur = cur
            self.date = date
            self.desc = desc
            self.fxRate = fxRate
            self.pr = pr
            self.qty = qty
            self.type = type
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            acctid = try container.decodeIfPresent("acctid")
            amt = try container.decodeIfPresent("amt")
            conid = try container.decodeIfPresent("conid")
            cur = try container.decodeIfPresent("cur")
            date = try container.decodeIfPresent("date")
            desc = try container.decodeIfPresent("desc")
            fxRate = try container.decodeIfPresent("fxRate")
            pr = try container.decodeIfPresent("pr")
            qty = try container.decodeIfPresent("qty")
            type = try container.decodeIfPresent("type")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(acctid, forKey: "acctid")
            try container.encodeIfPresent(amt, forKey: "amt")
            try container.encodeIfPresent(conid, forKey: "conid")
            try container.encodeIfPresent(cur, forKey: "cur")
            try container.encodeIfPresent(date, forKey: "date")
            try container.encodeIfPresent(desc, forKey: "desc")
            try container.encodeIfPresent(fxRate, forKey: "fxRate")
            try container.encodeIfPresent(pr, forKey: "pr")
            try container.encodeIfPresent(qty, forKey: "qty")
            try container.encodeIfPresent(type, forKey: "type")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Transactions else { return false }
          guard self.acctid == object.acctid else { return false }
          guard self.amt == object.amt else { return false }
          guard self.conid == object.conid else { return false }
          guard self.cur == object.cur else { return false }
          guard self.date == object.date else { return false }
          guard self.desc == object.desc else { return false }
          guard self.fxRate == object.fxRate else { return false }
          guard self.pr == object.pr else { return false }
          guard self.qty == object.qty else { return false }
          guard self.type == object.type else { return false }
          return true
        }

        public static func == (lhs: Transactions, rhs: Transactions) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(currency: String? = nil, from: Double? = nil, id: String? = nil, includesRealTime: Bool? = nil, to: Double? = nil, transactions: [Transactions]? = nil) {
        self.currency = currency
        self.from = from
        self.id = id
        self.includesRealTime = includesRealTime
        self.to = to
        self.transactions = transactions
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        currency = try container.decodeIfPresent("currency")
        from = try container.decodeIfPresent("from")
        id = try container.decodeIfPresent("id")
        includesRealTime = try container.decodeIfPresent("includesRealTime")
        to = try container.decodeIfPresent("to")
        transactions = try container.decodeArrayIfPresent("transactions")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(from, forKey: "from")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(includesRealTime, forKey: "includesRealTime")
        try container.encodeIfPresent(to, forKey: "to")
        try container.encodeIfPresent(transactions, forKey: "transactions")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Transactions else { return false }
      guard self.currency == object.currency else { return false }
      guard self.from == object.from else { return false }
      guard self.id == object.id else { return false }
      guard self.includesRealTime == object.includesRealTime else { return false }
      guard self.to == object.to else { return false }
      guard self.transactions == object.transactions else { return false }
      return true
    }

    public static func == (lhs: Transactions, rhs: Transactions) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
