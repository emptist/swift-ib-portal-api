//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension IBPortalApi.Portfolio {

    /**
    Position by Conid

    Returns a list of all positions matching the conid. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
    */
    public enum GetPortfolioByAccountIdPositionByConid {

        public static let service = APIService<Response>(id: "getPortfolioByAccountIdPositionByConid", tag: "Portfolio", method: "GET", path: "/portfolio/{accountId}/position/{conid}", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** account id */
                public var accountId: String

                /** contract id */
                public var conid: Int

                public init(accountId: String, conid: Int) {
                    self.accountId = accountId
                    self.conid = conid
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetPortfolioByAccountIdPositionByConid.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(accountId: String, conid: Int) {
                let options = Options(accountId: accountId, conid: conid)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "accountId" + "}", with: "\(self.options.accountId)").replacingOccurrences(of: "{" + "conid" + "}", with: "\(self.options.conid)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = IBPositions

            /** returns a list containing only one position for the conid */
            case status200(IBPositions)

            public var success: IBPositions? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(IBPositions.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
