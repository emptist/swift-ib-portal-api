//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension IBPortalApi.Account {

    /**
    Account Summary

    Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
    */
    public enum GetPortfolioByAccountIdSummary {

        public static let service = APIService<Response>(id: "getPortfolioByAccountIdSummary", tag: "Account", method: "GET", path: "/portfolio/{accountId}/summary", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** account id */
                public var accountId: String

                public init(accountId: String) {
                    self.accountId = accountId
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetPortfolioByAccountIdSummary.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(accountId: String) {
                let options = Options(accountId: accountId)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "accountId" + "}", with: "\(self.options.accountId)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. */
            public struct Status200: APIModel {

                public let accountready: IBSummary?

                public let accounttype: IBSummary?

                public let accruedcash: IBSummary?

                public let accruedcashc: IBSummary?

                public let accruedcashf: IBSummary?

                public let accruedcashs: IBSummary?

                public let accrueddividend: IBSummary?

                public let accrueddividendc: IBSummary?

                public let accrueddividendf: IBSummary?

                public let accrueddividends: IBSummary?

                public let availablefunds: IBSummary?

                public let availablefundsc: IBSummary?

                public let availablefundsf: IBSummary?

                public let availablefundss: IBSummary?

                public let billable: IBSummary?

                public let billablec: IBSummary?

                public let billablef: IBSummary?

                public let billables: IBSummary?

                public let buyingpower: IBSummary?

                public let cushion: IBSummary?

                public let daytradesremaining: IBSummary?

                public let daytradesremainingt1: IBSummary?

                public let daytradesremainingt2: IBSummary?

                public let daytradesremainingt3: IBSummary?

                public let daytradesremainingt4: IBSummary?

                public let equitywithloanvalue: IBSummary?

                public let equitywithloanvaluec: IBSummary?

                public let equitywithloanvaluef: IBSummary?

                public let equitywithloanvalues: IBSummary?

                public let excessliquidity: IBSummary?

                public let excessliquidityc: IBSummary?

                public let excessliquidityf: IBSummary?

                public let excessliquiditys: IBSummary?

                public let fullavailablefunds: IBSummary?

                public let fullavailablefundsc: IBSummary?

                public let fullavailablefundsf: IBSummary?

                public let fullavailablefundss: IBSummary?

                public let fullexcessliquidity: IBSummary?

                public let fullexcessliquidityc: IBSummary?

                public let fullexcessliquidityf: IBSummary?

                public let fullexcessliquiditys: IBSummary?

                public let fullinitmarginreq: IBSummary?

                public let fullinitmarginreqc: IBSummary?

                public let fullinitmarginreqf: IBSummary?

                public let fullinitmarginreqs: IBSummary?

                public let fullmaintmarginreq: IBSummary?

                public let fullmaintmarginreqc: IBSummary?

                public let fullmaintmarginreqf: IBSummary?

                public let fullmaintmarginreqs: IBSummary?

                public let grosspositionvalue: IBSummary?

                public let grosspositionvaluec: IBSummary?

                public let grosspositionvaluef: IBSummary?

                public let grosspositionvalues: IBSummary?

                public let guarantee: IBSummary?

                public let guaranteec: IBSummary?

                public let guaranteef: IBSummary?

                public let guarantees: IBSummary?

                public let highestseverity: IBSummary?

                public let highestseverityc: IBSummary?

                public let highestseverityf: IBSummary?

                public let highestseveritys: IBSummary?

                public let indianstockhaircut: IBSummary?

                public let indianstockhaircutc: IBSummary?

                public let indianstockhaircutf: IBSummary?

                public let indianstockhaircuts: IBSummary?

                public let initmarginreq: IBSummary?

                public let initmarginreqc: IBSummary?

                public let initmarginreqf: IBSummary?

                public let initmarginreqs: IBSummary?

                public let leverage: IBSummary?

                public let leveragec: IBSummary?

                public let leveragef: IBSummary?

                public let leverages: IBSummary?

                public let lookaheadavailablefunds: IBSummary?

                public let lookaheadavailablefundsc: IBSummary?

                public let lookaheadavailablefundsf: IBSummary?

                public let lookaheadavailablefundss: IBSummary?

                public let lookaheadexcessliquidity: IBSummary?

                public let lookaheadexcessliquidityc: IBSummary?

                public let lookaheadexcessliquidityf: IBSummary?

                public let lookaheadexcessliquiditys: IBSummary?

                public let lookaheadinitmarginreq: IBSummary?

                public let lookaheadinitmarginreqc: IBSummary?

                public let lookaheadinitmarginreqf: IBSummary?

                public let lookaheadinitmarginreqs: IBSummary?

                public let lookaheadmaintmarginreq: IBSummary?

                public let lookaheadmaintmarginreqc: IBSummary?

                public let lookaheadmaintmarginreqf: IBSummary?

                public let lookaheadmaintmarginreqs: IBSummary?

                public let lookaheadnextchange: IBSummary?

                public let maintmarginreq: IBSummary?

                public let maintmarginreqc: IBSummary?

                public let maintmarginreqf: IBSummary?

                public let maintmarginreqs: IBSummary?

                public let netliquidation: IBSummary?

                public let netliquidationc: IBSummary?

                public let netliquidationf: IBSummary?

                public let netliquidations: IBSummary?

                public let netliquidationuncertainty: IBSummary?

                public let nlvandmargininreview: IBSummary?

                public let pasharesvalue: IBSummary?

                public let pasharesvaluec: IBSummary?

                public let pasharesvaluef: IBSummary?

                public let pasharesvalues: IBSummary?

                public let postexpirationexcess: IBSummary?

                public let postexpirationexcessc: IBSummary?

                public let postexpirationexcessf: IBSummary?

                public let postexpirationexcesss: IBSummary?

                public let postexpirationmargin: IBSummary?

                public let postexpirationmarginc: IBSummary?

                public let postexpirationmarginf: IBSummary?

                public let postexpirationmargins: IBSummary?

                public let previousdayequitywithloanvalue: IBSummary?

                public let previousdayequitywithloanvaluec: IBSummary?

                public let previousdayequitywithloanvaluef: IBSummary?

                public let previousdayequitywithloanvalues: IBSummary?

                public let segmenttitlec: IBSummary?

                public let segmenttitlef: IBSummary?

                public let segmenttitles: IBSummary?

                public let totalcashvalue: IBSummary?

                public let totalcashvaluec: IBSummary?

                public let totalcashvaluef: IBSummary?

                public let totalcashvalues: IBSummary?

                public let totaldebitcardpendingcharges: IBSummary?

                public let totaldebitcardpendingchargesc: IBSummary?

                public let totaldebitcardpendingchargesf: IBSummary?

                public let totaldebitcardpendingchargess: IBSummary?

                public let tradingtypef: IBSummary?

                public let tradingtypes: IBSummary?

                public init(accountready: IBSummary? = nil, accounttype: IBSummary? = nil, accruedcash: IBSummary? = nil, accruedcashc: IBSummary? = nil, accruedcashf: IBSummary? = nil, accruedcashs: IBSummary? = nil, accrueddividend: IBSummary? = nil, accrueddividendc: IBSummary? = nil, accrueddividendf: IBSummary? = nil, accrueddividends: IBSummary? = nil, availablefunds: IBSummary? = nil, availablefundsc: IBSummary? = nil, availablefundsf: IBSummary? = nil, availablefundss: IBSummary? = nil, billable: IBSummary? = nil, billablec: IBSummary? = nil, billablef: IBSummary? = nil, billables: IBSummary? = nil, buyingpower: IBSummary? = nil, cushion: IBSummary? = nil, daytradesremaining: IBSummary? = nil, daytradesremainingt1: IBSummary? = nil, daytradesremainingt2: IBSummary? = nil, daytradesremainingt3: IBSummary? = nil, daytradesremainingt4: IBSummary? = nil, equitywithloanvalue: IBSummary? = nil, equitywithloanvaluec: IBSummary? = nil, equitywithloanvaluef: IBSummary? = nil, equitywithloanvalues: IBSummary? = nil, excessliquidity: IBSummary? = nil, excessliquidityc: IBSummary? = nil, excessliquidityf: IBSummary? = nil, excessliquiditys: IBSummary? = nil, fullavailablefunds: IBSummary? = nil, fullavailablefundsc: IBSummary? = nil, fullavailablefundsf: IBSummary? = nil, fullavailablefundss: IBSummary? = nil, fullexcessliquidity: IBSummary? = nil, fullexcessliquidityc: IBSummary? = nil, fullexcessliquidityf: IBSummary? = nil, fullexcessliquiditys: IBSummary? = nil, fullinitmarginreq: IBSummary? = nil, fullinitmarginreqc: IBSummary? = nil, fullinitmarginreqf: IBSummary? = nil, fullinitmarginreqs: IBSummary? = nil, fullmaintmarginreq: IBSummary? = nil, fullmaintmarginreqc: IBSummary? = nil, fullmaintmarginreqf: IBSummary? = nil, fullmaintmarginreqs: IBSummary? = nil, grosspositionvalue: IBSummary? = nil, grosspositionvaluec: IBSummary? = nil, grosspositionvaluef: IBSummary? = nil, grosspositionvalues: IBSummary? = nil, guarantee: IBSummary? = nil, guaranteec: IBSummary? = nil, guaranteef: IBSummary? = nil, guarantees: IBSummary? = nil, highestseverity: IBSummary? = nil, highestseverityc: IBSummary? = nil, highestseverityf: IBSummary? = nil, highestseveritys: IBSummary? = nil, indianstockhaircut: IBSummary? = nil, indianstockhaircutc: IBSummary? = nil, indianstockhaircutf: IBSummary? = nil, indianstockhaircuts: IBSummary? = nil, initmarginreq: IBSummary? = nil, initmarginreqc: IBSummary? = nil, initmarginreqf: IBSummary? = nil, initmarginreqs: IBSummary? = nil, leverage: IBSummary? = nil, leveragec: IBSummary? = nil, leveragef: IBSummary? = nil, leverages: IBSummary? = nil, lookaheadavailablefunds: IBSummary? = nil, lookaheadavailablefundsc: IBSummary? = nil, lookaheadavailablefundsf: IBSummary? = nil, lookaheadavailablefundss: IBSummary? = nil, lookaheadexcessliquidity: IBSummary? = nil, lookaheadexcessliquidityc: IBSummary? = nil, lookaheadexcessliquidityf: IBSummary? = nil, lookaheadexcessliquiditys: IBSummary? = nil, lookaheadinitmarginreq: IBSummary? = nil, lookaheadinitmarginreqc: IBSummary? = nil, lookaheadinitmarginreqf: IBSummary? = nil, lookaheadinitmarginreqs: IBSummary? = nil, lookaheadmaintmarginreq: IBSummary? = nil, lookaheadmaintmarginreqc: IBSummary? = nil, lookaheadmaintmarginreqf: IBSummary? = nil, lookaheadmaintmarginreqs: IBSummary? = nil, lookaheadnextchange: IBSummary? = nil, maintmarginreq: IBSummary? = nil, maintmarginreqc: IBSummary? = nil, maintmarginreqf: IBSummary? = nil, maintmarginreqs: IBSummary? = nil, netliquidation: IBSummary? = nil, netliquidationc: IBSummary? = nil, netliquidationf: IBSummary? = nil, netliquidations: IBSummary? = nil, netliquidationuncertainty: IBSummary? = nil, nlvandmargininreview: IBSummary? = nil, pasharesvalue: IBSummary? = nil, pasharesvaluec: IBSummary? = nil, pasharesvaluef: IBSummary? = nil, pasharesvalues: IBSummary? = nil, postexpirationexcess: IBSummary? = nil, postexpirationexcessc: IBSummary? = nil, postexpirationexcessf: IBSummary? = nil, postexpirationexcesss: IBSummary? = nil, postexpirationmargin: IBSummary? = nil, postexpirationmarginc: IBSummary? = nil, postexpirationmarginf: IBSummary? = nil, postexpirationmargins: IBSummary? = nil, previousdayequitywithloanvalue: IBSummary? = nil, previousdayequitywithloanvaluec: IBSummary? = nil, previousdayequitywithloanvaluef: IBSummary? = nil, previousdayequitywithloanvalues: IBSummary? = nil, segmenttitlec: IBSummary? = nil, segmenttitlef: IBSummary? = nil, segmenttitles: IBSummary? = nil, totalcashvalue: IBSummary? = nil, totalcashvaluec: IBSummary? = nil, totalcashvaluef: IBSummary? = nil, totalcashvalues: IBSummary? = nil, totaldebitcardpendingcharges: IBSummary? = nil, totaldebitcardpendingchargesc: IBSummary? = nil, totaldebitcardpendingchargesf: IBSummary? = nil, totaldebitcardpendingchargess: IBSummary? = nil, tradingtypef: IBSummary? = nil, tradingtypes: IBSummary? = nil) {
                    self.accountready = accountready
                    self.accounttype = accounttype
                    self.accruedcash = accruedcash
                    self.accruedcashc = accruedcashc
                    self.accruedcashf = accruedcashf
                    self.accruedcashs = accruedcashs
                    self.accrueddividend = accrueddividend
                    self.accrueddividendc = accrueddividendc
                    self.accrueddividendf = accrueddividendf
                    self.accrueddividends = accrueddividends
                    self.availablefunds = availablefunds
                    self.availablefundsc = availablefundsc
                    self.availablefundsf = availablefundsf
                    self.availablefundss = availablefundss
                    self.billable = billable
                    self.billablec = billablec
                    self.billablef = billablef
                    self.billables = billables
                    self.buyingpower = buyingpower
                    self.cushion = cushion
                    self.daytradesremaining = daytradesremaining
                    self.daytradesremainingt1 = daytradesremainingt1
                    self.daytradesremainingt2 = daytradesremainingt2
                    self.daytradesremainingt3 = daytradesremainingt3
                    self.daytradesremainingt4 = daytradesremainingt4
                    self.equitywithloanvalue = equitywithloanvalue
                    self.equitywithloanvaluec = equitywithloanvaluec
                    self.equitywithloanvaluef = equitywithloanvaluef
                    self.equitywithloanvalues = equitywithloanvalues
                    self.excessliquidity = excessliquidity
                    self.excessliquidityc = excessliquidityc
                    self.excessliquidityf = excessliquidityf
                    self.excessliquiditys = excessliquiditys
                    self.fullavailablefunds = fullavailablefunds
                    self.fullavailablefundsc = fullavailablefundsc
                    self.fullavailablefundsf = fullavailablefundsf
                    self.fullavailablefundss = fullavailablefundss
                    self.fullexcessliquidity = fullexcessliquidity
                    self.fullexcessliquidityc = fullexcessliquidityc
                    self.fullexcessliquidityf = fullexcessliquidityf
                    self.fullexcessliquiditys = fullexcessliquiditys
                    self.fullinitmarginreq = fullinitmarginreq
                    self.fullinitmarginreqc = fullinitmarginreqc
                    self.fullinitmarginreqf = fullinitmarginreqf
                    self.fullinitmarginreqs = fullinitmarginreqs
                    self.fullmaintmarginreq = fullmaintmarginreq
                    self.fullmaintmarginreqc = fullmaintmarginreqc
                    self.fullmaintmarginreqf = fullmaintmarginreqf
                    self.fullmaintmarginreqs = fullmaintmarginreqs
                    self.grosspositionvalue = grosspositionvalue
                    self.grosspositionvaluec = grosspositionvaluec
                    self.grosspositionvaluef = grosspositionvaluef
                    self.grosspositionvalues = grosspositionvalues
                    self.guarantee = guarantee
                    self.guaranteec = guaranteec
                    self.guaranteef = guaranteef
                    self.guarantees = guarantees
                    self.highestseverity = highestseverity
                    self.highestseverityc = highestseverityc
                    self.highestseverityf = highestseverityf
                    self.highestseveritys = highestseveritys
                    self.indianstockhaircut = indianstockhaircut
                    self.indianstockhaircutc = indianstockhaircutc
                    self.indianstockhaircutf = indianstockhaircutf
                    self.indianstockhaircuts = indianstockhaircuts
                    self.initmarginreq = initmarginreq
                    self.initmarginreqc = initmarginreqc
                    self.initmarginreqf = initmarginreqf
                    self.initmarginreqs = initmarginreqs
                    self.leverage = leverage
                    self.leveragec = leveragec
                    self.leveragef = leveragef
                    self.leverages = leverages
                    self.lookaheadavailablefunds = lookaheadavailablefunds
                    self.lookaheadavailablefundsc = lookaheadavailablefundsc
                    self.lookaheadavailablefundsf = lookaheadavailablefundsf
                    self.lookaheadavailablefundss = lookaheadavailablefundss
                    self.lookaheadexcessliquidity = lookaheadexcessliquidity
                    self.lookaheadexcessliquidityc = lookaheadexcessliquidityc
                    self.lookaheadexcessliquidityf = lookaheadexcessliquidityf
                    self.lookaheadexcessliquiditys = lookaheadexcessliquiditys
                    self.lookaheadinitmarginreq = lookaheadinitmarginreq
                    self.lookaheadinitmarginreqc = lookaheadinitmarginreqc
                    self.lookaheadinitmarginreqf = lookaheadinitmarginreqf
                    self.lookaheadinitmarginreqs = lookaheadinitmarginreqs
                    self.lookaheadmaintmarginreq = lookaheadmaintmarginreq
                    self.lookaheadmaintmarginreqc = lookaheadmaintmarginreqc
                    self.lookaheadmaintmarginreqf = lookaheadmaintmarginreqf
                    self.lookaheadmaintmarginreqs = lookaheadmaintmarginreqs
                    self.lookaheadnextchange = lookaheadnextchange
                    self.maintmarginreq = maintmarginreq
                    self.maintmarginreqc = maintmarginreqc
                    self.maintmarginreqf = maintmarginreqf
                    self.maintmarginreqs = maintmarginreqs
                    self.netliquidation = netliquidation
                    self.netliquidationc = netliquidationc
                    self.netliquidationf = netliquidationf
                    self.netliquidations = netliquidations
                    self.netliquidationuncertainty = netliquidationuncertainty
                    self.nlvandmargininreview = nlvandmargininreview
                    self.pasharesvalue = pasharesvalue
                    self.pasharesvaluec = pasharesvaluec
                    self.pasharesvaluef = pasharesvaluef
                    self.pasharesvalues = pasharesvalues
                    self.postexpirationexcess = postexpirationexcess
                    self.postexpirationexcessc = postexpirationexcessc
                    self.postexpirationexcessf = postexpirationexcessf
                    self.postexpirationexcesss = postexpirationexcesss
                    self.postexpirationmargin = postexpirationmargin
                    self.postexpirationmarginc = postexpirationmarginc
                    self.postexpirationmarginf = postexpirationmarginf
                    self.postexpirationmargins = postexpirationmargins
                    self.previousdayequitywithloanvalue = previousdayequitywithloanvalue
                    self.previousdayequitywithloanvaluec = previousdayequitywithloanvaluec
                    self.previousdayequitywithloanvaluef = previousdayequitywithloanvaluef
                    self.previousdayequitywithloanvalues = previousdayequitywithloanvalues
                    self.segmenttitlec = segmenttitlec
                    self.segmenttitlef = segmenttitlef
                    self.segmenttitles = segmenttitles
                    self.totalcashvalue = totalcashvalue
                    self.totalcashvaluec = totalcashvaluec
                    self.totalcashvaluef = totalcashvaluef
                    self.totalcashvalues = totalcashvalues
                    self.totaldebitcardpendingcharges = totaldebitcardpendingcharges
                    self.totaldebitcardpendingchargesc = totaldebitcardpendingchargesc
                    self.totaldebitcardpendingchargesf = totaldebitcardpendingchargesf
                    self.totaldebitcardpendingchargess = totaldebitcardpendingchargess
                    self.tradingtypef = tradingtypef
                    self.tradingtypes = tradingtypes
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    accountready = try container.decodeIfPresent("accountready")
                    accounttype = try container.decodeIfPresent("accounttype")
                    accruedcash = try container.decodeIfPresent("accruedcash")
                    accruedcashc = try container.decodeIfPresent("accruedcash-c")
                    accruedcashf = try container.decodeIfPresent("accruedcash-f")
                    accruedcashs = try container.decodeIfPresent("accruedcash-s")
                    accrueddividend = try container.decodeIfPresent("accrueddividend")
                    accrueddividendc = try container.decodeIfPresent("accrueddividend-c")
                    accrueddividendf = try container.decodeIfPresent("accrueddividend-f")
                    accrueddividends = try container.decodeIfPresent("accrueddividend-s")
                    availablefunds = try container.decodeIfPresent("availablefunds")
                    availablefundsc = try container.decodeIfPresent("availablefunds-c")
                    availablefundsf = try container.decodeIfPresent("availablefunds-f")
                    availablefundss = try container.decodeIfPresent("availablefunds-s")
                    billable = try container.decodeIfPresent("billable")
                    billablec = try container.decodeIfPresent("billable-c")
                    billablef = try container.decodeIfPresent("billable-f")
                    billables = try container.decodeIfPresent("billable-s")
                    buyingpower = try container.decodeIfPresent("buyingpower")
                    cushion = try container.decodeIfPresent("cushion")
                    daytradesremaining = try container.decodeIfPresent("daytradesremaining")
                    daytradesremainingt1 = try container.decodeIfPresent("daytradesremainingt+1")
                    daytradesremainingt2 = try container.decodeIfPresent("daytradesremainingt+2")
                    daytradesremainingt3 = try container.decodeIfPresent("daytradesremainingt+3")
                    daytradesremainingt4 = try container.decodeIfPresent("daytradesremainingt+4")
                    equitywithloanvalue = try container.decodeIfPresent("equitywithloanvalue")
                    equitywithloanvaluec = try container.decodeIfPresent("equitywithloanvalue-c")
                    equitywithloanvaluef = try container.decodeIfPresent("equitywithloanvalue-f")
                    equitywithloanvalues = try container.decodeIfPresent("equitywithloanvalue-s")
                    excessliquidity = try container.decodeIfPresent("excessliquidity")
                    excessliquidityc = try container.decodeIfPresent("excessliquidity-c")
                    excessliquidityf = try container.decodeIfPresent("excessliquidity-f")
                    excessliquiditys = try container.decodeIfPresent("excessliquidity-s")
                    fullavailablefunds = try container.decodeIfPresent("fullavailablefunds")
                    fullavailablefundsc = try container.decodeIfPresent("fullavailablefunds-c")
                    fullavailablefundsf = try container.decodeIfPresent("fullavailablefunds-f")
                    fullavailablefundss = try container.decodeIfPresent("fullavailablefunds-s")
                    fullexcessliquidity = try container.decodeIfPresent("fullexcessliquidity")
                    fullexcessliquidityc = try container.decodeIfPresent("fullexcessliquidity-c")
                    fullexcessliquidityf = try container.decodeIfPresent("fullexcessliquidity-f")
                    fullexcessliquiditys = try container.decodeIfPresent("fullexcessliquidity-s")
                    fullinitmarginreq = try container.decodeIfPresent("fullinitmarginreq")
                    fullinitmarginreqc = try container.decodeIfPresent("fullinitmarginreq-c")
                    fullinitmarginreqf = try container.decodeIfPresent("fullinitmarginreq-f")
                    fullinitmarginreqs = try container.decodeIfPresent("fullinitmarginreq-s")
                    fullmaintmarginreq = try container.decodeIfPresent("fullmaintmarginreq")
                    fullmaintmarginreqc = try container.decodeIfPresent("fullmaintmarginreq-c")
                    fullmaintmarginreqf = try container.decodeIfPresent("fullmaintmarginreq-f")
                    fullmaintmarginreqs = try container.decodeIfPresent("fullmaintmarginreq-s")
                    grosspositionvalue = try container.decodeIfPresent("grosspositionvalue")
                    grosspositionvaluec = try container.decodeIfPresent("grosspositionvalue-c")
                    grosspositionvaluef = try container.decodeIfPresent("grosspositionvalue-f")
                    grosspositionvalues = try container.decodeIfPresent("grosspositionvalue-s")
                    guarantee = try container.decodeIfPresent("guarantee")
                    guaranteec = try container.decodeIfPresent("guarantee-c")
                    guaranteef = try container.decodeIfPresent("guarantee-f")
                    guarantees = try container.decodeIfPresent("guarantee-s")
                    highestseverity = try container.decodeIfPresent("highestseverity")
                    highestseverityc = try container.decodeIfPresent("highestseverity-c")
                    highestseverityf = try container.decodeIfPresent("highestseverity-f")
                    highestseveritys = try container.decodeIfPresent("highestseverity-s")
                    indianstockhaircut = try container.decodeIfPresent("indianstockhaircut")
                    indianstockhaircutc = try container.decodeIfPresent("indianstockhaircut-c")
                    indianstockhaircutf = try container.decodeIfPresent("indianstockhaircut-f")
                    indianstockhaircuts = try container.decodeIfPresent("indianstockhaircut-s")
                    initmarginreq = try container.decodeIfPresent("initmarginreq")
                    initmarginreqc = try container.decodeIfPresent("initmarginreq-c")
                    initmarginreqf = try container.decodeIfPresent("initmarginreq-f")
                    initmarginreqs = try container.decodeIfPresent("initmarginreq-s")
                    leverage = try container.decodeIfPresent("leverage")
                    leveragec = try container.decodeIfPresent("leverage-c")
                    leveragef = try container.decodeIfPresent("leverage-f")
                    leverages = try container.decodeIfPresent("leverage-s")
                    lookaheadavailablefunds = try container.decodeIfPresent("lookaheadavailablefunds")
                    lookaheadavailablefundsc = try container.decodeIfPresent("lookaheadavailablefunds-c")
                    lookaheadavailablefundsf = try container.decodeIfPresent("lookaheadavailablefunds-f")
                    lookaheadavailablefundss = try container.decodeIfPresent("lookaheadavailablefunds-s")
                    lookaheadexcessliquidity = try container.decodeIfPresent("lookaheadexcessliquidity")
                    lookaheadexcessliquidityc = try container.decodeIfPresent("lookaheadexcessliquidity-c")
                    lookaheadexcessliquidityf = try container.decodeIfPresent("lookaheadexcessliquidity-f")
                    lookaheadexcessliquiditys = try container.decodeIfPresent("lookaheadexcessliquidity-s")
                    lookaheadinitmarginreq = try container.decodeIfPresent("lookaheadinitmarginreq")
                    lookaheadinitmarginreqc = try container.decodeIfPresent("lookaheadinitmarginreq-c")
                    lookaheadinitmarginreqf = try container.decodeIfPresent("lookaheadinitmarginreq-f")
                    lookaheadinitmarginreqs = try container.decodeIfPresent("lookaheadinitmarginreq-s")
                    lookaheadmaintmarginreq = try container.decodeIfPresent("lookaheadmaintmarginreq")
                    lookaheadmaintmarginreqc = try container.decodeIfPresent("lookaheadmaintmarginreq-c")
                    lookaheadmaintmarginreqf = try container.decodeIfPresent("lookaheadmaintmarginreq-f")
                    lookaheadmaintmarginreqs = try container.decodeIfPresent("lookaheadmaintmarginreq-s")
                    lookaheadnextchange = try container.decodeIfPresent("lookaheadnextchange")
                    maintmarginreq = try container.decodeIfPresent("maintmarginreq")
                    maintmarginreqc = try container.decodeIfPresent("maintmarginreq-c")
                    maintmarginreqf = try container.decodeIfPresent("maintmarginreq-f")
                    maintmarginreqs = try container.decodeIfPresent("maintmarginreq-s")
                    netliquidation = try container.decodeIfPresent("netliquidation")
                    netliquidationc = try container.decodeIfPresent("netliquidation-c")
                    netliquidationf = try container.decodeIfPresent("netliquidation-f")
                    netliquidations = try container.decodeIfPresent("netliquidation-s")
                    netliquidationuncertainty = try container.decodeIfPresent("netliquidationuncertainty")
                    nlvandmargininreview = try container.decodeIfPresent("nlvandmargininreview")
                    pasharesvalue = try container.decodeIfPresent("pasharesvalue")
                    pasharesvaluec = try container.decodeIfPresent("pasharesvalue-c")
                    pasharesvaluef = try container.decodeIfPresent("pasharesvalue-f")
                    pasharesvalues = try container.decodeIfPresent("pasharesvalue-s")
                    postexpirationexcess = try container.decodeIfPresent("postexpirationexcess")
                    postexpirationexcessc = try container.decodeIfPresent("postexpirationexcess-c")
                    postexpirationexcessf = try container.decodeIfPresent("postexpirationexcess-f")
                    postexpirationexcesss = try container.decodeIfPresent("postexpirationexcess-s")
                    postexpirationmargin = try container.decodeIfPresent("postexpirationmargin")
                    postexpirationmarginc = try container.decodeIfPresent("postexpirationmargin-c")
                    postexpirationmarginf = try container.decodeIfPresent("postexpirationmargin-f")
                    postexpirationmargins = try container.decodeIfPresent("postexpirationmargin-s")
                    previousdayequitywithloanvalue = try container.decodeIfPresent("previousdayequitywithloanvalue")
                    previousdayequitywithloanvaluec = try container.decodeIfPresent("previousdayequitywithloanvalue-c")
                    previousdayequitywithloanvaluef = try container.decodeIfPresent("previousdayequitywithloanvalue-f")
                    previousdayequitywithloanvalues = try container.decodeIfPresent("previousdayequitywithloanvalue-s")
                    segmenttitlec = try container.decodeIfPresent("segmenttitle-c")
                    segmenttitlef = try container.decodeIfPresent("segmenttitle-f")
                    segmenttitles = try container.decodeIfPresent("segmenttitle-s")
                    totalcashvalue = try container.decodeIfPresent("totalcashvalue")
                    totalcashvaluec = try container.decodeIfPresent("totalcashvalue-c")
                    totalcashvaluef = try container.decodeIfPresent("totalcashvalue-f")
                    totalcashvalues = try container.decodeIfPresent("totalcashvalue-s")
                    totaldebitcardpendingcharges = try container.decodeIfPresent("totaldebitcardpendingcharges")
                    totaldebitcardpendingchargesc = try container.decodeIfPresent("totaldebitcardpendingcharges-c")
                    totaldebitcardpendingchargesf = try container.decodeIfPresent("totaldebitcardpendingcharges-f")
                    totaldebitcardpendingchargess = try container.decodeIfPresent("totaldebitcardpendingcharges-s")
                    tradingtypef = try container.decodeIfPresent("tradingtype-f")
                    tradingtypes = try container.decodeIfPresent("tradingtype-s")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(accountready, forKey: "accountready")
                    try container.encodeIfPresent(accounttype, forKey: "accounttype")
                    try container.encodeIfPresent(accruedcash, forKey: "accruedcash")
                    try container.encodeIfPresent(accruedcashc, forKey: "accruedcash-c")
                    try container.encodeIfPresent(accruedcashf, forKey: "accruedcash-f")
                    try container.encodeIfPresent(accruedcashs, forKey: "accruedcash-s")
                    try container.encodeIfPresent(accrueddividend, forKey: "accrueddividend")
                    try container.encodeIfPresent(accrueddividendc, forKey: "accrueddividend-c")
                    try container.encodeIfPresent(accrueddividendf, forKey: "accrueddividend-f")
                    try container.encodeIfPresent(accrueddividends, forKey: "accrueddividend-s")
                    try container.encodeIfPresent(availablefunds, forKey: "availablefunds")
                    try container.encodeIfPresent(availablefundsc, forKey: "availablefunds-c")
                    try container.encodeIfPresent(availablefundsf, forKey: "availablefunds-f")
                    try container.encodeIfPresent(availablefundss, forKey: "availablefunds-s")
                    try container.encodeIfPresent(billable, forKey: "billable")
                    try container.encodeIfPresent(billablec, forKey: "billable-c")
                    try container.encodeIfPresent(billablef, forKey: "billable-f")
                    try container.encodeIfPresent(billables, forKey: "billable-s")
                    try container.encodeIfPresent(buyingpower, forKey: "buyingpower")
                    try container.encodeIfPresent(cushion, forKey: "cushion")
                    try container.encodeIfPresent(daytradesremaining, forKey: "daytradesremaining")
                    try container.encodeIfPresent(daytradesremainingt1, forKey: "daytradesremainingt+1")
                    try container.encodeIfPresent(daytradesremainingt2, forKey: "daytradesremainingt+2")
                    try container.encodeIfPresent(daytradesremainingt3, forKey: "daytradesremainingt+3")
                    try container.encodeIfPresent(daytradesremainingt4, forKey: "daytradesremainingt+4")
                    try container.encodeIfPresent(equitywithloanvalue, forKey: "equitywithloanvalue")
                    try container.encodeIfPresent(equitywithloanvaluec, forKey: "equitywithloanvalue-c")
                    try container.encodeIfPresent(equitywithloanvaluef, forKey: "equitywithloanvalue-f")
                    try container.encodeIfPresent(equitywithloanvalues, forKey: "equitywithloanvalue-s")
                    try container.encodeIfPresent(excessliquidity, forKey: "excessliquidity")
                    try container.encodeIfPresent(excessliquidityc, forKey: "excessliquidity-c")
                    try container.encodeIfPresent(excessliquidityf, forKey: "excessliquidity-f")
                    try container.encodeIfPresent(excessliquiditys, forKey: "excessliquidity-s")
                    try container.encodeIfPresent(fullavailablefunds, forKey: "fullavailablefunds")
                    try container.encodeIfPresent(fullavailablefundsc, forKey: "fullavailablefunds-c")
                    try container.encodeIfPresent(fullavailablefundsf, forKey: "fullavailablefunds-f")
                    try container.encodeIfPresent(fullavailablefundss, forKey: "fullavailablefunds-s")
                    try container.encodeIfPresent(fullexcessliquidity, forKey: "fullexcessliquidity")
                    try container.encodeIfPresent(fullexcessliquidityc, forKey: "fullexcessliquidity-c")
                    try container.encodeIfPresent(fullexcessliquidityf, forKey: "fullexcessliquidity-f")
                    try container.encodeIfPresent(fullexcessliquiditys, forKey: "fullexcessliquidity-s")
                    try container.encodeIfPresent(fullinitmarginreq, forKey: "fullinitmarginreq")
                    try container.encodeIfPresent(fullinitmarginreqc, forKey: "fullinitmarginreq-c")
                    try container.encodeIfPresent(fullinitmarginreqf, forKey: "fullinitmarginreq-f")
                    try container.encodeIfPresent(fullinitmarginreqs, forKey: "fullinitmarginreq-s")
                    try container.encodeIfPresent(fullmaintmarginreq, forKey: "fullmaintmarginreq")
                    try container.encodeIfPresent(fullmaintmarginreqc, forKey: "fullmaintmarginreq-c")
                    try container.encodeIfPresent(fullmaintmarginreqf, forKey: "fullmaintmarginreq-f")
                    try container.encodeIfPresent(fullmaintmarginreqs, forKey: "fullmaintmarginreq-s")
                    try container.encodeIfPresent(grosspositionvalue, forKey: "grosspositionvalue")
                    try container.encodeIfPresent(grosspositionvaluec, forKey: "grosspositionvalue-c")
                    try container.encodeIfPresent(grosspositionvaluef, forKey: "grosspositionvalue-f")
                    try container.encodeIfPresent(grosspositionvalues, forKey: "grosspositionvalue-s")
                    try container.encodeIfPresent(guarantee, forKey: "guarantee")
                    try container.encodeIfPresent(guaranteec, forKey: "guarantee-c")
                    try container.encodeIfPresent(guaranteef, forKey: "guarantee-f")
                    try container.encodeIfPresent(guarantees, forKey: "guarantee-s")
                    try container.encodeIfPresent(highestseverity, forKey: "highestseverity")
                    try container.encodeIfPresent(highestseverityc, forKey: "highestseverity-c")
                    try container.encodeIfPresent(highestseverityf, forKey: "highestseverity-f")
                    try container.encodeIfPresent(highestseveritys, forKey: "highestseverity-s")
                    try container.encodeIfPresent(indianstockhaircut, forKey: "indianstockhaircut")
                    try container.encodeIfPresent(indianstockhaircutc, forKey: "indianstockhaircut-c")
                    try container.encodeIfPresent(indianstockhaircutf, forKey: "indianstockhaircut-f")
                    try container.encodeIfPresent(indianstockhaircuts, forKey: "indianstockhaircut-s")
                    try container.encodeIfPresent(initmarginreq, forKey: "initmarginreq")
                    try container.encodeIfPresent(initmarginreqc, forKey: "initmarginreq-c")
                    try container.encodeIfPresent(initmarginreqf, forKey: "initmarginreq-f")
                    try container.encodeIfPresent(initmarginreqs, forKey: "initmarginreq-s")
                    try container.encodeIfPresent(leverage, forKey: "leverage")
                    try container.encodeIfPresent(leveragec, forKey: "leverage-c")
                    try container.encodeIfPresent(leveragef, forKey: "leverage-f")
                    try container.encodeIfPresent(leverages, forKey: "leverage-s")
                    try container.encodeIfPresent(lookaheadavailablefunds, forKey: "lookaheadavailablefunds")
                    try container.encodeIfPresent(lookaheadavailablefundsc, forKey: "lookaheadavailablefunds-c")
                    try container.encodeIfPresent(lookaheadavailablefundsf, forKey: "lookaheadavailablefunds-f")
                    try container.encodeIfPresent(lookaheadavailablefundss, forKey: "lookaheadavailablefunds-s")
                    try container.encodeIfPresent(lookaheadexcessliquidity, forKey: "lookaheadexcessliquidity")
                    try container.encodeIfPresent(lookaheadexcessliquidityc, forKey: "lookaheadexcessliquidity-c")
                    try container.encodeIfPresent(lookaheadexcessliquidityf, forKey: "lookaheadexcessliquidity-f")
                    try container.encodeIfPresent(lookaheadexcessliquiditys, forKey: "lookaheadexcessliquidity-s")
                    try container.encodeIfPresent(lookaheadinitmarginreq, forKey: "lookaheadinitmarginreq")
                    try container.encodeIfPresent(lookaheadinitmarginreqc, forKey: "lookaheadinitmarginreq-c")
                    try container.encodeIfPresent(lookaheadinitmarginreqf, forKey: "lookaheadinitmarginreq-f")
                    try container.encodeIfPresent(lookaheadinitmarginreqs, forKey: "lookaheadinitmarginreq-s")
                    try container.encodeIfPresent(lookaheadmaintmarginreq, forKey: "lookaheadmaintmarginreq")
                    try container.encodeIfPresent(lookaheadmaintmarginreqc, forKey: "lookaheadmaintmarginreq-c")
                    try container.encodeIfPresent(lookaheadmaintmarginreqf, forKey: "lookaheadmaintmarginreq-f")
                    try container.encodeIfPresent(lookaheadmaintmarginreqs, forKey: "lookaheadmaintmarginreq-s")
                    try container.encodeIfPresent(lookaheadnextchange, forKey: "lookaheadnextchange")
                    try container.encodeIfPresent(maintmarginreq, forKey: "maintmarginreq")
                    try container.encodeIfPresent(maintmarginreqc, forKey: "maintmarginreq-c")
                    try container.encodeIfPresent(maintmarginreqf, forKey: "maintmarginreq-f")
                    try container.encodeIfPresent(maintmarginreqs, forKey: "maintmarginreq-s")
                    try container.encodeIfPresent(netliquidation, forKey: "netliquidation")
                    try container.encodeIfPresent(netliquidationc, forKey: "netliquidation-c")
                    try container.encodeIfPresent(netliquidationf, forKey: "netliquidation-f")
                    try container.encodeIfPresent(netliquidations, forKey: "netliquidation-s")
                    try container.encodeIfPresent(netliquidationuncertainty, forKey: "netliquidationuncertainty")
                    try container.encodeIfPresent(nlvandmargininreview, forKey: "nlvandmargininreview")
                    try container.encodeIfPresent(pasharesvalue, forKey: "pasharesvalue")
                    try container.encodeIfPresent(pasharesvaluec, forKey: "pasharesvalue-c")
                    try container.encodeIfPresent(pasharesvaluef, forKey: "pasharesvalue-f")
                    try container.encodeIfPresent(pasharesvalues, forKey: "pasharesvalue-s")
                    try container.encodeIfPresent(postexpirationexcess, forKey: "postexpirationexcess")
                    try container.encodeIfPresent(postexpirationexcessc, forKey: "postexpirationexcess-c")
                    try container.encodeIfPresent(postexpirationexcessf, forKey: "postexpirationexcess-f")
                    try container.encodeIfPresent(postexpirationexcesss, forKey: "postexpirationexcess-s")
                    try container.encodeIfPresent(postexpirationmargin, forKey: "postexpirationmargin")
                    try container.encodeIfPresent(postexpirationmarginc, forKey: "postexpirationmargin-c")
                    try container.encodeIfPresent(postexpirationmarginf, forKey: "postexpirationmargin-f")
                    try container.encodeIfPresent(postexpirationmargins, forKey: "postexpirationmargin-s")
                    try container.encodeIfPresent(previousdayequitywithloanvalue, forKey: "previousdayequitywithloanvalue")
                    try container.encodeIfPresent(previousdayequitywithloanvaluec, forKey: "previousdayequitywithloanvalue-c")
                    try container.encodeIfPresent(previousdayequitywithloanvaluef, forKey: "previousdayequitywithloanvalue-f")
                    try container.encodeIfPresent(previousdayequitywithloanvalues, forKey: "previousdayequitywithloanvalue-s")
                    try container.encodeIfPresent(segmenttitlec, forKey: "segmenttitle-c")
                    try container.encodeIfPresent(segmenttitlef, forKey: "segmenttitle-f")
                    try container.encodeIfPresent(segmenttitles, forKey: "segmenttitle-s")
                    try container.encodeIfPresent(totalcashvalue, forKey: "totalcashvalue")
                    try container.encodeIfPresent(totalcashvaluec, forKey: "totalcashvalue-c")
                    try container.encodeIfPresent(totalcashvaluef, forKey: "totalcashvalue-f")
                    try container.encodeIfPresent(totalcashvalues, forKey: "totalcashvalue-s")
                    try container.encodeIfPresent(totaldebitcardpendingcharges, forKey: "totaldebitcardpendingcharges")
                    try container.encodeIfPresent(totaldebitcardpendingchargesc, forKey: "totaldebitcardpendingcharges-c")
                    try container.encodeIfPresent(totaldebitcardpendingchargesf, forKey: "totaldebitcardpendingcharges-f")
                    try container.encodeIfPresent(totaldebitcardpendingchargess, forKey: "totaldebitcardpendingcharges-s")
                    try container.encodeIfPresent(tradingtypef, forKey: "tradingtype-f")
                    try container.encodeIfPresent(tradingtypes, forKey: "tradingtype-s")
                }

            }
            public typealias SuccessType = Status200

            /** returns an object containing account summary. The object contains multiple properties. A property is sufficed with -c if its provides commodity value, -s if it provides security value and -c if its UKL segment value */
            case status200(Status200)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
