//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension IBPortalApi.Alert {

    /**
    Get a list of available alerts

    The response will contain both active and inactive alerts, but it won't have MTA alert
    */
    public enum GetIserverAccountByAccountIdAlerts {

        public static let service = APIService<Response>(id: "getIserverAccountByAccountIdAlerts", tag: "Alert", method: "GET", path: "/iserver/account/{accountId}/alerts", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** account id */
                public var accountId: String

                public init(accountId: String) {
                    self.accountId = accountId
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetIserverAccountByAccountIdAlerts.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(accountId: String) {
                let options = Options(accountId: accountId)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "accountId" + "}", with: "\(self.options.accountId)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** The response will contain both active and inactive alerts, but it won't have MTA alert */
            public struct Status200: APIModel {

                /** account id */
                public let account: String?

                /** Value can only be 0 or 1, 1 means active */
                public let alertActive: Int?

                public let alertName: String?

                /** whether the alert can be repeatable or not, value can be 1 or 0. 1 means true */
                public let alertRepeatable: Int?

                /** whether the alert has been triggered or not */
                public let alertTriggered: Bool?

                public let orderId: Int?

                /** format, YYYYMMDD-HH:mm:ss, the time when you created the alert
             */
                public let orderTime: String?

                public init(account: String? = nil, alertActive: Int? = nil, alertName: String? = nil, alertRepeatable: Int? = nil, alertTriggered: Bool? = nil, orderId: Int? = nil, orderTime: String? = nil) {
                    self.account = account
                    self.alertActive = alertActive
                    self.alertName = alertName
                    self.alertRepeatable = alertRepeatable
                    self.alertTriggered = alertTriggered
                    self.orderId = orderId
                    self.orderTime = orderTime
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    account = try container.decodeIfPresent("account")
                    alertActive = try container.decodeIfPresent("alert_active")
                    alertName = try container.decodeIfPresent("alert_name")
                    alertRepeatable = try container.decodeIfPresent("alert_repeatable")
                    alertTriggered = try container.decodeIfPresent("alert_triggered")
                    orderId = try container.decodeIfPresent("order_id")
                    orderTime = try container.decodeIfPresent("order_time")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(account, forKey: "account")
                    try container.encodeIfPresent(alertActive, forKey: "alert_active")
                    try container.encodeIfPresent(alertName, forKey: "alert_name")
                    try container.encodeIfPresent(alertRepeatable, forKey: "alert_repeatable")
                    try container.encodeIfPresent(alertTriggered, forKey: "alert_triggered")
                    try container.encodeIfPresent(orderId, forKey: "order_id")
                    try container.encodeIfPresent(orderTime, forKey: "order_time")
                }

            }
            public typealias SuccessType = [Status200]

            /** returns an array of objects */
            case status200([Status200])

            public var success: [Status200]? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([Status200].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
