//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension IBPortalApi.Alert {

    /**
    Delete an alert

    Please be careful, if alertId is 0, it will delete all alerts
    */
    public enum DeleteIserverAccountByAccountIdAlertByAlertId {

        public static let service = APIService<Response>(id: "deleteIserverAccountByAccountIdAlertByAlertId", tag: "Alert", method: "DELETE", path: "/iserver/account/{accountId}/alert/{alertId}", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** account id */
                public var accountId: String

                /** alert id */
                public var alertId: String

                public init(accountId: String, alertId: String) {
                    self.accountId = accountId
                    self.alertId = alertId
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: DeleteIserverAccountByAccountIdAlertByAlertId.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(accountId: String, alertId: String) {
                let options = Options(accountId: accountId, alertId: alertId)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "accountId" + "}", with: "\(self.options.accountId)").replacingOccurrences(of: "{" + "alertId" + "}", with: "\(self.options.alertId)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Please be careful, if alertId is 0, it will delete all alerts */
            public struct Status200: APIModel {

                public let failureList: String?

                public let orderId: Int?

                public let orderStatus: String?

                public let requestId: Int?

                public let success: Bool?

                public let text: String?

                public init(failureList: String? = nil, orderId: Int? = nil, orderStatus: String? = nil, requestId: Int? = nil, success: Bool? = nil, text: String? = nil) {
                    self.failureList = failureList
                    self.orderId = orderId
                    self.orderStatus = orderStatus
                    self.requestId = requestId
                    self.success = success
                    self.text = text
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    failureList = try container.decodeIfPresent("failure_list")
                    orderId = try container.decodeIfPresent("order_id")
                    orderStatus = try container.decodeIfPresent("order_status")
                    requestId = try container.decodeIfPresent("request_id")
                    success = try container.decodeIfPresent("success")
                    text = try container.decodeIfPresent("text")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(failureList, forKey: "failure_list")
                    try container.encodeIfPresent(orderId, forKey: "order_id")
                    try container.encodeIfPresent(orderStatus, forKey: "order_status")
                    try container.encodeIfPresent(requestId, forKey: "request_id")
                    try container.encodeIfPresent(success, forKey: "success")
                    try container.encodeIfPresent(text, forKey: "text")
                }

            }
            public typealias SuccessType = Status200

            /** returns an object */
            case status200(Status200)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
