//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension IBPortalApi.Scanner {

    /** run scanner to get a list of contracts */
    public enum PostIserverScannerRun {

        public static let service = APIService<Response>(id: "postIserverScannerRun", tag: "Scanner", method: "POST", path: "/iserver/scanner/run", hasBody: true, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public var body: IBScannerParams

            public init(body: IBScannerParams, encoder: RequestEncoder? = nil) {
                self.body = body
                super.init(service: PostIserverScannerRun.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            public struct Status200: APIModel {

                public let availableChartPeriods: String?

                public let columnName: String?

                public let companyName: String?

                public let conId: Double?

                public let conidex: String?

                public let contractDescription1: String?

                public let listingExchange: String?

                public let secType: String?

                public let serverId: String?

                public let symbol: String?

                public init(availableChartPeriods: String? = nil, columnName: String? = nil, companyName: String? = nil, conId: Double? = nil, conidex: String? = nil, contractDescription1: String? = nil, listingExchange: String? = nil, secType: String? = nil, serverId: String? = nil, symbol: String? = nil) {
                    self.availableChartPeriods = availableChartPeriods
                    self.columnName = columnName
                    self.companyName = companyName
                    self.conId = conId
                    self.conidex = conidex
                    self.contractDescription1 = contractDescription1
                    self.listingExchange = listingExchange
                    self.secType = secType
                    self.serverId = serverId
                    self.symbol = symbol
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    availableChartPeriods = try container.decodeIfPresent("available_chart_periods")
                    columnName = try container.decodeIfPresent("column_name")
                    companyName = try container.decodeIfPresent("company_name")
                    conId = try container.decodeIfPresent("con_id")
                    conidex = try container.decodeIfPresent("conidex")
                    contractDescription1 = try container.decodeIfPresent("contract_description_1")
                    listingExchange = try container.decodeIfPresent("listing_exchange")
                    secType = try container.decodeIfPresent("sec_type")
                    serverId = try container.decodeIfPresent("server_id")
                    symbol = try container.decodeIfPresent("symbol")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(availableChartPeriods, forKey: "available_chart_periods")
                    try container.encodeIfPresent(columnName, forKey: "column_name")
                    try container.encodeIfPresent(companyName, forKey: "company_name")
                    try container.encodeIfPresent(conId, forKey: "con_id")
                    try container.encodeIfPresent(conidex, forKey: "conidex")
                    try container.encodeIfPresent(contractDescription1, forKey: "contract_description_1")
                    try container.encodeIfPresent(listingExchange, forKey: "listing_exchange")
                    try container.encodeIfPresent(secType, forKey: "sec_type")
                    try container.encodeIfPresent(serverId, forKey: "server_id")
                    try container.encodeIfPresent(symbol, forKey: "symbol")
                }

            }
            public typealias SuccessType = [Status200]

            /** returns an array */
            case status200([Status200])

            public var success: [Status200]? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([Status200].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
