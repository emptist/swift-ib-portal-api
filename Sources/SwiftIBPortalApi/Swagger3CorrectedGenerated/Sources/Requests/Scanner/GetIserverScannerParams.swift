//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension IBPortalApi.Scanner {

    /**
    get lists of available scanners

    Returns an object contains four lists contain all parameters for scanners
    */
    public enum GetIserverScannerParams {

        public static let service = APIService<Response>(id: "getIserverScannerParams", tag: "Scanner", method: "GET", path: "/iserver/scanner/params", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public init() {
                super.init(service: GetIserverScannerParams.service)
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Returns an object contains four lists contain all parameters for scanners */
            public struct Status200: APIModel {

                public let filterList: [FilterList]?

                public let instrumentList: [InstrumentList]?

                public let locationTree: [LocationTree]?

                public let scanTypeList: [ScanTypeList]?

                /** Returns an object contains four lists contain all parameters for scanners */
                public struct FilterList: APIModel {

                    public let code: String?

                    public let displayName: String?

                    public let group: String?

                    public let type: String?

                    public init(code: String? = nil, displayName: String? = nil, group: String? = nil, type: String? = nil) {
                        self.code = code
                        self.displayName = displayName
                        self.group = group
                        self.type = type
                    }

                    public init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: StringCodingKey.self)

                        code = try container.decodeIfPresent("code")
                        displayName = try container.decodeIfPresent("display_name")
                        group = try container.decodeIfPresent("group")
                        type = try container.decodeIfPresent("type")
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: StringCodingKey.self)

                        try container.encodeIfPresent(code, forKey: "code")
                        try container.encodeIfPresent(displayName, forKey: "display_name")
                        try container.encodeIfPresent(group, forKey: "group")
                        try container.encodeIfPresent(type, forKey: "type")
                    }

                }

                /** Returns an object contains four lists contain all parameters for scanners */
                public struct InstrumentList: APIModel {

                    public let displayName: String?

                    public let filters: [String]?

                    public let type: String?

                    public init(displayName: String? = nil, filters: [String]? = nil, type: String? = nil) {
                        self.displayName = displayName
                        self.filters = filters
                        self.type = type
                    }

                    public init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: StringCodingKey.self)

                        displayName = try container.decodeIfPresent("display_name")
                        filters = try container.decodeArrayIfPresent("filters")
                        type = try container.decodeIfPresent("type")
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: StringCodingKey.self)

                        try container.encodeIfPresent(displayName, forKey: "display_name")
                        try container.encodeIfPresent(filters, forKey: "filters")
                        try container.encodeIfPresent(type, forKey: "type")
                    }

                }

                /** Returns an object contains four lists contain all parameters for scanners */
                public struct LocationTree: APIModel {

                    public let displayName: String?

                    public let locations: [Locations]?

                    public let type: String?

                    /** Returns an object contains four lists contain all parameters for scanners */
                    public struct Locations: APIModel {

                        public let displayName: String?

                        public let type: String?

                        public init(displayName: String? = nil, type: String? = nil) {
                            self.displayName = displayName
                            self.type = type
                        }

                        public init(from decoder: Decoder) throws {
                            let container = try decoder.container(keyedBy: StringCodingKey.self)

                            displayName = try container.decodeIfPresent("display_name")
                            type = try container.decodeIfPresent("type")
                        }

                        public func encode(to encoder: Encoder) throws {
                            var container = encoder.container(keyedBy: StringCodingKey.self)

                            try container.encodeIfPresent(displayName, forKey: "display_name")
                            try container.encodeIfPresent(type, forKey: "type")
                        }

                    }

                    public init(displayName: String? = nil, locations: [Locations]? = nil, type: String? = nil) {
                        self.displayName = displayName
                        self.locations = locations
                        self.type = type
                    }

                    public init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: StringCodingKey.self)

                        displayName = try container.decodeIfPresent("display_name")
                        locations = try container.decodeArrayIfPresent("locations")
                        type = try container.decodeIfPresent("type")
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: StringCodingKey.self)

                        try container.encodeIfPresent(displayName, forKey: "display_name")
                        try container.encodeIfPresent(locations, forKey: "locations")
                        try container.encodeIfPresent(type, forKey: "type")
                    }

                }

                /** Returns an object contains four lists contain all parameters for scanners */
                public struct ScanTypeList: APIModel {

                    public let code: String?

                    public let displayName: String?

                    public let instruments: [String]?

                    public init(code: String? = nil, displayName: String? = nil, instruments: [String]? = nil) {
                        self.code = code
                        self.displayName = displayName
                        self.instruments = instruments
                    }

                    public init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: StringCodingKey.self)

                        code = try container.decodeIfPresent("code")
                        displayName = try container.decodeIfPresent("display_name")
                        instruments = try container.decodeArrayIfPresent("instruments")
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: StringCodingKey.self)

                        try container.encodeIfPresent(code, forKey: "code")
                        try container.encodeIfPresent(displayName, forKey: "display_name")
                        try container.encodeIfPresent(instruments, forKey: "instruments")
                    }

                }

                public init(filterList: [FilterList]? = nil, instrumentList: [InstrumentList]? = nil, locationTree: [LocationTree]? = nil, scanTypeList: [ScanTypeList]? = nil) {
                    self.filterList = filterList
                    self.instrumentList = instrumentList
                    self.locationTree = locationTree
                    self.scanTypeList = scanTypeList
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    filterList = try container.decodeArrayIfPresent("filter_list")
                    instrumentList = try container.decodeArrayIfPresent("instrument_list")
                    locationTree = try container.decodeArrayIfPresent("location_tree")
                    scanTypeList = try container.decodeArrayIfPresent("scan_type_list")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(filterList, forKey: "filter_list")
                    try container.encodeIfPresent(instrumentList, forKey: "instrument_list")
                    try container.encodeIfPresent(locationTree, forKey: "location_tree")
                    try container.encodeIfPresent(scanTypeList, forKey: "scan_type_list")
                }

            }
            public typealias SuccessType = Status200

            /** An object contains lists */
            case status200(Status200)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
