//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension IBPortalApi.MarketData {

    /**
    Market Data

    Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct, close, listing exchange.
See response fields for a list of available fields that can be request via fields argument.
The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot.
For derivative contracts the endpoint /iserver/secdef/search must be called first.
First /snapshot endpoint call for given conid will initiate the market data request. 
To receive all available fields the /snapshot endpoint will need to be called several times.
To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
    */
    public enum GetIserverMarketdataSnapshot {

        public static let service = APIService<Response>(id: "getIserverMarketdataSnapshot", tag: "Market Data", method: "GET", path: "/iserver/marketdata/snapshot", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** list of conids separated by comma */
                public var conids: String

                /** time period since which updates are required. uses epoch time with milliseconds. */
                public var since: Int?

                /** list of fields separated by comma */
                public var fields: String?

                public init(conids: String, since: Int? = nil, fields: String? = nil) {
                    self.conids = conids
                    self.since = since
                    self.fields = fields
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetIserverMarketdataSnapshot.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(conids: String, since: Int? = nil, fields: String? = nil) {
                let options = Options(conids: conids, since: since, fields: fields)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                params["conids"] = options.conids
                if let since = options.since {
                  params["since"] = since
                }
                if let fields = options.fields {
                  params["fields"] = fields
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct, close, listing exchange.
            See response fields for a list of available fields that can be request via fields argument.
            The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot.
            For derivative contracts the endpoint /iserver/secdef/search must be called first.
            First /snapshot endpoint call for given conid will initiate the market data request. 
            To receive all available fields the /snapshot endpoint will need to be called several times.
            To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
             */
            public struct Status200: APIModel {

                /** Last Price */
                public let _31: String?

                /** Symbol */
                public let _55: String?

                /** Text */
                public let _58: String?

                /** Exchange */
                public let _6004: String?

                /** Conid */
                public let _6008: String?

                /** Security Type */
                public let _6070: String?

                /** Months */
                public let _6072: String?

                /** Regular Expiry */
                public let _6073: String?

                /** Marker for market data delivery method (similar to request id) */
                public let _6119: String?

                /** Underlying Conid. Use /trsrv/secdef to get more information about the security */
                public let _6457: String?

                /** Market Data Availability. The field may contain two chars. The first char is the primary code: R = Realtime, D = Delayed,
            Z = Frozen, Y = Frozen Delayed. The second char is the secondary code: P = Snapshot Available, p = Consolidated.
             */
                public let _6509: String?

                /** High */
                public let _70: String?

                /** Company name */
                public let _7051: String?

                /** Last Size */
                public let _7059: String?

                /** Conid + Exchange */
                public let _7094: String?

                /** Low */
                public let _71: String?

                /** Position */
                public let _72: String?

                /** Contract Description */
                public let _7219: String?

                /** Contract Description */
                public let _7220: String?

                /** Listing Exchange */
                public let _7221: String?

                /** Industry */
                public let _7280: String?

                /** Category */
                public let _7281: String?

                /** Average Daily Volume */
                public let _7282: String?

                /** Historic Volume (30d) */
                public let _7284: String?

                /** Put/Call Ratio */
                public let _7285: String?

                /** Dividend Amount */
                public let _7286: String?

                /** Dividend Yield % */
                public let _7287: String?

                /** Ex-date of the dividend */
                public let _7288: String?

                /** Market Cap */
                public let _7289: String?

                /** P/E */
                public let _7290: String?

                /** EPS */
                public let _7291: String?

                /** Cost Basis */
                public let _7292: String?

                /** 52 Week High */
                public let _7293: String?

                /** 52 Week Low */
                public let _7294: String?

                /** Open Price */
                public let _7295: String?

                /** Close Price */
                public let _7296: String?

                /** Market Value */
                public let _73: String?

                /** Delta */
                public let _7308: String?

                /** Gamma */
                public let _7309: String?

                /** Theta */
                public let _7310: String?

                /** Vega */
                public let _7311: String?

                /** Average Price */
                public let _74: String?

                /** Unrealized PnL */
                public let _75: String?

                /** Formatted position */
                public let _76: String?

                /** Implied volatility of the option */
                public let _7633: String?

                /** Formatted Unrealized PnL */
                public let _77: String?

                /** Daily PnL */
                public let _78: String?

                /** Change Price */
                public let _82: String?

                /** Change Percent */
                public let _83: String?

                /** Bid Price */
                public let _84: String?

                /** Ask Size */
                public let _85: String?

                /** Ask Price */
                public let _86: String?

                /** Volume */
                public let _87: String?

                /** Bid Size */
                public let _88: String?

                public let updated: Int?

                public let conid: Int?

                public let serverId: String?

                public init(_31: String? = nil, _55: String? = nil, _58: String? = nil, _6004: String? = nil, _6008: String? = nil, _6070: String? = nil, _6072: String? = nil, _6073: String? = nil, _6119: String? = nil, _6457: String? = nil, _6509: String? = nil, _70: String? = nil, _7051: String? = nil, _7059: String? = nil, _7094: String? = nil, _71: String? = nil, _72: String? = nil, _7219: String? = nil, _7220: String? = nil, _7221: String? = nil, _7280: String? = nil, _7281: String? = nil, _7282: String? = nil, _7284: String? = nil, _7285: String? = nil, _7286: String? = nil, _7287: String? = nil, _7288: String? = nil, _7289: String? = nil, _7290: String? = nil, _7291: String? = nil, _7292: String? = nil, _7293: String? = nil, _7294: String? = nil, _7295: String? = nil, _7296: String? = nil, _73: String? = nil, _7308: String? = nil, _7309: String? = nil, _7310: String? = nil, _7311: String? = nil, _74: String? = nil, _75: String? = nil, _76: String? = nil, _7633: String? = nil, _77: String? = nil, _78: String? = nil, _82: String? = nil, _83: String? = nil, _84: String? = nil, _85: String? = nil, _86: String? = nil, _87: String? = nil, _88: String? = nil, updated: Int? = nil, conid: Int? = nil, serverId: String? = nil) {
                    self._31 = _31
                    self._55 = _55
                    self._58 = _58
                    self._6004 = _6004
                    self._6008 = _6008
                    self._6070 = _6070
                    self._6072 = _6072
                    self._6073 = _6073
                    self._6119 = _6119
                    self._6457 = _6457
                    self._6509 = _6509
                    self._70 = _70
                    self._7051 = _7051
                    self._7059 = _7059
                    self._7094 = _7094
                    self._71 = _71
                    self._72 = _72
                    self._7219 = _7219
                    self._7220 = _7220
                    self._7221 = _7221
                    self._7280 = _7280
                    self._7281 = _7281
                    self._7282 = _7282
                    self._7284 = _7284
                    self._7285 = _7285
                    self._7286 = _7286
                    self._7287 = _7287
                    self._7288 = _7288
                    self._7289 = _7289
                    self._7290 = _7290
                    self._7291 = _7291
                    self._7292 = _7292
                    self._7293 = _7293
                    self._7294 = _7294
                    self._7295 = _7295
                    self._7296 = _7296
                    self._73 = _73
                    self._7308 = _7308
                    self._7309 = _7309
                    self._7310 = _7310
                    self._7311 = _7311
                    self._74 = _74
                    self._75 = _75
                    self._76 = _76
                    self._7633 = _7633
                    self._77 = _77
                    self._78 = _78
                    self._82 = _82
                    self._83 = _83
                    self._84 = _84
                    self._85 = _85
                    self._86 = _86
                    self._87 = _87
                    self._88 = _88
                    self.updated = updated
                    self.conid = conid
                    self.serverId = serverId
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    _31 = try container.decodeIfPresent("31")
                    _55 = try container.decodeIfPresent("55")
                    _58 = try container.decodeIfPresent("58")
                    _6004 = try container.decodeIfPresent("6004")
                    _6008 = try container.decodeIfPresent("6008")
                    _6070 = try container.decodeIfPresent("6070")
                    _6072 = try container.decodeIfPresent("6072")
                    _6073 = try container.decodeIfPresent("6073")
                    _6119 = try container.decodeIfPresent("6119")
                    _6457 = try container.decodeIfPresent("6457")
                    _6509 = try container.decodeIfPresent("6509")
                    _70 = try container.decodeIfPresent("70")
                    _7051 = try container.decodeIfPresent("7051")
                    _7059 = try container.decodeIfPresent("7059")
                    _7094 = try container.decodeIfPresent("7094")
                    _71 = try container.decodeIfPresent("71")
                    _72 = try container.decodeIfPresent("72")
                    _7219 = try container.decodeIfPresent("7219")
                    _7220 = try container.decodeIfPresent("7220")
                    _7221 = try container.decodeIfPresent("7221")
                    _7280 = try container.decodeIfPresent("7280")
                    _7281 = try container.decodeIfPresent("7281")
                    _7282 = try container.decodeIfPresent("7282")
                    _7284 = try container.decodeIfPresent("7284")
                    _7285 = try container.decodeIfPresent("7285")
                    _7286 = try container.decodeIfPresent("7286")
                    _7287 = try container.decodeIfPresent("7287")
                    _7288 = try container.decodeIfPresent("7288")
                    _7289 = try container.decodeIfPresent("7289")
                    _7290 = try container.decodeIfPresent("7290")
                    _7291 = try container.decodeIfPresent("7291")
                    _7292 = try container.decodeIfPresent("7292")
                    _7293 = try container.decodeIfPresent("7293")
                    _7294 = try container.decodeIfPresent("7294")
                    _7295 = try container.decodeIfPresent("7295")
                    _7296 = try container.decodeIfPresent("7296")
                    _73 = try container.decodeIfPresent("73")
                    _7308 = try container.decodeIfPresent("7308")
                    _7309 = try container.decodeIfPresent("7309")
                    _7310 = try container.decodeIfPresent("7310")
                    _7311 = try container.decodeIfPresent("7311")
                    _74 = try container.decodeIfPresent("74")
                    _75 = try container.decodeIfPresent("75")
                    _76 = try container.decodeIfPresent("76")
                    _7633 = try container.decodeIfPresent("7633")
                    _77 = try container.decodeIfPresent("77")
                    _78 = try container.decodeIfPresent("78")
                    _82 = try container.decodeIfPresent("82")
                    _83 = try container.decodeIfPresent("83")
                    _84 = try container.decodeIfPresent("84")
                    _85 = try container.decodeIfPresent("85")
                    _86 = try container.decodeIfPresent("86")
                    _87 = try container.decodeIfPresent("87")
                    _88 = try container.decodeIfPresent("88")
                    updated = try container.decodeIfPresent("_updated")
                    conid = try container.decodeIfPresent("conid")
                    serverId = try container.decodeIfPresent("server_id")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(_31, forKey: "31")
                    try container.encodeIfPresent(_55, forKey: "55")
                    try container.encodeIfPresent(_58, forKey: "58")
                    try container.encodeIfPresent(_6004, forKey: "6004")
                    try container.encodeIfPresent(_6008, forKey: "6008")
                    try container.encodeIfPresent(_6070, forKey: "6070")
                    try container.encodeIfPresent(_6072, forKey: "6072")
                    try container.encodeIfPresent(_6073, forKey: "6073")
                    try container.encodeIfPresent(_6119, forKey: "6119")
                    try container.encodeIfPresent(_6457, forKey: "6457")
                    try container.encodeIfPresent(_6509, forKey: "6509")
                    try container.encodeIfPresent(_70, forKey: "70")
                    try container.encodeIfPresent(_7051, forKey: "7051")
                    try container.encodeIfPresent(_7059, forKey: "7059")
                    try container.encodeIfPresent(_7094, forKey: "7094")
                    try container.encodeIfPresent(_71, forKey: "71")
                    try container.encodeIfPresent(_72, forKey: "72")
                    try container.encodeIfPresent(_7219, forKey: "7219")
                    try container.encodeIfPresent(_7220, forKey: "7220")
                    try container.encodeIfPresent(_7221, forKey: "7221")
                    try container.encodeIfPresent(_7280, forKey: "7280")
                    try container.encodeIfPresent(_7281, forKey: "7281")
                    try container.encodeIfPresent(_7282, forKey: "7282")
                    try container.encodeIfPresent(_7284, forKey: "7284")
                    try container.encodeIfPresent(_7285, forKey: "7285")
                    try container.encodeIfPresent(_7286, forKey: "7286")
                    try container.encodeIfPresent(_7287, forKey: "7287")
                    try container.encodeIfPresent(_7288, forKey: "7288")
                    try container.encodeIfPresent(_7289, forKey: "7289")
                    try container.encodeIfPresent(_7290, forKey: "7290")
                    try container.encodeIfPresent(_7291, forKey: "7291")
                    try container.encodeIfPresent(_7292, forKey: "7292")
                    try container.encodeIfPresent(_7293, forKey: "7293")
                    try container.encodeIfPresent(_7294, forKey: "7294")
                    try container.encodeIfPresent(_7295, forKey: "7295")
                    try container.encodeIfPresent(_7296, forKey: "7296")
                    try container.encodeIfPresent(_73, forKey: "73")
                    try container.encodeIfPresent(_7308, forKey: "7308")
                    try container.encodeIfPresent(_7309, forKey: "7309")
                    try container.encodeIfPresent(_7310, forKey: "7310")
                    try container.encodeIfPresent(_7311, forKey: "7311")
                    try container.encodeIfPresent(_74, forKey: "74")
                    try container.encodeIfPresent(_75, forKey: "75")
                    try container.encodeIfPresent(_76, forKey: "76")
                    try container.encodeIfPresent(_7633, forKey: "7633")
                    try container.encodeIfPresent(_77, forKey: "77")
                    try container.encodeIfPresent(_78, forKey: "78")
                    try container.encodeIfPresent(_82, forKey: "82")
                    try container.encodeIfPresent(_83, forKey: "83")
                    try container.encodeIfPresent(_84, forKey: "84")
                    try container.encodeIfPresent(_85, forKey: "85")
                    try container.encodeIfPresent(_86, forKey: "86")
                    try container.encodeIfPresent(_87, forKey: "87")
                    try container.encodeIfPresent(_88, forKey: "88")
                    try container.encodeIfPresent(updated, forKey: "_updated")
                    try container.encodeIfPresent(conid, forKey: "conid")
                    try container.encodeIfPresent(serverId, forKey: "server_id")
                }

            }

            /** Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct, close, listing exchange.
            See response fields for a list of available fields that can be request via fields argument.
            The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot.
            For derivative contracts the endpoint /iserver/secdef/search must be called first.
            First /snapshot endpoint call for given conid will initiate the market data request. 
            To receive all available fields the /snapshot endpoint will need to be called several times.
            To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
             */
            public struct Status400: APIModel {

                public let error: String?

                public let statusCode: Int?

                public init(error: String? = nil, statusCode: Int? = nil) {
                    self.error = error
                    self.statusCode = statusCode
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    error = try container.decodeIfPresent("error")
                    statusCode = try container.decodeIfPresent("statusCode")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(error, forKey: "error")
                    try container.encodeIfPresent(statusCode, forKey: "statusCode")
                }

            }
            public typealias SuccessType = [Status200]

            /** Returns an array of objects */
            case status200([Status200])

            /** sent when accounts are not queried before sending this request */
            case status400(Status400)

            public var success: [Status200]? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: Status400? {
                switch self {
                case .status400(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<[Status200], Status400> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([Status200].self, from: data))
                case 400: self = try .status400(decoder.decode(Status400.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
