//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension IBPortalApi.FYI {

    /**
    Get a list of subscriptions

    Return the current choices of subscriptions, we can toggle the option
    */
    public enum GetFyiSettings {

        public static let service = APIService<Response>(id: "getFyiSettings", tag: "FYI", method: "GET", path: "/fyi/settings", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public init() {
                super.init(service: GetFyiSettings.service)
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Return the current choices of subscriptions, we can toggle the option
             */
            public struct Status200: APIModel {

                /** optional, if A doesn't exist, it means user can't toggle this option. 0-off, 1-on. */
                public let a: Int?

                /** fyi code */
                public let fc: String?

                /** detailed description */
                public let fd: String?

                /** title */
                public let fn: String?

                /** disclaimer read, 1 = yes, = 0 no. */
                public let h: Int?

                public init(a: Int? = nil, fc: String? = nil, fd: String? = nil, fn: String? = nil, h: Int? = nil) {
                    self.a = a
                    self.fc = fc
                    self.fd = fd
                    self.fn = fn
                    self.h = h
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    a = try container.decodeIfPresent("A")
                    fc = try container.decodeIfPresent("FC")
                    fd = try container.decodeIfPresent("FD")
                    fn = try container.decodeIfPresent("FN")
                    h = try container.decodeIfPresent("H")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(a, forKey: "A")
                    try container.encodeIfPresent(fc, forKey: "FC")
                    try container.encodeIfPresent(fd, forKey: "FD")
                    try container.encodeIfPresent(fn, forKey: "FN")
                    try container.encodeIfPresent(h, forKey: "H")
                }

            }
            public typealias SuccessType = [Status200]

            /** An array */
            case status200([Status200])

            public var success: [Status200]? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([Status200].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
