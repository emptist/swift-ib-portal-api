//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension IBPortalApi.FYI {

    /** Get disclaimer for a certain kind of fyi */
    public enum GetFyiDisclaimerByTypecode {

        public static let service = APIService<Response>(id: "getFyiDisclaimerByTypecode", tag: "FYI", method: "GET", path: "/fyi/disclaimer/{typecode}", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** fyi code, for example --M8, EA */
                public var typecode: String

                public init(typecode: String) {
                    self.typecode = typecode
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetFyiDisclaimerByTypecode.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(typecode: String) {
                let options = Options(typecode: typecode)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "typecode" + "}", with: "\(self.options.typecode)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            public struct Status200: APIModel {

                /** disclaimer message */
                public let dt: String?

                /** fyi code */
                public let fc: String?

                public init(dt: String? = nil, fc: String? = nil) {
                    self.dt = dt
                    self.fc = fc
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    dt = try container.decodeIfPresent("DT")
                    fc = try container.decodeIfPresent("FC")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(dt, forKey: "DT")
                    try container.encodeIfPresent(fc, forKey: "FC")
                }

            }
            public typealias SuccessType = Status200

            /** receives the disclaimer message */
            case status200(Status200)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
