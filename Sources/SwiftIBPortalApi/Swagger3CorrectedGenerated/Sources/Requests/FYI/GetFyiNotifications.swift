//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension IBPortalApi.FYI {

    /** Get a list of notifications */
    public enum GetFyiNotifications {

        public static let service = APIService<Response>(id: "getFyiNotifications", tag: "FYI", method: "GET", path: "/fyi/notifications", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** if set, don't set include */
                public var exclude: String?

                /** if set, don't set exclude */
                public var include: String?

                /** max number of fyis in response */
                public var max: String

                public init(exclude: String? = nil, include: String? = nil, max: String) {
                    self.exclude = exclude
                    self.include = include
                    self.max = max
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetFyiNotifications.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(exclude: String? = nil, include: String? = nil, max: String) {
                let options = Options(exclude: exclude, include: include, max: max)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let exclude = options.exclude {
                  params["exclude"] = exclude
                }
                if let include = options.include {
                  params["include"] = include
                }
                params["max"] = options.max
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = IBNotifications

            /** An array */
            case status200(IBNotifications)

            public var success: IBNotifications? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(IBNotifications.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
