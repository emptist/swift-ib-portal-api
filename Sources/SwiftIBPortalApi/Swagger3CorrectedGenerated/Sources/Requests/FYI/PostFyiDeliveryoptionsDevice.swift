//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension IBPortalApi.FYI {

    /** Enable/Disable device option */
    public enum PostFyiDeliveryoptionsDevice {

        public static let service = APIService<Response>(id: "postFyiDeliveryoptionsDevice", tag: "FYI", method: "POST", path: "/fyi/deliveryoptions/device", hasBody: true, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Body: APIModel {

                public let deviceId: String?

                public let devicename: String?

                public let enabled: Bool?

                public let uiName: String?

                public init(deviceId: String? = nil, devicename: String? = nil, enabled: Bool? = nil, uiName: String? = nil) {
                    self.deviceId = deviceId
                    self.devicename = devicename
                    self.enabled = enabled
                    self.uiName = uiName
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    deviceId = try container.decodeIfPresent("deviceId")
                    devicename = try container.decodeIfPresent("devicename")
                    enabled = try container.decodeIfPresent("enabled")
                    uiName = try container.decodeIfPresent("uiName")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(deviceId, forKey: "deviceId")
                    try container.encodeIfPresent(devicename, forKey: "devicename")
                    try container.encodeIfPresent(enabled, forKey: "enabled")
                    try container.encodeIfPresent(uiName, forKey: "uiName")
                }

            }

            public struct Options {

                public var deviceId: String?

                public var devicename: String?

                public var enabled: Bool?

                public var uiName: String?

                public init(deviceId: String? = nil, devicename: String? = nil, enabled: Bool? = nil, uiName: String? = nil) {
                    self.deviceId = deviceId
                    self.devicename = devicename
                    self.enabled = enabled
                    self.uiName = uiName
                }
            }

            public var options: Options

            public var body: Body

            public init(body: Body, options: Options, encoder: RequestEncoder? = nil) {
                self.body = body
                self.options = options
                super.init(service: PostFyiDeliveryoptionsDevice.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(deviceId: String? = nil, devicename: String? = nil, enabled: Bool? = nil, uiName: String? = nil, body: Body) {
                let options = Options(deviceId: deviceId, devicename: devicename, enabled: enabled, uiName: uiName)
                self.init(body: body, options: options)
            }

            public override var formParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let deviceId = options.deviceId {
                  params["deviceId"] = deviceId
                }
                if let devicename = options.devicename {
                  params["devicename"] = devicename
                }
                if let enabled = options.enabled {
                  params["enabled"] = enabled
                }
                if let uiName = options.uiName {
                  params["uiName"] = uiName
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            public struct Status200: APIModel {

                public let t: Int?

                public let v: Int?

                public init(t: Int? = nil, v: Int? = nil) {
                    self.t = t
                    self.v = v
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    t = try container.decodeIfPresent("T")
                    v = try container.decodeIfPresent("V")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(t, forKey: "T")
                    try container.encodeIfPresent(v, forKey: "V")
                }

            }
            public typealias SuccessType = Status200

            /** 200 means successful */
            case status200(Status200)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
