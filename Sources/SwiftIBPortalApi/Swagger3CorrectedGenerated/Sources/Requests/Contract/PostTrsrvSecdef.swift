//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension IBPortalApi.Contract {

    /**
    Secdef by Conid

    Returns a list of security definitions for the given conids
    */
    public enum PostTrsrvSecdef {

        public static let service = APIService<Response>(id: "postTrsrvSecdef", tag: "Contract", method: "POST", path: "/trsrv/secdef", hasBody: true, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            /** Returns a list of security definitions for the given conids */
            public struct Body: APIModel {

                public let conids: [Int]?

                public init(conids: [Int]? = nil) {
                    self.conids = conids
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    conids = try container.decodeArrayIfPresent("conids")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(conids, forKey: "conids")
                }

            }

            public struct Options {

                public var conids: [Int]?

                public init(conids: [Int]? = nil) {
                    self.conids = conids
                }
            }

            public var options: Options

            public var body: Body

            public init(body: Body, options: Options, encoder: RequestEncoder? = nil) {
                self.body = body
                self.options = options
                super.init(service: PostTrsrvSecdef.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(conids: [Int]? = nil, body: Body) {
                let options = Options(conids: conids)
                self.init(body: body, options: options)
            }

            public override var formParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let conids = options.conids {
                  params["conids"] = conids
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = IBSecdefs

            /** returns an array of secdef info */
            case status200(IBSecdefs)

            public var success: IBSecdefs? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(IBSecdefs.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
