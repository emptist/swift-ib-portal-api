//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension IBPortalApi.Contract {

    /**
    Contract Details

    Using the Contract Identifier get contract info. You can use this to prefill your order before you submit an order
    */
    public enum GetIserverContractByConidInfo {

        public static let service = APIService<Response>(id: "getIserverContractByConidInfo", tag: "Contract", method: "GET", path: "/iserver/contract/{conid}/info", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** contract id */
                public var conid: String

                public init(conid: String) {
                    self.conid = conid
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetIserverContractByConidInfo.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(conid: String) {
                let options = Options(conid: conid)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "conid" + "}", with: "\(self.options.conid)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = IBContract

            /** returns an object */
            case status200(IBContract)

            public var success: IBContract? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(IBContract.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
