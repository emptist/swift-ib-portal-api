//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension IBPortalApi.Session {

    /**
    Validate SSO

    Validates the current session for the SSO user
    */
    public enum GetSsoValidate {

        public static let service = APIService<Response>(id: "getSsoValidate", tag: "Session", method: "GET", path: "/sso/validate", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public init() {
                super.init(service: GetSsoValidate.service)
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Validates the current session for the SSO user */
            public struct Status200: APIModel {

                /** Time of session validation */
                public let authTime: Double?

                /** 1 for Live, 2 for Paper */
                public let loginType: Double?

                /** true if session was validated; false if not. */
                public let result: Bool?

                /** User ID */
                public let userId: Double?

                /** Username */
                public let userName: String?

                /** Time in milliseconds until session expires. Caller needs to call the again to re-validate session */
                public let expire: Double?

                public init(authTime: Double? = nil, loginType: Double? = nil, result: Bool? = nil, userId: Double? = nil, userName: String? = nil, expire: Double? = nil) {
                    self.authTime = authTime
                    self.loginType = loginType
                    self.result = result
                    self.userId = userId
                    self.userName = userName
                    self.expire = expire
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    authTime = try container.decodeIfPresent("AUTH_TIME")
                    loginType = try container.decodeIfPresent("LOGIN_TYPE")
                    result = try container.decodeIfPresent("RESULT")
                    userId = try container.decodeIfPresent("USER_ID")
                    userName = try container.decodeIfPresent("USER_NAME")
                    expire = try container.decodeIfPresent("expire")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(authTime, forKey: "AUTH_TIME")
                    try container.encodeIfPresent(loginType, forKey: "LOGIN_TYPE")
                    try container.encodeIfPresent(result, forKey: "RESULT")
                    try container.encodeIfPresent(userId, forKey: "USER_ID")
                    try container.encodeIfPresent(userName, forKey: "USER_NAME")
                    try container.encodeIfPresent(expire, forKey: "expire")
                }

            }
            public typealias SuccessType = Status200

            /** An Object */
            case status200(Status200)

            /** Authentication failed */
            case status401

            /** System failed */
            case status500

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status500: return 500
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status500: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                case 401: self = .status401
                case 500: self = .status500
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
