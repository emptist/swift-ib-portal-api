//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API.PortfolioAnalyst {

    /**
    Account Performance

    Returns the performance (MTM) for the given accounts, if more than one account is passed, the result is consolidated.
    */
    public enum PostPaPerformance {

        public static let service = APIService<Response>(id: "postPaPerformance", tag: "PortfolioAnalyst", method: "POST", path: "/pa/performance", hasBody: true, securityRequirements: [])

        /** Frequency of cumulative performance data points: 'D'aily, 'M'onthly,'Q'uarterly.
         */
        public enum Freq: String, Codable, Equatable, CaseIterable {
            case d = "D"
            case m = "M"
            case q = "Q"
        }

        public final class Request: APIRequest<Response> {

            /** Returns the performance (MTM) for the given accounts, if more than one account is passed, the result is consolidated. */
            public class Body: APIModel {

                /** Frequency of cumulative performance data points: 'D'aily, 'M'onthly,'Q'uarterly.
                 */
                public enum Freq: String, Codable, Equatable, CaseIterable {
                    case d = "D"
                    case m = "M"
                    case q = "Q"
                }

                public var acctIds: [String]?

                /** Frequency of cumulative performance data points: 'D'aily, 'M'onthly,'Q'uarterly.
             */
                public var freq: Freq?

                public init(acctIds: [String]? = nil, freq: Freq? = nil) {
                    self.acctIds = acctIds
                    self.freq = freq
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    acctIds = try container.decodeArrayIfPresent("acctIds")
                    freq = try container.decodeIfPresent("freq")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(acctIds, forKey: "acctIds")
                    try container.encodeIfPresent(freq, forKey: "freq")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Body else { return false }
                  guard self.acctIds == object.acctIds else { return false }
                  guard self.freq == object.freq else { return false }
                  return true
                }

                public static func == (lhs: Body, rhs: Body) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                public var acctIds: [String]?

                /** Frequency of cumulative performance data points: 'D'aily, 'M'onthly,'Q'uarterly.
 */
                public var freq: Freq?

                public init(acctIds: [String]? = nil, freq: Freq? = nil) {
                    self.acctIds = acctIds
                    self.freq = freq
                }
            }

            public var options: Options

            public var body: Body

            public init(body: Body, options: Options, encoder: RequestEncoder? = nil) {
                self.body = body
                self.options = options
                super.init(service: PostPaPerformance.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(acctIds: [String]? = nil, freq: Freq? = nil, body: Body) {
                let options = Options(acctIds: acctIds, freq: freq)
                self.init(body: body, options: options)
            }

            public override var formParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let acctIds = options.acctIds {
                  params["acctIds"] = acctIds
                }
                if let freq = options.freq?.encode() {
                  params["freq"] = freq
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Performance

            /** returns an object */
            case status200(Performance)

            public var success: Performance? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Performance.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
