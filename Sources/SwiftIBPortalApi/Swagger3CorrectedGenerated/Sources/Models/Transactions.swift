//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** account transactions */
public class Transactions: APIModel {

    /** same as request */
    public var currency: String?

    /** Period start date. Epoch time, GMT */
    public var from: Double?

    /** will always be getTransactions */
    public var id: String?

    /** Indicates whether current day and realtime data is included in the result */
    public var includesRealTime: Bool?

    /** Period end date. Epoch time, GMT */
    public var to: Double?

    /** Sorted by date descending */
    public var transactions: [Transaction]?

    public init(currency: String? = nil, from: Double? = nil, id: String? = nil, includesRealTime: Bool? = nil, to: Double? = nil, transactions: [Transaction]? = nil) {
        self.currency = currency
        self.from = from
        self.id = id
        self.includesRealTime = includesRealTime
        self.to = to
        self.transactions = transactions
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        currency = try container.decodeIfPresent("currency")
        from = try container.decodeIfPresent("from")
        id = try container.decodeIfPresent("id")
        includesRealTime = try container.decodeIfPresent("includesRealTime")
        to = try container.decodeIfPresent("to")
        transactions = try container.decodeArrayIfPresent("transactions")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(from, forKey: "from")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(includesRealTime, forKey: "includesRealTime")
        try container.encodeIfPresent(to, forKey: "to")
        try container.encodeIfPresent(transactions, forKey: "transactions")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Transactions else { return false }
      guard self.currency == object.currency else { return false }
      guard self.from == object.from else { return false }
      guard self.id == object.id else { return false }
      guard self.includesRealTime == object.includesRealTime else { return false }
      guard self.to == object.to else { return false }
      guard self.transactions == object.transactions else { return false }
      return true
    }

    public static func == (lhs: Transactions, rhs: Transactions) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
