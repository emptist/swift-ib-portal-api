//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Event: APIModel {

    public var conids: [String]?

    /** will be different for different event types */
    public var data: [String: Any]?

    /** for example 11662135 */
    public var eventKey: String?

    public var eventType: String?

    /** for exmple 20180817T040000+0000 */
    public var indexDate: String?

    public var indexDateType: String?

    /** for example RSE */
    public var source: String?

    public var status: String?

    public var tooltips: [String: Any]?

    public init(conids: [String]? = nil, data: [String: Any]? = nil, eventKey: String? = nil, eventType: String? = nil, indexDate: String? = nil, indexDateType: String? = nil, source: String? = nil, status: String? = nil, tooltips: [String: Any]? = nil) {
        self.conids = conids
        self.data = data
        self.eventKey = eventKey
        self.eventType = eventType
        self.indexDate = indexDate
        self.indexDateType = indexDateType
        self.source = source
        self.status = status
        self.tooltips = tooltips
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        conids = try container.decodeArrayIfPresent("conids")
        data = try container.decodeAnyIfPresent("data")
        eventKey = try container.decodeIfPresent("event_key")
        eventType = try container.decodeIfPresent("event_type")
        indexDate = try container.decodeIfPresent("index_date")
        indexDateType = try container.decodeIfPresent("index_date_type")
        source = try container.decodeIfPresent("source")
        status = try container.decodeIfPresent("status")
        tooltips = try container.decodeAnyIfPresent("tooltips")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(conids, forKey: "conids")
        try container.encodeAnyIfPresent(data, forKey: "data")
        try container.encodeIfPresent(eventKey, forKey: "event_key")
        try container.encodeIfPresent(eventType, forKey: "event_type")
        try container.encodeIfPresent(indexDate, forKey: "index_date")
        try container.encodeIfPresent(indexDateType, forKey: "index_date_type")
        try container.encodeIfPresent(source, forKey: "source")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeAnyIfPresent(tooltips, forKey: "tooltips")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Event else { return false }
      guard self.conids == object.conids else { return false }
      guard NSDictionary(dictionary: self.data ?? [:]).isEqual(to: object.data ?? [:]) else { return false }
      guard self.eventKey == object.eventKey else { return false }
      guard self.eventType == object.eventType else { return false }
      guard self.indexDate == object.indexDate else { return false }
      guard self.indexDateType == object.indexDateType else { return false }
      guard self.source == object.source else { return false }
      guard self.status == object.status else { return false }
      guard NSDictionary(dictionary: self.tooltips ?? [:]).isEqual(to: object.tooltips ?? [:]) else { return false }
      return true
    }

    public static func == (lhs: Event, rhs: Event) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
