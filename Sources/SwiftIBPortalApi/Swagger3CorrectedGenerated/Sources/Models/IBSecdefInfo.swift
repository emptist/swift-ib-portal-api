//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Contains some basic info of contract */
public struct IBSecdefInfo: APIModel {

    public let conid: Double?

    /** Annual interest rate paid on a bond */
    public let coupon: String?

    /** Currency the contract trades in */
    public let currency: String?

    /** Committee on Uniform Securities Identification Procedures number */
    public let cusip: String?

    /** Formatted symbol */
    public let desc1: String?

    /** Formatted expiration, strike and right */
    public let desc2: String?

    public let exchange: String?

    public let listingExchange: String?

    /** Format YYYYMMDD, the date on which the underlying transaction settles if the option is exercised */
    public let maturityDate: String?

    /** total premium paid or received for an option contract */
    public let multiplier: String?

    /** C = Call Option, P = Put Option */
    public let right: String?

    public let secType: String?

    /** The strike price also known as exercise price */
    public let strike: String?

    /** For example IBKR */
    public let symbol: String?

    public let tradingClass: String?

    public let validExchanges: String?

    public init(conid: Double? = nil, coupon: String? = nil, currency: String? = nil, cusip: String? = nil, desc1: String? = nil, desc2: String? = nil, exchange: String? = nil, listingExchange: String? = nil, maturityDate: String? = nil, multiplier: String? = nil, right: String? = nil, secType: String? = nil, strike: String? = nil, symbol: String? = nil, tradingClass: String? = nil, validExchanges: String? = nil) {
        self.conid = conid
        self.coupon = coupon
        self.currency = currency
        self.cusip = cusip
        self.desc1 = desc1
        self.desc2 = desc2
        self.exchange = exchange
        self.listingExchange = listingExchange
        self.maturityDate = maturityDate
        self.multiplier = multiplier
        self.right = right
        self.secType = secType
        self.strike = strike
        self.symbol = symbol
        self.tradingClass = tradingClass
        self.validExchanges = validExchanges
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        conid = try container.decodeIfPresent("conid")
        coupon = try container.decodeIfPresent("coupon")
        currency = try container.decodeIfPresent("currency")
        cusip = try container.decodeIfPresent("cusip")
        desc1 = try container.decodeIfPresent("desc1")
        desc2 = try container.decodeIfPresent("desc2")
        exchange = try container.decodeIfPresent("exchange")
        listingExchange = try container.decodeIfPresent("listingExchange")
        maturityDate = try container.decodeIfPresent("maturityDate")
        multiplier = try container.decodeIfPresent("multiplier")
        right = try container.decodeIfPresent("right")
        secType = try container.decodeIfPresent("secType")
        strike = try container.decodeIfPresent("strike")
        symbol = try container.decodeIfPresent("symbol")
        tradingClass = try container.decodeIfPresent("tradingClass")
        validExchanges = try container.decodeIfPresent("validExchanges")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(conid, forKey: "conid")
        try container.encodeIfPresent(coupon, forKey: "coupon")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(cusip, forKey: "cusip")
        try container.encodeIfPresent(desc1, forKey: "desc1")
        try container.encodeIfPresent(desc2, forKey: "desc2")
        try container.encodeIfPresent(exchange, forKey: "exchange")
        try container.encodeIfPresent(listingExchange, forKey: "listingExchange")
        try container.encodeIfPresent(maturityDate, forKey: "maturityDate")
        try container.encodeIfPresent(multiplier, forKey: "multiplier")
        try container.encodeIfPresent(right, forKey: "right")
        try container.encodeIfPresent(secType, forKey: "secType")
        try container.encodeIfPresent(strike, forKey: "strike")
        try container.encodeIfPresent(symbol, forKey: "symbol")
        try container.encodeIfPresent(tradingClass, forKey: "tradingClass")
        try container.encodeIfPresent(validExchanges, forKey: "validExchanges")
    }

}
