//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** account transactions */
public struct IBTransactions: APIModel {

    /** same as request */
    public let currency: String?

    /** Period start date. Epoch time, GMT */
    public let from: Double?

    /** will always be getTransactions */
    public let id: String?

    /** Indicates whether current day and realtime data is included in the result */
    public let includesRealTime: Bool?

    /** Period end date. Epoch time, GMT */
    public let to: Double?

    /** Sorted by date descending */
    public let transactions: [IBTransaction]?

    public init(currency: String? = nil, from: Double? = nil, id: String? = nil, includesRealTime: Bool? = nil, to: Double? = nil, transactions: [IBTransaction]? = nil) {
        self.currency = currency
        self.from = from
        self.id = id
        self.includesRealTime = includesRealTime
        self.to = to
        self.transactions = transactions
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        currency = try container.decodeIfPresent("currency")
        from = try container.decodeIfPresent("from")
        id = try container.decodeIfPresent("id")
        includesRealTime = try container.decodeIfPresent("includesRealTime")
        to = try container.decodeIfPresent("to")
        transactions = try container.decodeArrayIfPresent("transactions")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(from, forKey: "from")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(includesRealTime, forKey: "includesRealTime")
        try container.encodeIfPresent(to, forKey: "to")
        try container.encodeIfPresent(transactions, forKey: "transactions")
    }

}
