//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct IBScannerParams: APIModel {

    public let filter: [Filter]?

    /** for example-STK */
    public let instrument: String?

    public let location: String?

    public let size: String?

    /** for example-TOP_PERC_GAIN */
    public let type: String?

    public struct Filter: APIModel {

        public let code: String?

        public let value: Double?

        public init(code: String? = nil, value: Double? = nil) {
            self.code = code
            self.value = value
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            code = try container.decodeIfPresent("code")
            value = try container.decodeIfPresent("value")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(code, forKey: "code")
            try container.encodeIfPresent(value, forKey: "value")
        }

    }

    public init(filter: [Filter]? = nil, instrument: String? = nil, location: String? = nil, size: String? = nil, type: String? = nil) {
        self.filter = filter
        self.instrument = instrument
        self.location = location
        self.size = size
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        filter = try container.decodeArrayIfPresent("filter")
        instrument = try container.decodeIfPresent("instrument")
        location = try container.decodeIfPresent("location")
        size = try container.decodeIfPresent("size")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(filter, forKey: "filter")
        try container.encodeIfPresent(instrument, forKey: "instrument")
        try container.encodeIfPresent(location, forKey: "location")
        try container.encodeIfPresent(size, forKey: "size")
        try container.encodeIfPresent(type, forKey: "type")
    }

}
