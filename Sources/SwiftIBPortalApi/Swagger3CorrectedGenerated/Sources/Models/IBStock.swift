//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** future contract information */
public struct IBStock: APIModel {

    public let assetClass: String?

    /** company name in Chinese */
    public let chineseName: String?

    /** array of contracts from different exchanges */
    public let contracts: [Contracts]?

    /** company name */
    public let name: String?

    /** future contract information */
    public struct Contracts: APIModel {

        /** conid of the stock contract */
        public let conid: Int?

        public let exchange: String?

        public init(conid: Int? = nil, exchange: String? = nil) {
            self.conid = conid
            self.exchange = exchange
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            conid = try container.decodeIfPresent("conid")
            exchange = try container.decodeIfPresent("exchange")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(conid, forKey: "conid")
            try container.encodeIfPresent(exchange, forKey: "exchange")
        }

    }

    public init(assetClass: String? = nil, chineseName: String? = nil, contracts: [Contracts]? = nil, name: String? = nil) {
        self.assetClass = assetClass
        self.chineseName = chineseName
        self.contracts = contracts
        self.name = name
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        assetClass = try container.decodeIfPresent("assetClass")
        chineseName = try container.decodeIfPresent("chineseName")
        contracts = try container.decodeArrayIfPresent("contracts")
        name = try container.decodeIfPresent("name")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(assetClass, forKey: "assetClass")
        try container.encodeIfPresent(chineseName, forKey: "chineseName")
        try container.encodeIfPresent(contracts, forKey: "contracts")
        try container.encodeIfPresent(name, forKey: "name")
    }

}
