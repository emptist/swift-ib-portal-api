//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Ledger: APIModel {

    public var acctcode: String?

    public var cashbalance: Double?

    public var commoditymarketvalue: Double?

    public var corporatebondsmarketvalue: Double?

    public var currency: String?

    public var exchangerate: Double?

    public var funds: Double?

    public var futuremarketvalue: Double?

    public var interest: Double?

    public var issueroptionsmarketvalue: Double?

    public var key: String?

    public var moneyfunds: Double?

    public var netliquidationvalue: Double?

    public var realizedpnl: Double?

    public var sessionid: Int?

    public var settledcash: Double?

    public var severity: Int?

    public var stockmarketvalue: Double?

    public var timestamp: Int?

    public var unrealizedpnl: Double?

    public var warrantsmarketvalue: Double?

    public init(acctcode: String? = nil, cashbalance: Double? = nil, commoditymarketvalue: Double? = nil, corporatebondsmarketvalue: Double? = nil, currency: String? = nil, exchangerate: Double? = nil, funds: Double? = nil, futuremarketvalue: Double? = nil, interest: Double? = nil, issueroptionsmarketvalue: Double? = nil, key: String? = nil, moneyfunds: Double? = nil, netliquidationvalue: Double? = nil, realizedpnl: Double? = nil, sessionid: Int? = nil, settledcash: Double? = nil, severity: Int? = nil, stockmarketvalue: Double? = nil, timestamp: Int? = nil, unrealizedpnl: Double? = nil, warrantsmarketvalue: Double? = nil) {
        self.acctcode = acctcode
        self.cashbalance = cashbalance
        self.commoditymarketvalue = commoditymarketvalue
        self.corporatebondsmarketvalue = corporatebondsmarketvalue
        self.currency = currency
        self.exchangerate = exchangerate
        self.funds = funds
        self.futuremarketvalue = futuremarketvalue
        self.interest = interest
        self.issueroptionsmarketvalue = issueroptionsmarketvalue
        self.key = key
        self.moneyfunds = moneyfunds
        self.netliquidationvalue = netliquidationvalue
        self.realizedpnl = realizedpnl
        self.sessionid = sessionid
        self.settledcash = settledcash
        self.severity = severity
        self.stockmarketvalue = stockmarketvalue
        self.timestamp = timestamp
        self.unrealizedpnl = unrealizedpnl
        self.warrantsmarketvalue = warrantsmarketvalue
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        acctcode = try container.decodeIfPresent("acctcode")
        cashbalance = try container.decodeIfPresent("cashbalance")
        commoditymarketvalue = try container.decodeIfPresent("commoditymarketvalue")
        corporatebondsmarketvalue = try container.decodeIfPresent("corporatebondsmarketvalue")
        currency = try container.decodeIfPresent("currency")
        exchangerate = try container.decodeIfPresent("exchangerate")
        funds = try container.decodeIfPresent("funds")
        futuremarketvalue = try container.decodeIfPresent("futuremarketvalue")
        interest = try container.decodeIfPresent("interest")
        issueroptionsmarketvalue = try container.decodeIfPresent("issueroptionsmarketvalue")
        key = try container.decodeIfPresent("key")
        moneyfunds = try container.decodeIfPresent("moneyfunds")
        netliquidationvalue = try container.decodeIfPresent("netliquidationvalue")
        realizedpnl = try container.decodeIfPresent("realizedpnl")
        sessionid = try container.decodeIfPresent("sessionid")
        settledcash = try container.decodeIfPresent("settledcash")
        severity = try container.decodeIfPresent("severity")
        stockmarketvalue = try container.decodeIfPresent("stockmarketvalue")
        timestamp = try container.decodeIfPresent("timestamp")
        unrealizedpnl = try container.decodeIfPresent("unrealizedpnl")
        warrantsmarketvalue = try container.decodeIfPresent("warrantsmarketvalue")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(acctcode, forKey: "acctcode")
        try container.encodeIfPresent(cashbalance, forKey: "cashbalance")
        try container.encodeIfPresent(commoditymarketvalue, forKey: "commoditymarketvalue")
        try container.encodeIfPresent(corporatebondsmarketvalue, forKey: "corporatebondsmarketvalue")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(exchangerate, forKey: "exchangerate")
        try container.encodeIfPresent(funds, forKey: "funds")
        try container.encodeIfPresent(futuremarketvalue, forKey: "futuremarketvalue")
        try container.encodeIfPresent(interest, forKey: "interest")
        try container.encodeIfPresent(issueroptionsmarketvalue, forKey: "issueroptionsmarketvalue")
        try container.encodeIfPresent(key, forKey: "key")
        try container.encodeIfPresent(moneyfunds, forKey: "moneyfunds")
        try container.encodeIfPresent(netliquidationvalue, forKey: "netliquidationvalue")
        try container.encodeIfPresent(realizedpnl, forKey: "realizedpnl")
        try container.encodeIfPresent(sessionid, forKey: "sessionid")
        try container.encodeIfPresent(settledcash, forKey: "settledcash")
        try container.encodeIfPresent(severity, forKey: "severity")
        try container.encodeIfPresent(stockmarketvalue, forKey: "stockmarketvalue")
        try container.encodeIfPresent(timestamp, forKey: "timestamp")
        try container.encodeIfPresent(unrealizedpnl, forKey: "unrealizedpnl")
        try container.encodeIfPresent(warrantsmarketvalue, forKey: "warrantsmarketvalue")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Ledger else { return false }
      guard self.acctcode == object.acctcode else { return false }
      guard self.cashbalance == object.cashbalance else { return false }
      guard self.commoditymarketvalue == object.commoditymarketvalue else { return false }
      guard self.corporatebondsmarketvalue == object.corporatebondsmarketvalue else { return false }
      guard self.currency == object.currency else { return false }
      guard self.exchangerate == object.exchangerate else { return false }
      guard self.funds == object.funds else { return false }
      guard self.futuremarketvalue == object.futuremarketvalue else { return false }
      guard self.interest == object.interest else { return false }
      guard self.issueroptionsmarketvalue == object.issueroptionsmarketvalue else { return false }
      guard self.key == object.key else { return false }
      guard self.moneyfunds == object.moneyfunds else { return false }
      guard self.netliquidationvalue == object.netliquidationvalue else { return false }
      guard self.realizedpnl == object.realizedpnl else { return false }
      guard self.sessionid == object.sessionid else { return false }
      guard self.settledcash == object.settledcash else { return false }
      guard self.severity == object.severity else { return false }
      guard self.stockmarketvalue == object.stockmarketvalue else { return false }
      guard self.timestamp == object.timestamp else { return false }
      guard self.unrealizedpnl == object.unrealizedpnl else { return false }
      guard self.warrantsmarketvalue == object.warrantsmarketvalue else { return false }
      return true
    }

    public static func == (lhs: Ledger, rhs: Ledger) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
