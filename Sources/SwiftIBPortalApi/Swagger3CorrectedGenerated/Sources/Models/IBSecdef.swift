//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** security definition information */
public struct IBSecdef: APIModel {

    public let assetClass: String?

    public let conid: Int?

    public let expiry: String?

    public let fullName: String?

    public let group: String?

    public let lastTradingDay: String?

    public let name: String?

    public let pageSize: Int?

    public let putOrCall: String?

    public let sector: String?

    public let sectorGroup: String?

    public let strike: Double?

    public let ticker: String?

    public let undConid: Int?

    public init(assetClass: String? = nil, conid: Int? = nil, expiry: String? = nil, fullName: String? = nil, group: String? = nil, lastTradingDay: String? = nil, name: String? = nil, pageSize: Int? = nil, putOrCall: String? = nil, sector: String? = nil, sectorGroup: String? = nil, strike: Double? = nil, ticker: String? = nil, undConid: Int? = nil) {
        self.assetClass = assetClass
        self.conid = conid
        self.expiry = expiry
        self.fullName = fullName
        self.group = group
        self.lastTradingDay = lastTradingDay
        self.name = name
        self.pageSize = pageSize
        self.putOrCall = putOrCall
        self.sector = sector
        self.sectorGroup = sectorGroup
        self.strike = strike
        self.ticker = ticker
        self.undConid = undConid
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        assetClass = try container.decodeIfPresent("assetClass")
        conid = try container.decodeIfPresent("conid")
        expiry = try container.decodeIfPresent("expiry")
        fullName = try container.decodeIfPresent("fullName")
        group = try container.decodeIfPresent("group")
        lastTradingDay = try container.decodeIfPresent("lastTradingDay")
        name = try container.decodeIfPresent("name")
        pageSize = try container.decodeIfPresent("pageSize")
        putOrCall = try container.decodeIfPresent("putOrCall")
        sector = try container.decodeIfPresent("sector")
        sectorGroup = try container.decodeIfPresent("sectorGroup")
        strike = try container.decodeIfPresent("strike")
        ticker = try container.decodeIfPresent("ticker")
        undConid = try container.decodeIfPresent("undConid")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(assetClass, forKey: "assetClass")
        try container.encodeIfPresent(conid, forKey: "conid")
        try container.encodeIfPresent(expiry, forKey: "expiry")
        try container.encodeIfPresent(fullName, forKey: "fullName")
        try container.encodeIfPresent(group, forKey: "group")
        try container.encodeIfPresent(lastTradingDay, forKey: "lastTradingDay")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(pageSize, forKey: "pageSize")
        try container.encodeIfPresent(putOrCall, forKey: "putOrCall")
        try container.encodeIfPresent(sector, forKey: "sector")
        try container.encodeIfPresent(sectorGroup, forKey: "sectorGroup")
        try container.encodeIfPresent(strike, forKey: "strike")
        try container.encodeIfPresent(ticker, forKey: "ticker")
        try container.encodeIfPresent(undConid, forKey: "undConid")
    }

}
