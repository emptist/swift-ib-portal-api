//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** allocation */
public struct IBAllocation: APIModel {

    /** portfolio allocation by asset class */
    public let assetClass: AssetClass?

    /** portfolio allocation by group */
    public let group: Group?

    /** portfolio allocation by sector */
    public let sector: Sector?

    /** portfolio allocation by asset class */
    public struct AssetClass: APIModel {

        /** long positions allocation */
        public let long: Long?

        /** short positions allocation */
        public let short: Short?

        /** long positions allocation */
        public struct Long: APIModel {

            public let bond: Double?

            public let cash: Double?

            public let fut: Double?

            public let opt: Double?

            public let stk: Double?

            public let war: Double?

            public init(bond: Double? = nil, cash: Double? = nil, fut: Double? = nil, opt: Double? = nil, stk: Double? = nil, war: Double? = nil) {
                self.bond = bond
                self.cash = cash
                self.fut = fut
                self.opt = opt
                self.stk = stk
                self.war = war
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                bond = try container.decodeIfPresent("BOND")
                cash = try container.decodeIfPresent("CASH")
                fut = try container.decodeIfPresent("FUT")
                opt = try container.decodeIfPresent("OPT")
                stk = try container.decodeIfPresent("STK")
                war = try container.decodeIfPresent("WAR")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(bond, forKey: "BOND")
                try container.encodeIfPresent(cash, forKey: "CASH")
                try container.encodeIfPresent(fut, forKey: "FUT")
                try container.encodeIfPresent(opt, forKey: "OPT")
                try container.encodeIfPresent(stk, forKey: "STK")
                try container.encodeIfPresent(war, forKey: "WAR")
            }

        }

        /** short positions allocation */
        public struct Short: APIModel {

            public let bond: Double?

            public let cash: Double?

            public let fut: Double?

            public let opt: Double?

            public let stk: Double?

            public let war: Double?

            public init(bond: Double? = nil, cash: Double? = nil, fut: Double? = nil, opt: Double? = nil, stk: Double? = nil, war: Double? = nil) {
                self.bond = bond
                self.cash = cash
                self.fut = fut
                self.opt = opt
                self.stk = stk
                self.war = war
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                bond = try container.decodeIfPresent("BOND")
                cash = try container.decodeIfPresent("CASH")
                fut = try container.decodeIfPresent("FUT")
                opt = try container.decodeIfPresent("OPT")
                stk = try container.decodeIfPresent("STK")
                war = try container.decodeIfPresent("WAR")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(bond, forKey: "BOND")
                try container.encodeIfPresent(cash, forKey: "CASH")
                try container.encodeIfPresent(fut, forKey: "FUT")
                try container.encodeIfPresent(opt, forKey: "OPT")
                try container.encodeIfPresent(stk, forKey: "STK")
                try container.encodeIfPresent(war, forKey: "WAR")
            }

        }

        public init(long: Long? = nil, short: Short? = nil) {
            self.long = long
            self.short = short
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            long = try container.decodeIfPresent("long")
            short = try container.decodeIfPresent("short")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(long, forKey: "long")
            try container.encodeIfPresent(short, forKey: "short")
        }

    }

    /** portfolio allocation by group */
    public struct Group: APIModel {

        /** long positions allocation */
        public let long: Long?

        /** short positions allocation */
        public let short: Short?

        /** long positions allocation */
        public struct Long: APIModel {

            public let apparel: Double?

            public let chemicals: Double?

            public let communications: Double?

            public let computers: Double?

            public let others: Double?

            public let semiconductors: Double?

            public init(apparel: Double? = nil, chemicals: Double? = nil, communications: Double? = nil, computers: Double? = nil, others: Double? = nil, semiconductors: Double? = nil) {
                self.apparel = apparel
                self.chemicals = chemicals
                self.communications = communications
                self.computers = computers
                self.others = others
                self.semiconductors = semiconductors
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                apparel = try container.decodeIfPresent("Apparel")
                chemicals = try container.decodeIfPresent("Chemicals")
                communications = try container.decodeIfPresent("Communications")
                computers = try container.decodeIfPresent("Computers")
                others = try container.decodeIfPresent("Others")
                semiconductors = try container.decodeIfPresent("Semiconductors")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(apparel, forKey: "Apparel")
                try container.encodeIfPresent(chemicals, forKey: "Chemicals")
                try container.encodeIfPresent(communications, forKey: "Communications")
                try container.encodeIfPresent(computers, forKey: "Computers")
                try container.encodeIfPresent(others, forKey: "Others")
                try container.encodeIfPresent(semiconductors, forKey: "Semiconductors")
            }

        }

        /** short positions allocation */
        public struct Short: APIModel {

            public let airlines: Double?

            public let banks: Double?

            public let internet: Double?

            public init(airlines: Double? = nil, banks: Double? = nil, internet: Double? = nil) {
                self.airlines = airlines
                self.banks = banks
                self.internet = internet
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                airlines = try container.decodeIfPresent("Airlines")
                banks = try container.decodeIfPresent("Banks")
                internet = try container.decodeIfPresent("Internet")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(airlines, forKey: "Airlines")
                try container.encodeIfPresent(banks, forKey: "Banks")
                try container.encodeIfPresent(internet, forKey: "Internet")
            }

        }

        public init(long: Long? = nil, short: Short? = nil) {
            self.long = long
            self.short = short
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            long = try container.decodeIfPresent("long")
            short = try container.decodeIfPresent("short")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(long, forKey: "long")
            try container.encodeIfPresent(short, forKey: "short")
        }

    }

    /** portfolio allocation by sector */
    public struct Sector: APIModel {

        /** long positions allocation */
        public let long: Long?

        /** short positions allocation */
        public let short: Short?

        /** long positions allocation */
        public struct Long: APIModel {

            public let communications: Double?

            public let energy: Double?

            public let financial: Double?

            public let others: Double?

            public let technology: Double?

            public let utilities: Double?

            public init(communications: Double? = nil, energy: Double? = nil, financial: Double? = nil, others: Double? = nil, technology: Double? = nil, utilities: Double? = nil) {
                self.communications = communications
                self.energy = energy
                self.financial = financial
                self.others = others
                self.technology = technology
                self.utilities = utilities
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                communications = try container.decodeIfPresent("Communications")
                energy = try container.decodeIfPresent("Energy")
                financial = try container.decodeIfPresent("Financial")
                others = try container.decodeIfPresent("Others")
                technology = try container.decodeIfPresent("Technology")
                utilities = try container.decodeIfPresent("Utilities")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(communications, forKey: "Communications")
                try container.encodeIfPresent(energy, forKey: "Energy")
                try container.encodeIfPresent(financial, forKey: "Financial")
                try container.encodeIfPresent(others, forKey: "Others")
                try container.encodeIfPresent(technology, forKey: "Technology")
                try container.encodeIfPresent(utilities, forKey: "Utilities")
            }

        }

        /** short positions allocation */
        public struct Short: APIModel {

            public let consumer: Double?

            public let diversified: Double?

            public let industrial: Double?

            public init(consumer: Double? = nil, diversified: Double? = nil, industrial: Double? = nil) {
                self.consumer = consumer
                self.diversified = diversified
                self.industrial = industrial
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                consumer = try container.decodeIfPresent("Consumer")
                diversified = try container.decodeIfPresent("Diversified")
                industrial = try container.decodeIfPresent("Industrial")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(consumer, forKey: "Consumer")
                try container.encodeIfPresent(diversified, forKey: "Diversified")
                try container.encodeIfPresent(industrial, forKey: "Industrial")
            }

        }

        public init(long: Long? = nil, short: Short? = nil) {
            self.long = long
            self.short = short
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            long = try container.decodeIfPresent("long")
            short = try container.decodeIfPresent("short")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(long, forKey: "long")
            try container.encodeIfPresent(short, forKey: "short")
        }

    }

    public init(assetClass: AssetClass? = nil, group: Group? = nil, sector: Sector? = nil) {
        self.assetClass = assetClass
        self.group = group
        self.sector = sector
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        assetClass = try container.decodeIfPresent("assetClass")
        group = try container.decodeIfPresent("group")
        sector = try container.decodeIfPresent("sector")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(assetClass, forKey: "assetClass")
        try container.encodeIfPresent(group, forKey: "group")
        try container.encodeIfPresent(sector, forKey: "sector")
    }

}
