//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Transaction: APIModel {

    public var acctid: String?

    /** Raw value, no formatting. Net transaction amount (may include commission, tax).
In asset currency */
    public var amt: Double?

    public var conid: Double?

    /** currency code */
    public var cur: String?

    /** Date of transaction.  Epoch time, GMT */
    public var date: String?

    /** Transaction description */
    public var desc: String?

    /** Conversion rate from asset currency to response currency */
    public var fxRate: Double?

    /** In asset currency. Not be applicable for all transaction types. */
    public var pr: Double?

    /** Not applicable for all transaction types */
    public var qty: Double?

    /** Transaction Type Name: Examples: "Sell", "Buy", "Corporate Action",
"Dividend Payment", "Transfer", "Payment in Lieu"
Dividends and Transfers do not have price and quantity in response
 */
    public var type: String?

    public init(acctid: String? = nil, amt: Double? = nil, conid: Double? = nil, cur: String? = nil, date: String? = nil, desc: String? = nil, fxRate: Double? = nil, pr: Double? = nil, qty: Double? = nil, type: String? = nil) {
        self.acctid = acctid
        self.amt = amt
        self.conid = conid
        self.cur = cur
        self.date = date
        self.desc = desc
        self.fxRate = fxRate
        self.pr = pr
        self.qty = qty
        self.type = type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        acctid = try container.decodeIfPresent("acctid")
        amt = try container.decodeIfPresent("amt")
        conid = try container.decodeIfPresent("conid")
        cur = try container.decodeIfPresent("cur")
        date = try container.decodeIfPresent("date")
        desc = try container.decodeIfPresent("desc")
        fxRate = try container.decodeIfPresent("fxRate")
        pr = try container.decodeIfPresent("pr")
        qty = try container.decodeIfPresent("qty")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(acctid, forKey: "acctid")
        try container.encodeIfPresent(amt, forKey: "amt")
        try container.encodeIfPresent(conid, forKey: "conid")
        try container.encodeIfPresent(cur, forKey: "cur")
        try container.encodeIfPresent(date, forKey: "date")
        try container.encodeIfPresent(desc, forKey: "desc")
        try container.encodeIfPresent(fxRate, forKey: "fxRate")
        try container.encodeIfPresent(pr, forKey: "pr")
        try container.encodeIfPresent(qty, forKey: "qty")
        try container.encodeIfPresent(type, forKey: "type")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Transaction else { return false }
      guard self.acctid == object.acctid else { return false }
      guard self.amt == object.amt else { return false }
      guard self.conid == object.conid else { return false }
      guard self.cur == object.cur else { return false }
      guard self.date == object.date else { return false }
      guard self.desc == object.desc else { return false }
      guard self.fxRate == object.fxRate else { return false }
      guard self.pr == object.pr else { return false }
      guard self.qty == object.qty else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: Transaction, rhs: Transaction) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
