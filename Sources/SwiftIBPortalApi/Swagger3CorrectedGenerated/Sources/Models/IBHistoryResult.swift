//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct IBHistoryResult: APIModel {

    public let bars: Bars?

    public struct Bars: APIModel {

        public let close: Double?

        public let count: Double?

        public let endTime: String?

        public let high: Double?

        public let low: Double?

        public let `open`: Double?

        public let time: String?

        public let volume: Double?

        public let weightedAvg: Double?

        public init(close: Double? = nil, count: Double? = nil, endTime: String? = nil, high: Double? = nil, low: Double? = nil, `open`: Double? = nil, time: String? = nil, volume: Double? = nil, weightedAvg: Double? = nil) {
            self.close = close
            self.count = count
            self.endTime = endTime
            self.high = high
            self.low = low
            self.`open` = `open`
            self.time = time
            self.volume = volume
            self.weightedAvg = weightedAvg
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            close = try container.decodeIfPresent("close")
            count = try container.decodeIfPresent("count")
            endTime = try container.decodeIfPresent("endTime")
            high = try container.decodeIfPresent("high")
            low = try container.decodeIfPresent("low")
            `open` = try container.decodeIfPresent("open")
            time = try container.decodeIfPresent("time")
            volume = try container.decodeIfPresent("volume")
            weightedAvg = try container.decodeIfPresent("weightedAvg")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(close, forKey: "close")
            try container.encodeIfPresent(count, forKey: "count")
            try container.encodeIfPresent(endTime, forKey: "endTime")
            try container.encodeIfPresent(high, forKey: "high")
            try container.encodeIfPresent(low, forKey: "low")
            try container.encodeIfPresent(`open`, forKey: "open")
            try container.encodeIfPresent(time, forKey: "time")
            try container.encodeIfPresent(volume, forKey: "volume")
            try container.encodeIfPresent(weightedAvg, forKey: "weightedAvg")
        }

    }

    public init(bars: Bars? = nil) {
        self.bars = bars
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        bars = try container.decodeIfPresent("bars")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(bars, forKey: "bars")
    }

}
