//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Account Information */
public class Position: APIModel {

    public var acctId: String?

    public var assetClass: String?

    public var avgCost: Double?

    public var avgPrice: Double?

    public var baseAvgCost: Double?

    public var baseAvgPrice: Double?

    public var baseMktPrice: Double?

    public var baseMktValue: Double?

    public var baseRealizedPnl: Double?

    public var baseUnrealizedPnl: Double?

    public var conExchMap: [String]?

    public var conid: Int?

    public var contractDesc: String?

    public var currency: String?

    public var exchs: String?

    public var exerciseStyle: String?

    public var expiry: String?

    public var fullName: String?

    public var group: String?

    public var lastTradingDay: String?

    public var mktPrice: Double?

    public var mktValue: Double?

    public var model: String?

    public var multiplier: Double?

    public var name: String?

    public var pageSize: Int?

    public var position: Double?

    public var putOrCall: String?

    public var realizedPnl: Double?

    public var sector: String?

    public var sectorGroup: String?

    public var strike: Double?

    public var ticker: String?

    public var undComp: String?

    public var undConid: Int?

    public var undSym: String?

    public var unrealizedPnl: Double?

    public init(acctId: String? = nil, assetClass: String? = nil, avgCost: Double? = nil, avgPrice: Double? = nil, baseAvgCost: Double? = nil, baseAvgPrice: Double? = nil, baseMktPrice: Double? = nil, baseMktValue: Double? = nil, baseRealizedPnl: Double? = nil, baseUnrealizedPnl: Double? = nil, conExchMap: [String]? = nil, conid: Int? = nil, contractDesc: String? = nil, currency: String? = nil, exchs: String? = nil, exerciseStyle: String? = nil, expiry: String? = nil, fullName: String? = nil, group: String? = nil, lastTradingDay: String? = nil, mktPrice: Double? = nil, mktValue: Double? = nil, model: String? = nil, multiplier: Double? = nil, name: String? = nil, pageSize: Int? = nil, position: Double? = nil, putOrCall: String? = nil, realizedPnl: Double? = nil, sector: String? = nil, sectorGroup: String? = nil, strike: Double? = nil, ticker: String? = nil, undComp: String? = nil, undConid: Int? = nil, undSym: String? = nil, unrealizedPnl: Double? = nil) {
        self.acctId = acctId
        self.assetClass = assetClass
        self.avgCost = avgCost
        self.avgPrice = avgPrice
        self.baseAvgCost = baseAvgCost
        self.baseAvgPrice = baseAvgPrice
        self.baseMktPrice = baseMktPrice
        self.baseMktValue = baseMktValue
        self.baseRealizedPnl = baseRealizedPnl
        self.baseUnrealizedPnl = baseUnrealizedPnl
        self.conExchMap = conExchMap
        self.conid = conid
        self.contractDesc = contractDesc
        self.currency = currency
        self.exchs = exchs
        self.exerciseStyle = exerciseStyle
        self.expiry = expiry
        self.fullName = fullName
        self.group = group
        self.lastTradingDay = lastTradingDay
        self.mktPrice = mktPrice
        self.mktValue = mktValue
        self.model = model
        self.multiplier = multiplier
        self.name = name
        self.pageSize = pageSize
        self.position = position
        self.putOrCall = putOrCall
        self.realizedPnl = realizedPnl
        self.sector = sector
        self.sectorGroup = sectorGroup
        self.strike = strike
        self.ticker = ticker
        self.undComp = undComp
        self.undConid = undConid
        self.undSym = undSym
        self.unrealizedPnl = unrealizedPnl
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        acctId = try container.decodeIfPresent("acctId")
        assetClass = try container.decodeIfPresent("assetClass")
        avgCost = try container.decodeIfPresent("avgCost")
        avgPrice = try container.decodeIfPresent("avgPrice")
        baseAvgCost = try container.decodeIfPresent("baseAvgCost")
        baseAvgPrice = try container.decodeIfPresent("baseAvgPrice")
        baseMktPrice = try container.decodeIfPresent("baseMktPrice")
        baseMktValue = try container.decodeIfPresent("baseMktValue")
        baseRealizedPnl = try container.decodeIfPresent("baseRealizedPnl")
        baseUnrealizedPnl = try container.decodeIfPresent("baseUnrealizedPnl")
        conExchMap = try container.decodeArrayIfPresent("conExchMap")
        conid = try container.decodeIfPresent("conid")
        contractDesc = try container.decodeIfPresent("contractDesc")
        currency = try container.decodeIfPresent("currency")
        exchs = try container.decodeIfPresent("exchs")
        exerciseStyle = try container.decodeIfPresent("exerciseStyle")
        expiry = try container.decodeIfPresent("expiry")
        fullName = try container.decodeIfPresent("fullName")
        group = try container.decodeIfPresent("group")
        lastTradingDay = try container.decodeIfPresent("lastTradingDay")
        mktPrice = try container.decodeIfPresent("mktPrice")
        mktValue = try container.decodeIfPresent("mktValue")
        model = try container.decodeIfPresent("model")
        multiplier = try container.decodeIfPresent("multiplier")
        name = try container.decodeIfPresent("name")
        pageSize = try container.decodeIfPresent("pageSize")
        position = try container.decodeIfPresent("position")
        putOrCall = try container.decodeIfPresent("putOrCall")
        realizedPnl = try container.decodeIfPresent("realizedPnl")
        sector = try container.decodeIfPresent("sector")
        sectorGroup = try container.decodeIfPresent("sectorGroup")
        strike = try container.decodeIfPresent("strike")
        ticker = try container.decodeIfPresent("ticker")
        undComp = try container.decodeIfPresent("undComp")
        undConid = try container.decodeIfPresent("undConid")
        undSym = try container.decodeIfPresent("undSym")
        unrealizedPnl = try container.decodeIfPresent("unrealizedPnl")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(acctId, forKey: "acctId")
        try container.encodeIfPresent(assetClass, forKey: "assetClass")
        try container.encodeIfPresent(avgCost, forKey: "avgCost")
        try container.encodeIfPresent(avgPrice, forKey: "avgPrice")
        try container.encodeIfPresent(baseAvgCost, forKey: "baseAvgCost")
        try container.encodeIfPresent(baseAvgPrice, forKey: "baseAvgPrice")
        try container.encodeIfPresent(baseMktPrice, forKey: "baseMktPrice")
        try container.encodeIfPresent(baseMktValue, forKey: "baseMktValue")
        try container.encodeIfPresent(baseRealizedPnl, forKey: "baseRealizedPnl")
        try container.encodeIfPresent(baseUnrealizedPnl, forKey: "baseUnrealizedPnl")
        try container.encodeIfPresent(conExchMap, forKey: "conExchMap")
        try container.encodeIfPresent(conid, forKey: "conid")
        try container.encodeIfPresent(contractDesc, forKey: "contractDesc")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(exchs, forKey: "exchs")
        try container.encodeIfPresent(exerciseStyle, forKey: "exerciseStyle")
        try container.encodeIfPresent(expiry, forKey: "expiry")
        try container.encodeIfPresent(fullName, forKey: "fullName")
        try container.encodeIfPresent(group, forKey: "group")
        try container.encodeIfPresent(lastTradingDay, forKey: "lastTradingDay")
        try container.encodeIfPresent(mktPrice, forKey: "mktPrice")
        try container.encodeIfPresent(mktValue, forKey: "mktValue")
        try container.encodeIfPresent(model, forKey: "model")
        try container.encodeIfPresent(multiplier, forKey: "multiplier")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(pageSize, forKey: "pageSize")
        try container.encodeIfPresent(position, forKey: "position")
        try container.encodeIfPresent(putOrCall, forKey: "putOrCall")
        try container.encodeIfPresent(realizedPnl, forKey: "realizedPnl")
        try container.encodeIfPresent(sector, forKey: "sector")
        try container.encodeIfPresent(sectorGroup, forKey: "sectorGroup")
        try container.encodeIfPresent(strike, forKey: "strike")
        try container.encodeIfPresent(ticker, forKey: "ticker")
        try container.encodeIfPresent(undComp, forKey: "undComp")
        try container.encodeIfPresent(undConid, forKey: "undConid")
        try container.encodeIfPresent(undSym, forKey: "undSym")
        try container.encodeIfPresent(unrealizedPnl, forKey: "unrealizedPnl")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Position else { return false }
      guard self.acctId == object.acctId else { return false }
      guard self.assetClass == object.assetClass else { return false }
      guard self.avgCost == object.avgCost else { return false }
      guard self.avgPrice == object.avgPrice else { return false }
      guard self.baseAvgCost == object.baseAvgCost else { return false }
      guard self.baseAvgPrice == object.baseAvgPrice else { return false }
      guard self.baseMktPrice == object.baseMktPrice else { return false }
      guard self.baseMktValue == object.baseMktValue else { return false }
      guard self.baseRealizedPnl == object.baseRealizedPnl else { return false }
      guard self.baseUnrealizedPnl == object.baseUnrealizedPnl else { return false }
      guard self.conExchMap == object.conExchMap else { return false }
      guard self.conid == object.conid else { return false }
      guard self.contractDesc == object.contractDesc else { return false }
      guard self.currency == object.currency else { return false }
      guard self.exchs == object.exchs else { return false }
      guard self.exerciseStyle == object.exerciseStyle else { return false }
      guard self.expiry == object.expiry else { return false }
      guard self.fullName == object.fullName else { return false }
      guard self.group == object.group else { return false }
      guard self.lastTradingDay == object.lastTradingDay else { return false }
      guard self.mktPrice == object.mktPrice else { return false }
      guard self.mktValue == object.mktValue else { return false }
      guard self.model == object.model else { return false }
      guard self.multiplier == object.multiplier else { return false }
      guard self.name == object.name else { return false }
      guard self.pageSize == object.pageSize else { return false }
      guard self.position == object.position else { return false }
      guard self.putOrCall == object.putOrCall else { return false }
      guard self.realizedPnl == object.realizedPnl else { return false }
      guard self.sector == object.sector else { return false }
      guard self.sectorGroup == object.sectorGroup else { return false }
      guard self.strike == object.strike else { return false }
      guard self.ticker == object.ticker else { return false }
      guard self.undComp == object.undComp else { return false }
      guard self.undConid == object.undConid else { return false }
      guard self.undSym == object.undSym else { return false }
      guard self.unrealizedPnl == object.unrealizedPnl else { return false }
      return true
    }

    public static func == (lhs: Position, rhs: Position) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
