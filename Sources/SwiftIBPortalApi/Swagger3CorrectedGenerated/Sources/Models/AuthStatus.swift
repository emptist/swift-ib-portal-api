//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class AuthStatus: APIModel {

    /** Brokerage session is authenticated */
    public var authenticated: Bool?

    /** Brokerage session is competing, e.g. user is logged in to IBKR Mobile, WebTrader, TWS or other trading platforms. */
    public var competing: Bool?

    /** Connected to backend */
    public var connected: Bool?

    /** Authentication failed, why. */
    public var fail: String?

    /** System messages that may affect trading */
    public var message: String?

    /** Prompt messages that may affect trading or the account */
    public var prompts: [String]?

    public init(authenticated: Bool? = nil, competing: Bool? = nil, connected: Bool? = nil, fail: String? = nil, message: String? = nil, prompts: [String]? = nil) {
        self.authenticated = authenticated
        self.competing = competing
        self.connected = connected
        self.fail = fail
        self.message = message
        self.prompts = prompts
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        authenticated = try container.decodeIfPresent("authenticated")
        competing = try container.decodeIfPresent("competing")
        connected = try container.decodeIfPresent("connected")
        fail = try container.decodeIfPresent("fail")
        message = try container.decodeIfPresent("message")
        prompts = try container.decodeArrayIfPresent("prompts")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(authenticated, forKey: "authenticated")
        try container.encodeIfPresent(competing, forKey: "competing")
        try container.encodeIfPresent(connected, forKey: "connected")
        try container.encodeIfPresent(fail, forKey: "fail")
        try container.encodeIfPresent(message, forKey: "message")
        try container.encodeIfPresent(prompts, forKey: "prompts")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AuthStatus else { return false }
      guard self.authenticated == object.authenticated else { return false }
      guard self.competing == object.competing else { return false }
      guard self.connected == object.connected else { return false }
      guard self.fail == object.fail else { return false }
      guard self.message == object.message else { return false }
      guard self.prompts == object.prompts else { return false }
      return true
    }

    public static func == (lhs: AuthStatus, rhs: AuthStatus) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
