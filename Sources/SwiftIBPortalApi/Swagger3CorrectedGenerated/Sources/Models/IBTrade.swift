//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct IBTrade: APIModel {

    public let account: String?

    public let clearingId: String?

    public let clearingName: String?

    public let comission: Double?

    public let companyName: String?

    public let conidex: String?

    public let contractDescription1: String?

    public let exchange: String?

    public let executionId: String?

    public let netAmount: Double?

    public let orderDescription: String?

    /** User defined string used to identify the order. Value is set using "cOID" field while placing an order. */
    public let orderRef: String?

    public let position: String?

    public let price: String?

    public let secType: String?

    public let side: String?

    public let size: String?

    public let submitter: String?

    public let symbol: String?

    public let tradeTime: String?

    public let tradeTimer: Double?

    public init(account: String? = nil, clearingId: String? = nil, clearingName: String? = nil, comission: Double? = nil, companyName: String? = nil, conidex: String? = nil, contractDescription1: String? = nil, exchange: String? = nil, executionId: String? = nil, netAmount: Double? = nil, orderDescription: String? = nil, orderRef: String? = nil, position: String? = nil, price: String? = nil, secType: String? = nil, side: String? = nil, size: String? = nil, submitter: String? = nil, symbol: String? = nil, tradeTime: String? = nil, tradeTimer: Double? = nil) {
        self.account = account
        self.clearingId = clearingId
        self.clearingName = clearingName
        self.comission = comission
        self.companyName = companyName
        self.conidex = conidex
        self.contractDescription1 = contractDescription1
        self.exchange = exchange
        self.executionId = executionId
        self.netAmount = netAmount
        self.orderDescription = orderDescription
        self.orderRef = orderRef
        self.position = position
        self.price = price
        self.secType = secType
        self.side = side
        self.size = size
        self.submitter = submitter
        self.symbol = symbol
        self.tradeTime = tradeTime
        self.tradeTimer = tradeTimer
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        account = try container.decodeIfPresent("account")
        clearingId = try container.decodeIfPresent("clearing_id")
        clearingName = try container.decodeIfPresent("clearing_name")
        comission = try container.decodeIfPresent("comission")
        companyName = try container.decodeIfPresent("company_name")
        conidex = try container.decodeIfPresent("conidex")
        contractDescription1 = try container.decodeIfPresent("contract_description_1")
        exchange = try container.decodeIfPresent("exchange")
        executionId = try container.decodeIfPresent("execution_id")
        netAmount = try container.decodeIfPresent("net_amount")
        orderDescription = try container.decodeIfPresent("order_description")
        orderRef = try container.decodeIfPresent("order_ref")
        position = try container.decodeIfPresent("position")
        price = try container.decodeIfPresent("price")
        secType = try container.decodeIfPresent("sec_type")
        side = try container.decodeIfPresent("side")
        size = try container.decodeIfPresent("size")
        submitter = try container.decodeIfPresent("submitter")
        symbol = try container.decodeIfPresent("symbol")
        tradeTime = try container.decodeIfPresent("trade_time")
        tradeTimer = try container.decodeIfPresent("trade_time_r")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(account, forKey: "account")
        try container.encodeIfPresent(clearingId, forKey: "clearing_id")
        try container.encodeIfPresent(clearingName, forKey: "clearing_name")
        try container.encodeIfPresent(comission, forKey: "comission")
        try container.encodeIfPresent(companyName, forKey: "company_name")
        try container.encodeIfPresent(conidex, forKey: "conidex")
        try container.encodeIfPresent(contractDescription1, forKey: "contract_description_1")
        try container.encodeIfPresent(exchange, forKey: "exchange")
        try container.encodeIfPresent(executionId, forKey: "execution_id")
        try container.encodeIfPresent(netAmount, forKey: "net_amount")
        try container.encodeIfPresent(orderDescription, forKey: "order_description")
        try container.encodeIfPresent(orderRef, forKey: "order_ref")
        try container.encodeIfPresent(position, forKey: "position")
        try container.encodeIfPresent(price, forKey: "price")
        try container.encodeIfPresent(secType, forKey: "sec_type")
        try container.encodeIfPresent(side, forKey: "side")
        try container.encodeIfPresent(size, forKey: "size")
        try container.encodeIfPresent(submitter, forKey: "submitter")
        try container.encodeIfPresent(symbol, forKey: "symbol")
        try container.encodeIfPresent(tradeTime, forKey: "trade_time")
        try container.encodeIfPresent(tradeTimer, forKey: "trade_time_r")
    }

}
