//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ScannerResult: APIModel {

    /** Contains list of contracts matching the scanner query */
    public var contracts: Contracts?

    public var id: Double?

    public var offset: Int?

    public var position: String?

    public var scanTime: String?

    public var size: Int?

    public var total: Int?

    /** Contains list of contracts matching the scanner query */
    public class Contracts: APIModel {

        public var contract: [Contract]?

        /** Contains list of contracts matching the scanner query */
        public class Contract: APIModel {

            public var contractID: Int?

            public var distance: Int?

            public var inScanTime: String?

            public init(contractID: Int? = nil, distance: Int? = nil, inScanTime: String? = nil) {
                self.contractID = contractID
                self.distance = distance
                self.inScanTime = inScanTime
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                contractID = try container.decodeIfPresent("contractID")
                distance = try container.decodeIfPresent("distance")
                inScanTime = try container.decodeIfPresent("inScanTime")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(contractID, forKey: "contractID")
                try container.encodeIfPresent(distance, forKey: "distance")
                try container.encodeIfPresent(inScanTime, forKey: "inScanTime")
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? Contract else { return false }
              guard self.contractID == object.contractID else { return false }
              guard self.distance == object.distance else { return false }
              guard self.inScanTime == object.inScanTime else { return false }
              return true
            }

            public static func == (lhs: Contract, rhs: Contract) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public init(contract: [Contract]? = nil) {
            self.contract = contract
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            contract = try container.decodeArrayIfPresent("Contract")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(contract, forKey: "Contract")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Contracts else { return false }
          guard self.contract == object.contract else { return false }
          return true
        }

        public static func == (lhs: Contracts, rhs: Contracts) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(contracts: Contracts? = nil, id: Double? = nil, offset: Int? = nil, position: String? = nil, scanTime: String? = nil, size: Int? = nil, total: Int? = nil) {
        self.contracts = contracts
        self.id = id
        self.offset = offset
        self.position = position
        self.scanTime = scanTime
        self.size = size
        self.total = total
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        contracts = try container.decodeIfPresent("Contracts")
        id = try container.decodeIfPresent("id")
        offset = try container.decodeIfPresent("offset")
        position = try container.decodeIfPresent("position")
        scanTime = try container.decodeIfPresent("scanTime")
        size = try container.decodeIfPresent("size")
        total = try container.decodeIfPresent("total")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(contracts, forKey: "Contracts")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(offset, forKey: "offset")
        try container.encodeIfPresent(position, forKey: "position")
        try container.encodeIfPresent(scanTime, forKey: "scanTime")
        try container.encodeIfPresent(size, forKey: "size")
        try container.encodeIfPresent(total, forKey: "total")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ScannerResult else { return false }
      guard self.contracts == object.contracts else { return false }
      guard self.id == object.id else { return false }
      guard self.offset == object.offset else { return false }
      guard self.position == object.position else { return false }
      guard self.scanTime == object.scanTime else { return false }
      guard self.size == object.size else { return false }
      guard self.total == object.total else { return false }
      return true
    }

    public static func == (lhs: ScannerResult, rhs: ScannerResult) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
