//
// AccountAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AccountAPI {
    /**
     PnL for the selected account
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverAccountPnlPartitionedGet(completion: @escaping ((_ data: InlineResponse20029?,_ error: Error?) -> Void)) {
        iserverAccountPnlPartitionedGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     PnL for the selected account
     - GET /iserver/account/pnl/partitioned
     - Returns an object containing PnL for the selected account and its models (if any). To receive streaming PnL the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details. 
     - examples: [{contentType=application/json, example={
  "acctId" : "{}"
}}]

     - returns: RequestBuilder<InlineResponse20029> 
     */
    open class func iserverAccountPnlPartitionedGetWithRequestBuilder() -> RequestBuilder<InlineResponse20029> {
        let path = "/iserver/account/pnl/partitioned"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20029>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Updates currently selected account to the provided account
     
     - parameter body: (body) account id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverAccountPost(body: SetAccount, completion: @escaping ((_ data: InlineResponse20012?,_ error: Error?) -> Void)) {
        iserverAccountPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Updates currently selected account to the provided account
     - POST /iserver/account
     - If an user has multiple accounts, and user wants to get orders, trades, etc. of an account other than currently selected account, then user can update the currently selected account using this API and then can fetch required information for the newly updated account.
     - examples: [{contentType=application/json, example={
  "set" : true,
  "acctId" : "acctId"
}}]
     
     - parameter body: (body) account id 

     - returns: RequestBuilder<InlineResponse20012> 
     */
    open class func iserverAccountPostWithRequestBuilder(body: SetAccount) -> RequestBuilder<InlineResponse20012> {
        let path = "/iserver/account"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20012>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Brokerage Accounts
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func iserverAccountsGet(completion: @escaping ((_ data: InlineResponse20011?,_ error: Error?) -> Void)) {
        iserverAccountsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Brokerage Accounts
     - GET /iserver/accounts
     - Returns a list of accounts the user has trading access to, their respective aliases and the currently selected account. Note this endpoint must be called before modifying an order or querying open orders.
     - examples: [{contentType=application/json, example={
  "aliases" : "{}",
  "selectedAccount" : "selectedAccount",
  "accounts" : [ "accounts", "accounts" ]
}}]

     - returns: RequestBuilder<InlineResponse20011> 
     */
    open class func iserverAccountsGetWithRequestBuilder() -> RequestBuilder<InlineResponse20011> {
        let path = "/iserver/accounts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20011>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Account Ledger
     
     - parameter accountId: (path) account id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func portfolioAccountIdLedgerGet(accountId: String, completion: @escaping ((_ data: InlineResponse2009?,_ error: Error?) -> Void)) {
        portfolioAccountIdLedgerGetWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Account Ledger
     - GET /portfolio/{accountId}/ledger
     - Information regarding settled cash, cash balances, etc. in the account's base currency and any other cash balances hold in other currencies.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https://www.interactivebrokers.com/en/index.php?f=3185.
     - examples: [{contentType=application/json, example={
  "BASE" : {
    "commoditymarketvalue" : 0.80082819046101150206595775671303272247314453125,
    "severity" : 1,
    "futuremarketvalue" : 6.02745618307040320615897144307382404804229736328125,
    "settledcash" : 1.46581298050294517310021547018550336360931396484375,
    "exchangerate" : 5.962133916683182377482808078639209270477294921875,
    "sessionid" : 5,
    "cashbalance" : 2.3021358869347654518833223846741020679473876953125,
    "corporatebondsmarketvalue" : 7.061401241503109105224211816675961017608642578125,
    "warrantsmarketvalue" : 9.301444243932575517419536481611430644989013671875,
    "netliquidationvalue" : 3.61607674925191080461672754609026014804840087890625,
    "interest" : 2.027123023002321833274663731572218239307403564453125,
    "unrealizedpnl" : 4.1456080298839363962315474054776132106781005859375,
    "stockmarketvalue" : 7.3862819483858839220147274318151175975799560546875,
    "moneyfunds" : 1.231513536777255612975068288506008684635162353515625,
    "currency" : "currency",
    "realizedpnl" : 1.024645700144157789424070870154537260532379150390625,
    "funds" : 1.489415909854170383397331534069962799549102783203125,
    "acctcode" : "acctcode",
    "issueroptionsmarketvalue" : 6.8468526983526398765889098285697400569915771484375,
    "key" : "key",
    "timestamp" : 7
  }
}}]
     
     - parameter accountId: (path) account id 

     - returns: RequestBuilder<InlineResponse2009> 
     */
    open class func portfolioAccountIdLedgerGetWithRequestBuilder(accountId: String) -> RequestBuilder<InlineResponse2009> {
        var path = "/portfolio/{accountId}/ledger"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2009>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Account Information
     
     - parameter accountId: (path) account id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func portfolioAccountIdMetaGet(accountId: String, completion: @escaping ((_ data: Accounts?,_ error: Error?) -> Void)) {
        portfolioAccountIdMetaGetWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Account Information
     - GET /portfolio/{accountId}/meta
     - Account information related to account Id /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
     - examples: [{contentType=application/json, example=""}]
     
     - parameter accountId: (path) account id 

     - returns: RequestBuilder<Accounts> 
     */
    open class func portfolioAccountIdMetaGetWithRequestBuilder(accountId: String) -> RequestBuilder<Accounts> {
        var path = "/portfolio/{accountId}/meta"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Accounts>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Account Summary
     
     - parameter accountId: (path) account id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func portfolioAccountIdSummaryGet(accountId: String, completion: @escaping ((_ data: InlineResponse2008?,_ error: Error?) -> Void)) {
        portfolioAccountIdSummaryGetWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Account Summary
     - GET /portfolio/{accountId}/summary
     - Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
     - examples: [{contentType=application/json, example={
  "lookaheadavailablefunds-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "segmenttitle-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "buyingpower" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "grosspositionvalue-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "grosspositionvalue-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullmaintmarginreq" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "guarantee-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "billable-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "previousdayequitywithloanvalue" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "tradingtype-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "billable-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadexcessliquidity-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadexcessliquidity-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "daytradesremainingt+1" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "guarantee-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accruedcash-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadmaintmarginreq-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "postexpirationmargin" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accruedcash-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "guarantee-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "totalcashvalue-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "totalcashvalue-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "segmenttitle-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "indianstockhaircut-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadmaintmarginreq-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "segmenttitle-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "nlvandmargininreview" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadmaintmarginreq-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accruedcash-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "highestseverity-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "daytradesremainingt+4" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "daytradesremainingt+2" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "daytradesremainingt+3" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadinitmarginreq" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "highestseverity-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accounttype" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "guarantee" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "highestseverity-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "postexpirationexcess-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "postexpirationmargin-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "cushion" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "totalcashvalue-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadmaintmarginreq" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "leverage-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "initmarginreq-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "postexpirationmargin-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "leverage-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "excessliquidity" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "postexpirationmargin-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accrueddividend-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "leverage-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadavailablefunds-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accrueddividend-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "equitywithloanvalue" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accrueddividend-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "postexpirationexcess-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "postexpirationexcess-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadavailablefunds-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "availablefunds-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullavailablefunds-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "excessliquidity-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "maintmarginreq" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accountready" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "equitywithloanvalue-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "excessliquidity-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "availablefunds-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullavailablefunds-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullexcessliquidity-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullexcessliquidity-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadavailablefunds" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullavailablefunds-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "initmarginreq-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "totalcashvalue" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullexcessliquidity" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "equitywithloanvalue-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "totaldebitcardpendingcharges" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "equitywithloanvalue-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullmaintmarginreq-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullexcessliquidity-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "netliquidationuncertainty" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "initmarginreq-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullinitmarginreq-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "pasharesvalue-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadexcessliquidity" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "pasharesvalue-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullavailablefunds" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "maintmarginreq-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "netliquidation" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullmaintmarginreq-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullmaintmarginreq-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "maintmarginreq-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullinitmarginreq" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullinitmarginreq-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "postexpirationexcess" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadinitmarginreq-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accrueddividend" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "pasharesvalue-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "grosspositionvalue" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "maintmarginreq-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "daytradesremaining" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "fullinitmarginreq-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "indianstockhaircut-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "initmarginreq" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "leverage" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "netliquidation-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "netliquidation-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "pasharesvalue" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "indianstockhaircut-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "availablefunds" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "totaldebitcardpendingcharges-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "accruedcash" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadinitmarginreq-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadinitmarginreq-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "tradingtype-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "previousdayequitywithloanvalue-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "totaldebitcardpendingcharges-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "indianstockhaircut" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "totaldebitcardpendingcharges-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "billable-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "billable" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadexcessliquidity-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "availablefunds-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "excessliquidity-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "previousdayequitywithloanvalue-c" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "highestseverity" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "netliquidation-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "grosspositionvalue-s" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "previousdayequitywithloanvalue-f" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  },
  "lookaheadnextchange" : {
    "amount" : 0.80082819046101150206595775671303272247314453125,
    "isNull" : true,
    "currency" : "currency",
    "value" : "value",
    "timestamp" : 6
  }
}}]
     
     - parameter accountId: (path) account id 

     - returns: RequestBuilder<InlineResponse2008> 
     */
    open class func portfolioAccountIdSummaryGetWithRequestBuilder(accountId: String) -> RequestBuilder<InlineResponse2008> {
        var path = "/portfolio/{accountId}/summary"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2008>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Portfolio Accounts
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func portfolioAccountsGet(completion: @escaping ((_ data: Accounts?,_ error: Error?) -> Void)) {
        portfolioAccountsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Portfolio Accounts
     - GET /portfolio/accounts
     - In non-tiered account structures, returns a list of accounts for which the user can view position and account information. This endpoint must be called prior  to calling other /portfolio endpoints for those accounts. For querying a list of accounts  which the user can trade, see /iserver/accounts. For a list of subaccounts in tiered  account structures (e.g. financial advisor or ibroker accounts) see /portfolio/subaccounts.
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<Accounts> 
     */
    open class func portfolioAccountsGetWithRequestBuilder() -> RequestBuilder<Accounts> {
        let path = "/portfolio/accounts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Accounts>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List of Sub-Accounts
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func portfolioSubaccountsGet(completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        portfolioSubaccountsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List of Sub-Accounts
     - GET /portfolio/subaccounts
     - Used in tiered account structures (such as financial advisor and ibroker accounts)  to return a list of sub-accounts for which the user can view position and  account-related information. This endpoint must be called prior to calling other  /portfolio endpoints for those subaccounts.  To query a list of accounts the user can trade, see /iserver/accounts.
     - examples: [{contentType=application/json, example={
  "accountAlias" : "accountAlias",
  "faclient" : true,
  "parent" : "parent",
  "accountTitle" : "accountTitle",
  "displayName" : "displayName",
  "accountVan" : "accountVan",
  "type" : "type",
  "master" : {
    "title" : "title",
    "officialTitle" : "officialTitle"
  },
  "accountStatus" : 0.80082819046101150206595775671303272247314453125,
  "accountId" : "accountId",
  "tradingType" : "tradingType",
  "covestor" : true,
  "currency" : "currency",
  "id" : "id",
  "desc" : "desc"
}}]

     - returns: RequestBuilder<Account> 
     */
    open class func portfolioSubaccountsGetWithRequestBuilder() -> RequestBuilder<Account> {
        let path = "/portfolio/subaccounts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Account>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
